select count(*) from props$  where name = 'Flashback Timestamp TimeZone' and value$ = 'GMT'delete from WRH$_ENQUEUE_STAT tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"FLAGS" val,count(*) cnt  from "SYS"."MON_MODS_ALL$" t  where "FLAGS" is not null  group by "FLAGS") order by valselect FLAGS from SYS_FBA_TRACKEDTABLES where OBJ# = 21703SELECT NVL(MAX(SNAP_ID),0) FROM SYS.WRH$_SEG_STATinsert into wrh$_filemetric_history     (snap_id, dbid, instance_number,      fileid, creationtime,      begin_time, end_time, intsize, group_id,      avgreadtime, avgwritetime, physicalread,      physicalwrite, phyblkread, phyblkwrite)  select      :snap_id, :dbid, :instance_number,      fileid, creationtime,      begtime, endtime, intsize_csec, groupid,      avrdtime, avwrtime, phyread,      phywrite, phybkrd, phybkwr  from x$kewmflmvselect SUM(column_length) from all_ind_columns where table_name = 'GRAFICO'select SUM(column_length) from all_ind_columns where table_name = 'GRAFICO'select streams_pool_size_for_estimate s,           streams_pool_size_factor * 100 f,           estd_spill_time + estd_unspill_time, 0  from v$streams_pool_advicedelete from dependency$ where d_obj#=:1delete from dependency$ where d_obj#=:1delete from WRH$_TABLESPACE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) update WRI$_SCH_VOTES   set vector = :vec  where schedule_id  = :id    and vector_index = :vidxupdate WRI$_SCH_VOTES   set vector = :vec  where schedule_id  = :id    and vector_index = :vidxupdate WRI$_SCH_VOTES   set vector = :vec  where schedule_id  = :id    and vector_index = :vidxselect SUM(data_length) from all_tab_columns where table_name = 'MEDICOS'select min(minbkt),maxbkt,substrb(dump(min(val),16,0,32),1,120) minval,substrb(dump(max(val),16,0,32),1,120) maxval,sum(rep) sumrep, sum(repsq) sumrepsq, max(rep) maxrep, count(*) bktndv, sum(case when rep=1 then 1 else 0 end) unqrep from (select val,min(bkt) minbkt, max(bkt) maxbkt, count(val) rep, count(val)*count(val) repsq from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"START_DATE" val, ntile(254) over (order by "START_DATE") bkt  from "SYS"."SCHEDULER$_JOB_RUN_DETAILS" t  where "START_DATE" is not null) group by val) group by maxbkt order by maxbktupdate sys.optstat_hist_control$ set sval2 = :1 where  sname = 'SKIP_TIME'delete from idl_ub1$ where obj#=:1 and part=:2select /*+  no_parallel_index(t, "I_COL_USAGE$")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_COL_USAGE$") */ count(*) as nrw,count(distinct sys_op_lbid(458,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."COL_USAGE$" t where "OBJ#" is not null or "INTCOL#" is not nullselect /*+  no_parallel_index(t, "I_COL_USAGE$")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_COL_USAGE$") */ count(*) as nrw,count(distinct sys_op_lbid(458,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."COL_USAGE$" t where "OBJ#" is not null or "INTCOL#" is not nullUPDATE KET$_AUTOTASK_STATUS     SET ABA_STATE = 2,         RECONCILE_TIME = :1,         ABA_STATE_TIME = :2   WHERE DUMMY_KEY = 99999UPDATE KET$_AUTOTASK_STATUS     SET ABA_STATE = 2,         RECONCILE_TIME = :1,         ABA_STATE_TIME = :2   WHERE DUMMY_KEY = 99999select col#,intcol#,reftyp,stabid,expctoid from refcon$ where obj#=:1 order by intcol# ascselect col#,intcol#,reftyp,stabid,expctoid from refcon$ where obj#=:1 order by intcol# ascSELECT inst_id, occ_name_kewxocf, occ_desc_kewxocf,                 sch_name_kewxocf, move_proc_kewxocf,                 move_desc_kewxocf, space_usage_kewxocf          FROM   x$kewxocfSELECT AO.ATTR1 OBJD, SUM(AR.BENEFIT) AS BENEFIT FROM DBA_ADVISOR_ACTIONS AA, DBA_ADVISOR_OBJECTS AO, DBA_ADVISOR_RECOMMENDATIONS AR WHERE AA.TASK_ID IN ( SELECT TASK_ID FROM DBA_ADVISOR_TASKS WHERE ADVISOR_ID=1 AND EXECUTION_START > :B1 AND STATUS='COMPLETED' AND HOW_CREATED='AUTO') AND AA.COMMAND = 'RUN SEGMENT ADVISOR' AND AA.TASK_ID = AO.TASK_ID AND AA.OBJECT_ID = AO.OBJECT_ID AND AA.TASK_ID = AR.TASK_ID AND AA.REC_ID = AR.REC_ID GROUP BY AO.ATTR1 ORDER BY 2 DESCselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"PROGRAM_OID" val,count(*) cnt  from "SYS"."SCHEDULER$_JOB" t  where "PROGRAM_OID" is not null  group by "PROGRAM_OID") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"PROGRAM_OID" val,count(*) cnt  from "SYS"."SCHEDULER$_JOB" t  where "PROGRAM_OID" is not null  group by "PROGRAM_OID") order by valselect position, type from oparg$ where obj#=:1 and bind#=:2 order by positiondelete from subcoltype$ where obj#=:1delete from jijoin$ where obj# in ( select obj# from jijoin$ where tab1obj# = :1 or tab2obj# = :1)select location_name, user#, user_context, context_size, presentation,  version, status, any_context, context_type, qosflags, payload_callback,  timeout, reg_id, reg_time, ntfn_grouping_class, ntfn_grouping_value,  ntfn_grouping_type, ntfn_grouping_start_time, ntfn_grouping_repeat_count,  state, session_key  from reg$  where subscription_name = :1 and  namespace = :2  order by location_name, user#, presentation, versioninsert into con$(owner#,name,con#,spare1)values(:1,:2,:3,:4)select nvl(sum(d.blocks),0) from x$kewx_segments d, (select distinct o1.segment_name name from x$kewx_segments o1 where (o1.segment_name like  '%WRI$|_%' ESCAPE '|'    and o1.segment_name not like  '%WRI$|_ADV|_%' ESCAPE '|'    and o1.segment_name not like  '%WRI$|_OPTSTAT|_%' ESCAPE '|' )    or o1.segment_name =  'ALERT_QT' union all select distinct o2.lob_name name from x$kewx_lobs o2 where (o2.table_name like  '%WRI$|_%' ESCAPE '|'    and o2.table_name not like  '%WRI$|_ADV|_%' ESCAPE '|'    and o2.table_name not like  '%WRI$|_OPTSTAT|_%' ESCAPE '|' )    or o2.table_name =  'ALERT_QT' ) s where (d.owner = 'SYS') and (d.segment_name = s.name)delete from WRH$_COMP_IOSTAT tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) insert into objauth$(option$,grantor#,obj#,privilege#,grantee#,col#,sequence#) values(decode(:1,0,null,:1),:2,:3,:4,:5,decode(:6,0,null,:6),object_grant.nextval)insert into   WRI$_DBU_CPU_USAGE(dbid, version, timestamp,                      cpu_count, cpu_core_count, cpu_socket_count) select :dbid, :version, :bind1,        gv.gv_cpu_count, gv.gv_cpu_core_count, gv.gv_cpu_socket_count  from   (select sum(cpu_count_current)        as gv_cpu_count,           sum(cpu_core_count_current)   as gv_cpu_core_count,           sum(cpu_socket_count_current) as gv_cpu_socket_count      from GV$LICENSE) gv  where (nvl(gv_cpu_count,        -1),         nvl(gv_cpu_core_count,   -1),         nvl(gv_cpu_socket_count, -1))   not in (select nvl(cpu_count,        -1) as cu_cpu_count,                  nvl(cpu_core_count,   -1) as cu_cpu_core_count,                  nvl(cpu_socket_count, -1) as cu_cpu_socket_count           from (select cpu_count, cpu_core_count, cpu_socket_count                   from WRI$_DBU_CPU_USAGE                  order by timestamp desc)            where rownum <= 1)update sys.scheduler$_global_attribute set  value = :1, flags = :2, modified_inst = :3, additional_info = :4, attr_tstamp = :5, attr_intv = :6 where  obj# = :7update sys.scheduler$_global_attribute set  value = :1, flags = :2, modified_inst = :3, additional_info = :4, attr_tstamp = :5, attr_intv = :6 where  obj# = :7SELECT P.VALCHAR FROM SYS.OPTSTAT_USER_PREFS$ P, OBJ$ O, USER$ U WHERE P.OBJ#=O.OBJ# AND U.USER#=O.OWNER# AND U.NAME=:B3 AND O.NAME=:B2 AND P.PNAME=:B1 select SUM(column_length) from all_ind_columns where table_name = 'MEDICOS'select min(minbkt),maxbkt,substrb(dump(min(val),16,0,32),1,120) minval,substrb(dump(max(val),16,0,32),1,120) maxval,sum(rep) sumrep, sum(repsq) sumrepsq, max(rep) maxrep, count(*) bktndv, sum(case when rep=1 then 1 else 0 end) unqrep from (select val,min(bkt) minbkt, max(bkt) maxbkt, count(val) rep, count(val)*count(val) repsq from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"OBJ#" val, ntile(254) over (order by "OBJ#") bkt  from "SYS"."STATS_TARGET$" t  where "OBJ#" is not null) group by val) group by maxbkt order by maxbktselect obj# from objerror$select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"SPACE_ALLOCATED_DELTA" val,count(*) cnt  from "SYS"."WRH$_SEG_STAT" t  where "SPACE_ALLOCATED_DELTA" is not null  group by "SPACE_ALLOCATED_DELTA") order by valdelete coltype$ where obj#=:1select /*+  no_parallel_index(t, "SCHEDULER$_ATTRIB_PK")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"SCHEDULER$_ATTRIB_PK") */ count(*) as nrw,count(distinct sys_op_lbid(5993,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."SCHEDULER$_GLOBAL_ATTRIBUTE" t where "OBJ#" is not nullselect actionsize from trigger$ where obj# = :1select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"FILE#" val,count(*) cnt  from "SYS"."IND$" t  where "FILE#" is not null  group by "FILE#") order by valselect unique name, name from resource_consumer_group$ where status = 'ACTIVE'select SUM(data_length) from all_tab_columns where table_name = 'HOSPITALES'select o.name from obj$ o, refcon$ r where o.oid$ = r.expctoid and r.obj# = :1MERGE INTO SYS.MON_MODS_ALL$ MM USING ( SELECT /*+ ordered */ DISTINCT TAB.OBJ# FROM (SELECT T.OBJ# OBJ#, T.OBJ# BO#, T.ANALYZETIME FROM SYS.TAB$ T WHERE BITAND(T.FLAGS,16) = 16 UNION ALL SELECT T.OBJ# OBJ#, T.BO# BO#, T.ANALYZETIME FROM SYS.TABPART$ T WHERE BITAND(T.FLAGS,2) = 2 UNION ALL SELECT T.OBJ# OBJ#, T.BO# BO#, T.ANALYZETIME FROM SYS.TABCOMPART$ T WHERE BITAND(T.FLAGS,2) = 2 UNION ALL SELECT T.OBJ# OBJ#, TCP.BO# BO#, T.ANALYZETIME FROM SYS.TABSUBPART$ T, SYS.TABCOMPART$ TCP WHERE BITAND(T.FLAGS,2) = 2 AND T.POBJ# = TCP.OBJ# ) TAB, OBJ$ O, SYS.COL$ C WHERE TAB.BO# = O.OBJ# AND TAB.ANALYZETIME < O.MTIME AND C.OBJ# = TAB.BO# AND C.TYPE# IN ( 1, 2, 12, 23, 69, 96, 100, 101, 178, 179, 180, 181, 182, 183, 231) AND BITAND(C.PROPERTY, 16384+32768) = 0 AND NOT (BITAND(C.PROPERTY, 32+65536+131072) = 32+65536 AND C.DEFAULT$ IS NULL ) AND NOT EXISTS (SELECT /*+ unnest */ NULL FROM HIST_HEAD$ HH WHERE HH.OBJ# = TAB.OBJ# AND HH.INTCOL# = C.INTCOL#) ) MCS ON (MM.OBJ# = MCS.OBJ#) WHEN MATCHEDMERGE INTO SYS.MON_MODS_ALL$ MM USING ( SELECT /*+ ordered */ DISTINCT TAB.OBJ# FROM (SELECT T.OBJ# OBJ#, T.OBJ# BO#, T.ANALYZETIME FROM SYS.TAB$ T WHERE BITAND(T.FLAGS,16) = 16 UNION ALL SELECT T.OBJ# OBJ#, T.BO# BO#, T.ANALYZETIME FROM SYS.TABPART$ T WHERE BITAND(T.FLAGS,2) = 2 UNION ALL SELECT T.OBJ# OBJ#, T.BO# BO#, T.ANALYZETIME FROM SYS.TABCOMPART$ T WHERE BITAND(T.FLAGS,2) = 2 UNION ALL SELECT T.OBJ# OBJ#, TCP.BO# BO#, T.ANALYZETIME FROM SYS.TABSUBPART$ T, SYS.TABCOMPART$ TCP WHERE BITAND(T.FLAGS,2) = 2 AND T.POBJ# = TCP.OBJ# ) TAB, OBJ$ O, SYS.COL$ C WHERE TAB.BO# = O.OBJ# AND TAB.ANALYZETIME < O.MTIME AND C.OBJ# = TAB.BO# AND C.TYPE# IN ( 1, 2, 12, 23, 69, 96, 100, 101, 178, 179, 180, 181, 182, 183, 231) AND BITAND(C.PROPERTY, 16384+32768) = 0 AND NOT (BITAND(C.PROPERTY, 32+65536+131072) = 32+65536 AND C.DEFAULT$ IS NULL ) AND NOT EXISTS (SELECT /*+ unnest */ NULL FROM HIST_HEAD$ HH WHERE HH.OBJ# = TAB.OBJ# AND HH.INTCOL# = C.INTCOL#) ) MCS ON (MM.OBJ# = MCS.OBJ#) WHEN MATCHEDselect program_oid, schedule_expr, schedule_id, queue_owner, queue_name,         queue_agent, event_rule, mxdur_msgid, last_enabled_time, class_oid,         next_run_date, last_start_date, last_end_date, retry_count,         run_count, failure_count, running_instance, running_slave, flags,         job_status, creator, client_id, guid, char_env, start_date, end_date,         instance_id, fw_name, fw_oid, destination, credential_name,         credential_owner, credential_oid, dest_oid, job_dest_id, run_invoker,         program_action, schedule_limit,         priority, job_weight, number_of_args, max_runs, max_failures,         max_run_duration, comments, user_callback, user_callback_ctx,         nls_env, source, env, database_role, owner_udn, dist_flags  from sys.scheduler$_job  where obj# = :1select timestamp, flags from fixed_obj$ where obj#=:1WITH UNQIDX AS (SELECT /*+ index(cc) */ CD.CON#,CC.INTCOL# FROM SYS.CCOL$ CC, SYS.CDEF$ CD WHERE CC.OBJ# = :B2 AND CD.CON# = CC.CON# AND CD.OBJ# = CC.OBJ# AND CD.ENABLED IS NOT NULL AND CD.INTCOLS <= :B1 AND CD.TYPE# IN (2,3) UNION ALL SELECT /*+ index(i) index(ic) */ I.OBJ#,IC.INTCOL# FROM SYS.IND$ I, SYS.ICOL$ IC WHERE I.BO# = :B2 AND I.OBJ# = IC.OBJ# AND I.INTCOLS <= :B1 AND BITAND(PROPERTY,1) = 1 AND BITAND(FLAGS,1025) = 0) SELECT CON# FROM UNQIDX WHERE CON# NOT IN (SELECT /*+ no_unnest */ CON# FROM UNQIDX WHERE INTCOL# NOT IN (SELECT /*+ no_unnest index(ic) */ INTCOL# FROM ICOL$ IC WHERE OBJ#=:B3 )) AND ROWNUM <= 1/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("DBID")),to_char(substrb(dump(min("DBID"),16,0,32),1,120)),to_char(substrb(dump(max("DBID"),16,0,32),1,120)),to_char(count("VERSION")),to_char(substrb(dump(min("VERSION"),16,0,32),1,120)),to_char(substrb(dump(max("VERSION"),16,0,32),1,120)),to_char(count("LAST_SAMPLE_DATE")),to_char(substrb(dump(min("LAST_SAMPLE_DATE"),16,0,32),1,120)),to_char(substrb(dump(max("LAST_SAMPLE_DATE"),16,0,32),1,120)),to_char(count("LAST_SAMPLE_DATE_NUM")),to_char(substrb(dump(min("LAST_SAMPLE_DATE_NUM"),16,0,32),1,120)),to_char(substrb(dump(max("LAST_SAMPLE_DATE_NUM"),16,0,32),1,120)),to_char(count("LAST_SAMPLE_PERIOD")),to_char(substrb(dump(min("LAST_SAMPLE_PERIOD"),16,0,32),1,120)),to_char(substrb(dump(max("LAST_SAMPLE_PERIOD"),16,0,32),1,120)),to_char(count("TOTAL_SAMPLES")),to_char(substrb(dump(min("TOTAL_SAMSELECT COUNT(*) FROM SYSTEM.AQ$_QUEUES B WHERE B.TABLE_OBJNO = :B2 AND BITAND(B.PROPERTIES, :B1 ) = :B1 select blocks,NVL(ts#,-1),status$,NVL(relfile#,0),maxextend,inc, crscnwrp,crscnbas,NVL(spare1,0) from file$ where file#=:1select /*+  no_parallel_index(t, "SCHEDULER$_WINDOW_PK")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"SCHEDULER$_WINDOW_PK") */ count(*) as nrw,count(distinct sys_op_lbid(5944,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."SCHEDULER$_WINDOW" t where "OBJ#" is not nullselect oper, nclsrs, clpcstr from appqossys.wlm_classifier_plan where active='Y' order by seqnoSELECT NUMTODSINTERVAL(:B1 * 7, 'DAY') FROM DUALinsert into sys.mon_mods$ (obj#, inserts, updates, deletes, timestamp, flags, drop_segments) values (:1, :2, :3, :4, :5, :6, :7)insert into sys.mon_mods$ (obj#, inserts, updates, deletes, timestamp, flags, drop_segments) values (:1, :2, :3, :4, :5, :6, :7)insert into sys.mon_mods$ (obj#, inserts, updates, deletes, timestamp, flags, drop_segments) values (:1, :2, :3, :4, :5, :6, :7)insert into sys.mon_mods$ (obj#, inserts, updates, deletes, timestamp, flags, drop_segments) values (:1, :2, :3, :4, :5, :6, :7)select next_run_date, obj#, run_job, sch_job from (select decode(bitand(a.flags, 16384), 0, a.next_run_date,                a.last_enabled_time) next_run_date,       a.obj# obj#, decode(bitand(a.flags, 16384), 0, 0, 1) run_job, a.sch_job  sch_job  from  (select p.obj# obj#, p.flags flags, p.next_run_date next_run_date,      p.job_status job_status, p.class_oid class_oid,      p.last_enabled_time last_enabled_time, p.instance_id instance_id,      1 sch_job   from sys.scheduler$_job p   where bitand(p.job_status, 3) = 1    and ((bitand(p.flags, 134217728 + 268435456) = 0) or         (bitand(p.job_status, 1024) <> 0))    and bitand(p.flags, 4096) = 0    and p.instance_id is NULL    and (p.class_oid is null      or (p.class_oid is not null      and p.class_oid in (select b.obj# from sys.scheduler$_class b                          where b.affinity is null)))   UNION ALL   select q.obj#, q.flags, q.next_run_date, q.job_status, q.class_oid,      q.last_enabled_time, q.instance_id, 1   from syselect next_run_date, obj#, run_job, sch_job from (select decode(bitand(a.flags, 16384), 0, a.next_run_date,                a.last_enabled_time) next_run_date,       a.obj# obj#, decode(bitand(a.flags, 16384), 0, 0, 1) run_job, a.sch_job  sch_job  from  (select p.obj# obj#, p.flags flags, p.next_run_date next_run_date,      p.job_status job_status, p.class_oid class_oid,      p.last_enabled_time last_enabled_time, p.instance_id instance_id,      1 sch_job   from sys.scheduler$_job p   where bitand(p.job_status, 3) = 1    and ((bitand(p.flags, 134217728 + 268435456) = 0) or         (bitand(p.job_status, 1024) <> 0))    and bitand(p.flags, 4096) = 0    and p.instance_id is NULL    and (p.class_oid is null      or (p.class_oid is not null      and p.class_oid in (select b.obj# from sys.scheduler$_class b                          where b.affinity is null)))   UNION ALL   select q.obj#, q.flags, q.next_run_date, q.job_status, q.class_oid,      q.last_enabled_time, q.instance_id, 1   from syselect next_run_date, obj#, run_job, sch_job from (select decode(bitand(a.flags, 16384), 0, a.next_run_date,                a.last_enabled_time) next_run_date,       a.obj# obj#, decode(bitand(a.flags, 16384), 0, 0, 1) run_job, a.sch_job  sch_job  from  (select p.obj# obj#, p.flags flags, p.next_run_date next_run_date,      p.job_status job_status, p.class_oid class_oid,      p.last_enabled_time last_enabled_time, p.instance_id instance_id,      1 sch_job   from sys.scheduler$_job p   where bitand(p.job_status, 3) = 1    and ((bitand(p.flags, 134217728 + 268435456) = 0) or         (bitand(p.job_status, 1024) <> 0))    and bitand(p.flags, 4096) = 0    and p.instance_id is NULL    and (p.class_oid is null      or (p.class_oid is not null      and p.class_oid in (select b.obj# from sys.scheduler$_class b                          where b.affinity is null)))   UNION ALL   select q.obj#, q.flags, q.next_run_date, q.job_status, q.class_oid,      q.last_enabled_time, q.instance_id, 1   from syselect next_run_date, obj#, run_job, sch_job from (select decode(bitand(a.flags, 16384), 0, a.next_run_date,                a.last_enabled_time) next_run_date,       a.obj# obj#, decode(bitand(a.flags, 16384), 0, 0, 1) run_job, a.sch_job  sch_job  from  (select p.obj# obj#, p.flags flags, p.next_run_date next_run_date,      p.job_status job_status, p.class_oid class_oid,      p.last_enabled_time last_enabled_time, p.instance_id instance_id,      1 sch_job   from sys.scheduler$_job p   where bitand(p.job_status, 3) = 1    and ((bitand(p.flags, 134217728 + 268435456) = 0) or         (bitand(p.job_status, 1024) <> 0))    and bitand(p.flags, 4096) = 0    and p.instance_id is NULL    and (p.class_oid is null      or (p.class_oid is not null      and p.class_oid in (select b.obj# from sys.scheduler$_class b                          where b.affinity is null)))   UNION ALL   select q.obj#, q.flags, q.next_run_date, q.job_status, q.class_oid,      q.last_enabled_time, q.instance_id, 1   from syselect aft.owner_instance, t.objno, t.flags  from system.aq$_queue_tables t,  aq$_queue_table_affinities aft  where t.objno = aft.table_objno and t.schema = :1 and t.name = :2 /* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("OBJ#")),to_char(substrb(dump(min("OBJ#"),16,0,32),1,120)),to_char(substrb(dump(max("OBJ#"),16,0,32),1,120)),to_char(count("PROGRAM_OID")),to_char(substrb(dump(min("PROGRAM_OID"),16,0,32),1,120)),to_char(substrb(dump(max("PROGRAM_OID"),16,0,32),1,120)),to_char(count("PROGRAM_ACTION")),to_char(substrb(dump(min("PROGRAM_ACTION"),16,0,32),1,120)),to_char(substrb(dump(max("PROGRAM_ACTION"),16,0,32),1,120)),to_char(count("SCHEDULE_EXPR")),to_char(substrb(dump(min("SCHEDULE_EXPR"),16,0,32),1,120)),to_char(substrb(dump(max("SCHEDULE_EXPR"),16,0,32),1,120)),to_char(count("QUEUE_OWNER")),to_char(substrb(dump(min("QUEUE_OWNER"),16,0,32),1,120)),to_char(substrb(dump(max("QUEUE_OWNER"),16,0,32),1,120)),to_char(count("QUEUE_NAME")),to_char(substrb(dump(min("QUEUE_NAME"),16,0,32),1,120)),to_char(substrb(du/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("OBJ#")),to_char(substrb(dump(min("OBJ#"),16,0,32),1,120)),to_char(substrb(dump(max("OBJ#"),16,0,32),1,120)),to_char(count("PROGRAM_OID")),to_char(substrb(dump(min("PROGRAM_OID"),16,0,32),1,120)),to_char(substrb(dump(max("PROGRAM_OID"),16,0,32),1,120)),to_char(count("PROGRAM_ACTION")),to_char(substrb(dump(min("PROGRAM_ACTION"),16,0,32),1,120)),to_char(substrb(dump(max("PROGRAM_ACTION"),16,0,32),1,120)),to_char(count("SCHEDULE_EXPR")),to_char(substrb(dump(min("SCHEDULE_EXPR"),16,0,32),1,120)),to_char(substrb(dump(max("SCHEDULE_EXPR"),16,0,32),1,120)),to_char(count("QUEUE_OWNER")),to_char(substrb(dump(min("QUEUE_OWNER"),16,0,32),1,120)),to_char(substrb(dump(max("QUEUE_OWNER"),16,0,32),1,120)),to_char(count("QUEUE_NAME")),to_char(substrb(dump(min("QUEUE_NAME"),16,0,32),1,120)),to_char(substrb(duselect min(minbkt),maxbkt,substrb(dump(min(val),16,0,32),1,120) minval,substrb(dump(max(val),16,0,32),1,120) maxval,sum(rep) sumrep, sum(repsq) sumrepsq, max(rep) maxrep, count(*) bktndv, sum(case when rep=1 then 1 else 0 end) unqrep from (select val,min(bkt) minbkt, max(bkt) maxbkt, count(val) rep, count(val)*count(val) repsq from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"SYS_NC00023$" val, ntile(254) over (order by "SYS_NC00023$") bkt  from "SYS"."WRI$_OPTSTAT_IND_HISTORY" t  where "SYS_NC00023$" is not null) group by val) group by maxbkt order by maxbktdelete from ind$ where bo#=:1SELECT S.SCHEMA, S.QUEUE_NAME, S.NAME, S.ADDRESS, S.PROTOCOL, S.SUBSCRIBER_ID FROM SYS.AQ$_SUBSCRIBER_TABLE S WHERE BITAND(S.SUBSCRIBER_TYPE, :B3 ) = :B3 AND S.INSTANCE_ID = :B2 AND S.SCN_AT_ADD < :B1 select name,mandatory,mgmt_method,category,description,internal_use from resource_consumer_group$ where obj#=:1 and status = 'ACTIVE'select num_rows FROM dba_tables where table_name = 'JOBS'insert into sys.wri$_optstat_ind_history(obj#,rowcnt,leafcnt,distkey, lblkkey, dblkkey,clufac,blevel,analyzetime,samplesize,guessq,cachedblk, cachehit,logicalread,savtime,flags) values  (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15,:16)insert into sys.wri$_optstat_ind_history(obj#,rowcnt,leafcnt,distkey, lblkkey, dblkkey,clufac,blevel,analyzetime,samplesize,guessq,cachedblk, cachehit,logicalread,savtime,flags) values  (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15,:16)insert into sys.wri$_optstat_ind_history(obj#,rowcnt,leafcnt,distkey, lblkkey, dblkkey,clufac,blevel,analyzetime,samplesize,guessq,cachedblk, cachehit,logicalread,savtime,flags) values  (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15,:16)select nvl(sum(d.blocks),0) from x$kewx_segments d, (select distinct o1.segment_name name from x$kewx_segments o1 where o1.segment_name like  '%WRI$|_ADV|_%' ESCAPE '|' union all select distinct o2.lob_name name from x$kewx_lobs o2 where o2.table_name like  '%WRI$|_ADV|_%' ESCAPE '|' ) s where (d.owner = 'SYS') and (d.segment_name = s.name)select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */max("VERSION") val,count(*) cnt  from "SYS"."WRI$_DBU_CPU_USAGE_SAMPLE" t  where "VERSION" is not null  group by nlssort("VERSION", 'NLS_SORT = binary')) order by nlssort(val,'NLS_SORT = binary')SELECT /* OPT_DYN_SAMP */ /*+ ALL_ROWS IGNORE_WHERE_CLAUSE NO_PARALLEL(SAMPLESUB) opt_param('parallel_execution_enabled', 'false') NO_PARALLEL_INDEX(SAMPLESUB) NO_SQL_TUNE */ NVL(SUM(C1),0), NVL(SUM(C2),0) FROM (SELECT /*+ IGNORE_WHERE_CLAUSE NO_PARALLEL("O") FULL("O") NO_PARALLEL_INDEX("O") */ 1 AS C1, CASE WHEN "O"."TYPE#"=19 AND (BITAND("O"."FLAGS",16)<>16 OR "O"."NAME" NOT LIKE 'DR$%' AND "O"."NAME" NOT LIKE 'DR#%') THEN 1 ELSE 0 END AS C2 FROM "SYS"."OBJ$" SAMPLE BLOCK (13.080169 , 1) SEED (1) "O") SAMPLESUBselect c.owner#,c.name,c.con# from con$ c,cdef$ d where d.obj#=:1 and d.con#=c.con#select inst_id, session_id, session_serial_num, job_id,          paddr, os_process_id, CAST (numtodsinterval(session_stat_cpu/100,                  'second') AS INTERVAL DAY(3) TO SECOND(2)) session_stat_cpu          from x$jskslvselect inst_id,kglnaobj,kglfnobj,kglobt03, kglobhs0+kglobhs1+kglobhs2+kglobhs3+kglobhs4+kglobhs5+kglobhs6+kglobt16, kglobt08+kglobt11, kglobt10, kglobt01, decode(kglobhs6,0,0,1), decode(kglhdlmd,0,0,1), kglhdlkc, kglobt04, kglobt05, kglobt48, kglobt35, kglobpc6, kglhdldc, substr(to_char(kglnatim,'YYYY-MM-DD/HH24:MI:SS'),1,19), kglhdivc, kglobt12, kglobt13, kglobwdw, kglobt14, kglobwap, kglobwcc, kglobwcl, kglobwui, kglobt42, kglobt43, kglobt15, kglobt02, decode(kglobt32,        0, 'NONE',        1, 'ALL_ROWS',        2, 'FIRST_ROWS',        3, 'RULE',        4, 'CHOOSE',           'UNKNOWN'), kglobtn0, kglobcce, kglobcceh, kglobt17, kglobt18, kglobts4, kglhdkmk, kglhdpar, kglobtp0, kglnahsh, kglobt46, kglobt30, kglobt09, kglobts5, kglobt48, kglobts0, kglobt19, kglobts1, kglobt20, kglobt21, kglobts2, kglobt06, kglobt07, decode(kglobt28, 0, to_number(NULL), kglobt28), kglhdadr, kglobt29, decode(bitand(kglobt00,64),64, 'Y', 'N'), decode(kglobsta,        1, 'VALID',        2, 'VALID_AUTH_Eselect 1 from sys.aq$_subscriber_table where rownum < 2 and subscriber_id <> 0 and table_objno <> 0 declare     total_blocks number := 0;   begin     select nvl(sum(d.blocks), 0) into total_blocks        from x$kewx_segments d,            (select distinct o1.segment_name name from x$kewx_segments o1              where o1.segment_name like 'LOGSTDBY$%'             union all             select distinct o2.lob_name name from x$kewx_lobs o2              where o2.table_name like 'LOGSTDBY$%') s       where (d.owner = 'SYSTEM') and             (d.segment_name = s.name);     :1 := total_blocks;   end;delete from source$ where obj#=:1select userenv('Instance'),  icrid, to_number(icrls),         to_date(icrlc,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'),         to_number(icprs),         to_date(icprc,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'),         decode(bitand(icflg,3), 1,'ORPHAN', 2, 'CURRENT', 0, 'PARENT',                'ORPHAN'),         icrlc_i, icpinc, icalw  from x$kccicselect trace_type, primary_id, qualifier_id1, qualifier_id2  from wri$_aggregation_enabledselect count(*) from dba_tables where tablespace_name='USERS'SELECT TS#, OBJ#, DATAOBJ#, SUM(ABS(SPACE_USED_DELTA)) FROM SYS.WRH$_SEG_STAT WHERE SNAP_ID > :B1 AND TS# <> 0 GROUP BY TS# , OBJ#, DATAOBJ# ORDER BY SUM(ABS(SPACE_USED_DELTA)) DESCselect wrm.last_ash_sample_id from   WRM$_DATABASE_INSTANCE wrm,        (select max(startup_time) as latest_startup         from   WRM$_DATABASE_INSTANCE         where  instance_number    = :instance_number           and  dbid               = :dbid           and  last_ash_sample_id != 0 ) starttime where  wrm.instance_number = :instance_number2   and  wrm.dbid            = :dbid2   and  wrm.startup_time    = starttime.latest_startup select num_rows FROM dba_tables where table_name = 'TESTING'select s.inst_id,s.addr,s.indx,s.ksuseser,s.ksuudses,s.ksusepro,s.ksuudlui,s.ksuudlna,s.ksuudoct,s.ksusesow, decode(s.ksusetrn,hextoraw('00'),null,s.ksusetrn),decode(s.ksqpswat,hextoraw('00'),null,s.ksqpswat),decode(bitand(s.ksuseidl,11),1,'ACTIVE',0,decode(bitand(s.ksuseflg,4096),0,'INACTIVE','CACHED'),2,'SNIPED',3,'SNIPED', 'KILLED'),decode(s.ksspatyp,1,'DEDICATED',2,'SHARED',3,'PSEUDO',4,'POOLED','NONE'),  s.ksuudsid,s.ksuudsna,s.ksuseunm,s.ksusepid, s.ksusemnm,s.ksusemnp,s.ksusetid,s.ksusepnm, decode(bitand(s.ksuseflg,19),17,'BACKGROUND',1,'USER',2,'RECURSIVE','?'), s.ksusesql, s.ksusesqh, s.ksusesqi, decode(s.ksusesch, 65535, to_number(null), s.ksusesch),  s.ksusesesta,  decode(s.ksuseseid, 0, to_number(null), s.ksuseseid),  s.ksusepsq, s.ksusepha, s.ksusepsi,  decode(s.ksusepch, 65535, to_number(null), s.ksusepch),  s.ksusepesta,  decode(s.ksusepeid, 0, to_number(null), s.ksusepeid),  decode(s.ksusepeo,0,to_number(null),s.ksusepeo),  decode(s.ksusepeo,0,to_number(null),s.ksusepesselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"FLAGS" val,count(*) cnt  from "SYS"."TABPART$" t  where "FLAGS" is not null  group by "FLAGS") order by valselect num_rows FROM dba_tables where table_name = 'YY'select subscriber_id, name, address, protocol, subscriber_type,      rule_name, trans_name, ruleset_name, negative_ruleset_name,          creation_time, deletion_time,  modification_time, scn_at_remove      , scn_at_add from  AQ$_SUBSCRIBER_TABLE where queue_name=:1                        and schema=:2 and bitand(subscriber_type, 2) = 2select min(minbkt),maxbkt,substrb(dump(min(val),16,0,32),1,120) minval,substrb(dump(max(val),16,0,32),1,120) maxval,sum(rep) sumrep, sum(repsq) sumrepsq, max(rep) maxrep, count(*) bktndv, sum(case when rep=1 then 1 else 0 end) unqrep from (select val,min(bkt) minbkt, max(bkt) maxbkt, count(val) rep, count(val)*count(val) repsq from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"LOG_ID" val, ntile(254) over (order by "LOG_ID") bkt  from "SYS"."SCHEDULER$_JOB_RUN_DETAILS" t  where "LOG_ID" is not null) group by val) group by maxbkt order by maxbktselect df.tablespace_name "Tablespace",        totalusedspace "Used MB",        (df.totalspace - tu.totalusedspace) "Free MB",        df.totalspace "Total MB",        round(100 * ( (df.totalspace - tu.totalusedspace)/ df.totalspace)) "Pct. Free"   from (select tablespace_name,                round(sum(bytes) / 1048576) TotalSpace           from dba_data_files           group by tablespace_name) df,        (select round(sum(bytes)/(1024*1024)) totalusedspace,                tablespace_name           from dba_segments           group by tablespace_name) tu  where df.tablespace_name = tu.tablespace_name     and df.totalspace <> 0select tablespace_name from dba_segments group by tablespace_nameselect tablespace_name from dba_segments group by tablespace_nameselect member_oid,coalesce(member_oid2,0) from sys.scheduler$_wingrp_member           where oid = :1 begin      dbms_aqadm_sys.remove_all_nondurablesub(:1, :2);   end;select size_for_estimate,                      size_factor * 100 f,                    estd_physical_read_time,                estd_physical_reads              from v$db_cache_advice where id = '3'                                        delete /*+ dynamic_sampling(m 4) dynamic_sampling_est_cdn(m) */                 from sys.mon_mods$ m                                                          where exists                                                                  (select /*+ unnest */ * from sys.tabpart$ t where t.obj# = m.obj#)                                        delete /*+ dynamic_sampling(m 4) dynamic_sampling_est_cdn(m) */                 from sys.mon_mods$ m                                                          where exists                                                                  (select /*+ unnest */ * from sys.tabpart$ t where t.obj# = m.obj#)                                        delete /*+ dynamic_sampling(m 4) dynamic_sampling_est_cdn(m) */                 from sys.mon_mods$ m                                                          where exists                                                                  (select /*+ unnest */ * from sys.tabpart$ t where t.obj# = m.obj#)SELECT d.inst_id, d.groupid, g.name, d.metricid,            d.name, d.unit          FROM   x$kewmdsm d, x$kewmgsm g          where d.groupid = g.groupidselect min(next_date) from "SYS"."AQ$_SCHEDULER$_REMDB_JOBQTAB_T"delete from WRH$_IC_DEVICE_STATS tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id))        select unique( nvl2(job_subname,       '"'||owner||'"."'||job_name||'"."'||job_subname ||'"',       '"'||owner||'"."'||job_name||'"')) jn from scheduler$_notification       where bitand(flags,1)=1 and owner||'"'||job_name not in         ( select owner||'"'||job_name from dba_scheduler_jobs union all           select qt.user_data.object_owner||'"'||qt.user_data.object_name             from sys.scheduler$_event_qtab qt where state<2 )select name,online$,contents$,undofile#,undoblock#,blocksize,dflmaxext,dflinit,dflincr,dflextpct,dflminext, dflminlen, owner#,scnwrp,scnbas, NVL(pitrscnwrp, 0), NVL(pitrscnbas, 0), dflogging, bitmapped, inc#, flags, plugged, NVL(spare1,0), NVL(spare2,0), affstrength from ts$ where ts#=:1delete from WRM$_SNAP_ERROR tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select obj#, dataobj#, part#, hiboundlen, hiboundval, ts#, file#, block#, pctfree$, pctused$, initrans, maxtrans, flags, analyzetime, samplesize, rowcnt, blkcnt, empcnt, avgspc, chncnt, avgrln, length(bhiboundval), bhiboundval from tabpart$ where bo# = :1 order by part#select obj#, dataobj#, part#, hiboundlen, hiboundval, ts#, file#, block#, pctfree$, pctused$, initrans, maxtrans, flags, analyzetime, samplesize, rowcnt, blkcnt, empcnt, avgspc, chncnt, avgrln, length(bhiboundval), bhiboundval from tabpart$ where bo# = :1 order by part#select location_name from loc$select num_rows FROM dba_tables where table_name = 'INTEL'SELECT /*+ all_rows */ C.NAME ICNAME,IC.POS# ICPOS,IC.SPARE1 ICFLAGS, C.PROPERTY ICPROP,C.DEFAULT$ ICEXPR, C.DEFLENGTH ICELEN FROM ICOL$ IC,COL$ C WHERE (:B2 IS NULL) AND IC.OBJ#=:B1 AND IC.BO#=C.OBJ# AND IC.INTCOL# = C.INTCOL# UNION ALL SELECT '"'||BO.NAME||'"."'||C.NAME||'"' ICNAME, IC.POS# ICPOS,IC.SPARE1 ICFLAGS, C.PROPERTY ICPROP,C.DEFAULT$ ICEXPR, C.DEFLENGTH ICELEN FROM ICOL$ IC,COL$ C, OBJ$ BO WHERE (:B2 IS NOT NULL) AND IC.OBJ#=:B1 AND IC.BO#=C.OBJ# AND IC.BO#=BO.OBJ# AND IC.SPARE2 = C.INTCOL# ORDER BY ICPOS                                         delete /*+ dynamic_sampling(m 4) dynamic_sampling_est_cdn(m) */                 from sys.mon_mods$ m                                                          where exists                                                                  (select /*+ unnest */ * from sys.tab$ t where t.obj# = m.obj#)                                         delete /*+ dynamic_sampling(m 4) dynamic_sampling_est_cdn(m) */                 from sys.mon_mods$ m                                                          where exists                                                                  (select /*+ unnest */ * from sys.tab$ t where t.obj# = m.obj#)                                         delete /*+ dynamic_sampling(m 4) dynamic_sampling_est_cdn(m) */                 from sys.mon_mods$ m                                                          where exists                                                                  (select /*+ unnest */ * from sys.tab$ t where t.obj# = m.obj#)  UPDATE /*+ INDEX(wrh$_seg_stat_obj wrh$_seg_stat_obj_index) */          wrh$_seg_stat_obj ob      SET (snap_id, owner, object_name, subobject_name, tablespace_name,           object_type, index_type, base_obj#, base_object_name,           base_object_owner) =       (SELECT :lah_snap_id, so.oj.owner_name, so.oj.object_name,               so.oj.subobject_name, so.oj.tablespace_name, so.oj.object_type,               index_type, coalesce(io.base_obj#, so.base_obj#),               coalesce(io.base_object_name, so.base_object_name),              coalesce(io.base_object_owner, so.base_object_owner)          FROM            (SELECT dbid, ts#, obj#, dataobj#, object_type, base_obj#,                    base_object_name, base_object_owner,                    dbms_swrf_internal.awr_get_object_info(                      ts#, obj#, dataobj#,                      AWR_OBJECT_INFO_TYPE(owner, object_name, subobject_name,                                           tablespace_name, object_type)) oj       UPDATE /*+ INDEX(wrh$_seg_stat_obj wrh$_seg_stat_obj_index) */          wrh$_seg_stat_obj ob      SET (snap_id, owner, object_name, subobject_name, tablespace_name,           object_type, index_type, base_obj#, base_object_name,           base_object_owner) =       (SELECT :lah_snap_id, so.oj.owner_name, so.oj.object_name,               so.oj.subobject_name, so.oj.tablespace_name, so.oj.object_type,               index_type, coalesce(io.base_obj#, so.base_obj#),               coalesce(io.base_object_name, so.base_object_name),              coalesce(io.base_object_owner, so.base_object_owner)          FROM            (SELECT dbid, ts#, obj#, dataobj#, object_type, base_obj#,                    base_object_name, base_object_owner,                    dbms_swrf_internal.awr_get_object_info(                      ts#, obj#, dataobj#,                      AWR_OBJECT_INFO_TYPE(owner, object_name, subobject_name,                                           tablespace_name, object_type)) oj     select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"TS#" val,count(*) cnt  from "SYS"."WRH$_SEG_STAT" t  where "TS#" is not null  group by "TS#") order by valselect nvl(spare3,0), property, flags, nvl(spare5,'NN0') from tab$ where obj# = :1select min(timeout) from sys.reg$select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"SCHEDULE_ID" val,count(*) cnt  from "SYS"."WRI$_SCH_VOTES" t  where "SCHEDULE_ID" is not null  group by "SCHEDULE_ID") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"SCHEDULE_ID" val,count(*) cnt  from "SYS"."WRI$_SCH_VOTES" t  where "SCHEDULE_ID" is not null  group by "SCHEDULE_ID") order by valSELECT COUNT(DISTINCT SET_COUNT) FROM V$BACKUP_PIECE WHERE STATUS != 'D'select /*+  no_parallel_index(t, "I_UNDO2")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_UNDO2") */ count(*) as nrw,count(distinct sys_op_lbid(35,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."UNDO$" t where "NAME" is not nullselect p.value$, lengthb(p.value$) from sys.props$ p   where p.name = 'BACK_END_DB'insert into sys.wri$_optstat_histhead_history (obj#,intcol#,savtime,flags, null_cnt,minimum,maximum,distcnt,density,lowval,hival,avgcln,sample_distcnt, sample_size,timestamp#,colname)  select h.obj#, h.intcol#, :3, bitand(h.spare2,7) + 8 + decode(h.cache_cnt,0,0,64), h.null_cnt, h.minimum, h.maximum, h.distcnt, h.density, h.lowval, h.hival, h.avgcln, h.spare1, h.sample_size, h.timestamp#, :4  from sys.hist_head$ h where h.obj# = :1 and h.intcol# = :2SELECT 1 from "SYS"."AQ$SCHEDULER_FILEWATCHER_QT" qtview  WHERE (queue = 'SYS.AQ$_SCHEDULER_FILEWATCHER_QT_E' ) AND rownum < 2call dbms_autotask_prvt.age (  )select count(unique name) from resource_consumer_group$ where status='ACTIVE'INSERT INTO WWV_FLOW_LOG_HISTORY ( LOG_DAY, WORKSPACE_ID, APPLICATION_ID, PAGE_EVENTS, PAGE_VIEWS, PAGE_ACCEPTS, PARTIAL_PAGE_VIEWS, WEBSHEET_VIEWS, ROWS_FETCHED, IR_SEARCHES, DISTINCT_PAGES, DISTINCT_USERS, DISTINCT_SESSIONS, AVERAGE_RENDER_TIME, MEDIAN_RENDER_TIME, MAXIMUM_RENDER_TIME, TOTAL_RENDER_TIME, CONTENT_LENGTH, ERROR_COUNT ) ( SELECT TRUNC(TIME_STAMP) LOG_DAY, SECURITY_GROUP_ID WORKSPACE_ID, FLOW_ID APPLICATION_ID, COUNT(*) PAGE_EVENTS, SUM(DECODE(NVL(PAGE_MODE,'D'),'D',1,0)) PAGE_VIEWS, SUM(DECODE(NVL(PAGE_MODE,'D'),'A',1,0)) PAGE_ACCEPTS, SUM(DECODE(NVL(PAGE_MODE,'D'),'P',1,0)) PARTIAL_PAGE_VIEWS, SUM(DECODE(WEBSHEET_ID,NULL,0,1)) WEBSHEET_VIEWS, SUM(NUM_ROWS) ROWS_FETCHED, SUM(DECODE(IR_SEARCH,NULL,0,1)) IR_SEARCHES, COUNT(DISTINCT STEP_ID) DISTINCT_PAGES, COUNT(DISTINCT USERID) DISTINCT_USERS, COUNT(DISTINCT SESSION_ID) DISTINCT_SESSIONS, AVG(ELAP) AVERAGE_RENDER_TIME, MEDIAN(ELAP) MEDIAN_RENDER_TIME, MAX(ELAP) MAXIMUM_RENDER_TIME, SUM(ELAP) TOTAL_RENDER_TIME, SUM(NVL(COinsert into sys.scheduler$_window_details  (log_id, log_date, instance_id, req_start_date,   start_date, duration, actual_duration, additional_info)   values  (:1, SYSTIMESTAMP, :2, :3, :4, :5, :6, :7)delete from WRH$_MEMORY_RESIZE_OPS tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select count(*) from XDB.XDB$SCHEMA s where s.xmldata.schema_url = 'http://xmlns.oracle.com/xdb/XDBSchema.xsd'select SUM(column_length) from all_ind_columns where table_name = 'JOB_HISTORY'SELECT COUNT(DISTINCT(OBJ#)) FROM SYS.WRH$_SEG_STAT WHERE SNAP_ID > :B1 AND SPACE_ALLOCATED_DELTA != 0select ROWID from SYS_FBA_DL where ROWNUM = 1select sql_text from v$sqlselect  decode(u.type#, 2, u.ext_username, u.name), o.name, trigger$.sys_evts, trigger$.type#  from obj$ o, user$ u, trigger$  where o.type# = 12 and bitand(trigger$.property,16) = 16   and trigger$.baseobject = :1 and trigger$.obj# = o.obj#   and o.owner# = u.user# order by o.obj#select SUM(column_length) from all_ind_columns where table_name = 'T2'/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("OBJ#")),to_char(substrb(dump(min("OBJ#"),16,0,32),1,120)),to_char(substrb(dump(max("OBJ#"),16,0,32),1,120)),to_char(count("RES_PLAN")),to_char(substrb(dump(min("RES_PLAN"),16,0,32),1,120)),to_char(substrb(dump(max("RES_PLAN"),16,0,32),1,120)),to_char(count("NEXT_START_DATE")),to_char(substrb(dump(min("NEXT_START_DATE"),16,0,32),1,120)),to_char(substrb(dump(max("NEXT_START_DATE"),16,0,32),1,120)),to_char(count("MANUAL_OPEN_TIME")),to_char(substrb(dump(min("MANUAL_OPEN_TIME"),16,0,32),1,120)),to_char(substrb(dump(max("MANUAL_OPEN_TIME"),16,0,32),1,120)),to_char(count("DURATION")),to_char(substrb(dump(min("DURATION"),16,0,32),1,120)),to_char(substrb(dump(max("DURATION"),16,0,32),1,120)),to_char(count("MANUAL_DURATION")),to_char(substrb(dump(min("MANUAL_DURATION"),16,0,32),1,120)),to_char(substrinsert into smon_scn_time (thread, time_mp, time_dp, scn, scn_wrp, scn_bas, num_mappings, tim_scn_map) values (0, :1, :2, :3, :4, :5, :6, :7)insert into smon_scn_time (thread, time_mp, time_dp, scn, scn_wrp, scn_bas, num_mappings, tim_scn_map) values (0, :1, :2, :3, :4, :5, :6, :7)select default$ from col$ where rowid=:1select num_rows FROM dba_tables where table_name = 'LENTES'SELECT OBJOID, CLSOID,         (2*PRI +          DECODE(BITAND(STATUS,  4), 0, 0,                 DECODE(INST, :1, -1, 1))),         WT, INST,         DECODE(BITAND(STATUS, 8388608), 0, 0, 1), SCHLIM, ISLW,         INST_ID  FROM (  select a.obj# OBJOID, a.class_oid CLSOID, a.job_status STATUS,         a.flags FLAGS, a.priority PRI, a.job_weight WT,         decode(a.running_instance, NULL, 0, a.running_instance) INST,         a.schedule_id SCHOID, a.last_start_date LSDATE,         a.last_enabled_time LETIME,         decode(a.schedule_limit, NULL,           decode(bitand(a.flags, 4194304), 4194304, b.schedule_limit, NULL),               a.schedule_limit) SCHLIM, 0 ISLW,         a.instance_id INST_ID  from sys.scheduler$_job a, sys.scheduler$_program b, v$database v  where a.program_oid = b.obj#(+)    and (a.database_role = v.database_role      or (a.database_role is null and v.database_role = 'PRIMARY'))  union all  select c.obj#, c.class_oid, c.job_status, c.flags, d.priority,         dSELECT OBJOID, CLSOID,         (2*PRI +          DECODE(BITAND(STATUS,  4), 0, 0,                 DECODE(INST, :1, -1, 1))),         WT, INST,         DECODE(BITAND(STATUS, 8388608), 0, 0, 1), SCHLIM, ISLW,         INST_ID  FROM (  select a.obj# OBJOID, a.class_oid CLSOID, a.job_status STATUS,         a.flags FLAGS, a.priority PRI, a.job_weight WT,         decode(a.running_instance, NULL, 0, a.running_instance) INST,         a.schedule_id SCHOID, a.last_start_date LSDATE,         a.last_enabled_time LETIME,         decode(a.schedule_limit, NULL,           decode(bitand(a.flags, 4194304), 4194304, b.schedule_limit, NULL),               a.schedule_limit) SCHLIM, 0 ISLW,         a.instance_id INST_ID  from sys.scheduler$_job a, sys.scheduler$_program b, v$database v  where a.program_oid = b.obj#(+)    and (a.database_role = v.database_role      or (a.database_role is null and v.database_role = 'PRIMARY'))  union all  select c.obj#, c.class_oid, c.job_status, c.flags, d.priority,         dSELECT OBJOID, CLSOID,         (2*PRI +          DECODE(BITAND(STATUS,  4), 0, 0,                 DECODE(INST, :1, -1, 1))),         WT, INST,         DECODE(BITAND(STATUS, 8388608), 0, 0, 1), SCHLIM, ISLW,         INST_ID  FROM (  select a.obj# OBJOID, a.class_oid CLSOID, a.job_status STATUS,         a.flags FLAGS, a.priority PRI, a.job_weight WT,         decode(a.running_instance, NULL, 0, a.running_instance) INST,         a.schedule_id SCHOID, a.last_start_date LSDATE,         a.last_enabled_time LETIME,         decode(a.schedule_limit, NULL,           decode(bitand(a.flags, 4194304), 4194304, b.schedule_limit, NULL),               a.schedule_limit) SCHLIM, 0 ISLW,         a.instance_id INST_ID  from sys.scheduler$_job a, sys.scheduler$_program b, v$database v  where a.program_oid = b.obj#(+)    and (a.database_role = v.database_role      or (a.database_role is null and v.database_role = 'PRIMARY'))  union all  select c.obj#, c.class_oid, c.job_status, c.flags, d.priority,         dSELECT OBJOID, CLSOID,         (2*PRI +          DECODE(BITAND(STATUS,  4), 0, 0,                 DECODE(INST, :1, -1, 1))),         WT, INST,         DECODE(BITAND(STATUS, 8388608), 0, 0, 1), SCHLIM, ISLW,         INST_ID  FROM (  select a.obj# OBJOID, a.class_oid CLSOID, a.job_status STATUS,         a.flags FLAGS, a.priority PRI, a.job_weight WT,         decode(a.running_instance, NULL, 0, a.running_instance) INST,         a.schedule_id SCHOID, a.last_start_date LSDATE,         a.last_enabled_time LETIME,         decode(a.schedule_limit, NULL,           decode(bitand(a.flags, 4194304), 4194304, b.schedule_limit, NULL),               a.schedule_limit) SCHLIM, 0 ISLW,         a.instance_id INST_ID  from sys.scheduler$_job a, sys.scheduler$_program b, v$database v  where a.program_oid = b.obj#(+)    and (a.database_role = v.database_role      or (a.database_role is null and v.database_role = 'PRIMARY'))  union all  select c.obj#, c.class_oid, c.job_status, c.flags, d.priority,         dselect table_name FROM dba_tables where tablespace_name='USERS'delete from WRI$_ALERT_HISTORY where time_suggested < :1SELECT /*+ rule */ '"'||UI.NAME||'"' IND_OWNER, '"'||OI.NAME||'"' IND_NAME, OI.OBJ# OBJ_NUM, NVL(PO.FLAGS,0) LOCALITY, I.PROPERTY IPROP FROM SYS.USER$ UT, SYS.OBJ$ OT, SYS.IND$ I, SYS.OBJ$ OI, SYS.USER$ UI, SYS.PARTOBJ$ PO WHERE ((:B3 IS NULL) OR (PO.FLAGS IS NULL) OR (PO.FLAGS = 2)) AND UT.NAME = :B2 AND UT.USER# = OT.OWNER# AND OT.NAME = :B1 AND OT.TYPE# = 2 AND OT.OBJ# = I.BO# AND I.OBJ# = OI.OBJ# AND OI.OWNER# = UI.USER# AND I.OBJ# = PO.OBJ#(+) UNION ALL SELECT /*+ rule */ '"'||UI.NAME||'"' IND_OWNER, '"'||OI.NAME||'"' IND_NAME, OI.OBJ# OBJ_NUM, 0 LOCALITY, I.PROPERTY IPROP FROM SYS.USER$ UT, SYS.OBJ$ OT, SYS.IND$ I, SYS.TAB$ T, SYS.OBJ$ OI, SYS.USER$ UI WHERE :B4 IS NOT NULL AND UT.NAME = :B2 AND UT.USER# = OT.OWNER# AND OT.NAME = :B1 AND OT.TYPE# = 2 AND OT.OBJ# = T.OBJ# AND T.BOBJ# = I.BO# AND I.TYPE# = 3 AND I.OBJ# = OI.OBJ# AND OI.OWNER# = UI.USER#SELECT /*+ rule */ '"'||UI.NAME||'"' IND_OWNER, '"'||OI.NAME||'"' IND_NAME, OI.OBJ# OBJ_NUM, NVL(PO.FLAGS,0) LOCALITY, I.PROPERTY IPROP FROM SYS.USER$ UT, SYS.OBJ$ OT, SYS.IND$ I, SYS.OBJ$ OI, SYS.USER$ UI, SYS.PARTOBJ$ PO WHERE ((:B3 IS NULL) OR (PO.FLAGS IS NULL) OR (PO.FLAGS = 2)) AND UT.NAME = :B2 AND UT.USER# = OT.OWNER# AND OT.NAME = :B1 AND OT.TYPE# = 2 AND OT.OBJ# = I.BO# AND I.OBJ# = OI.OBJ# AND OI.OWNER# = UI.USER# AND I.OBJ# = PO.OBJ#(+) UNION ALL SELECT /*+ rule */ '"'||UI.NAME||'"' IND_OWNER, '"'||OI.NAME||'"' IND_NAME, OI.OBJ# OBJ_NUM, 0 LOCALITY, I.PROPERTY IPROP FROM SYS.USER$ UT, SYS.OBJ$ OT, SYS.IND$ I, SYS.TAB$ T, SYS.OBJ$ OI, SYS.USER$ UI WHERE :B4 IS NOT NULL AND UT.NAME = :B2 AND UT.USER# = OT.OWNER# AND OT.NAME = :B1 AND OT.TYPE# = 2 AND OT.OBJ# = T.OBJ# AND T.BOBJ# = I.BO# AND I.TYPE# = 3 AND I.OBJ# = OI.OBJ# AND OI.OWNER# = UI.USER#SELECT ELAPSED_TIME FROM DBA_SCHEDULER_RUNNING_JOBS WHERE JOB_NAME = 'AUTO_SPACE_ADVISOR_JOB'SELECT ELAPSED_TIME FROM DBA_SCHEDULER_RUNNING_JOBS WHERE JOB_NAME = 'AUTO_SPACE_ADVISOR_JOB'select  SESSION_ID,        BUGNO,        VALUE,        SQL_FEATURE,        DESCRIPTION,        OPTIMIZER_FEATURE_ENABLE,        EVENT,        IS_DEFAULT from GV$SESSION_FIX_CONTROL where inst_id=USERENV('Instance')delete /*+ dynamic_sampling(4) */ from sys.wri$_optstat_opr                  where start_time < :1 and rownum <= NVL(:2, rownum)delete from sys.mon_mods_all$ m where not exists   (select /*+ unnest */ 1 from sys.obj$ o where o.obj# = m.obj# )select i.obj#, i.rowcnt, i.leafcnt, i.distkey, i.lblkkey, i.dblkkey,i.clufac, i.blevel, i.analyzetime, i.samplesize, decode(i.pctthres$,null,null,mod(trunc(i.pctthres$/256),256)), i.flags, ist.cachedblk, ist.cachehit, ist.logicalread from ind$ i, ind_stats$ ist where i.obj# = ist.obj#(+) and i.bo#=:1 order by i.obj#select limit# from profile$ where profile#=:1 and resource#=:2 and type#=:3select PGA_TARGET_FOR_ESTIMATE s,          PGA_TARGET_FACTOR * 100 f,           ESTD_TIME t,         BYTES_PROCESSED b   from v$pga_target_advice order by PGA_TARGET_FOR_ESTIMATEselect u.name, o.name, a.interface_version#, o.obj#      from association$ a, user$ u, obj$ o                     where a.obj# = :1                                          and a.property = :2                                      and a.statstype# = o.obj#                                and u.user# = o.owner#insert into WRI$_DBU_CPU_USAGE_SAMPLE (dbid, version, last_sample_date, last_sample_date_num, last_sample_period, total_samples, sample_interval) select dbid, version, NULL, NULL, 0, 0, 43200 from v$database, v$instance where not exists (select 1 from WRI$_DBU_CPU_USAGE_SAMPLE us where us.dbid    = :dbid and us.version = :version)delete from WRH$_SQL_WORKAREA_HISTOGRAM tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select lobtsn, lobrdba, lobobjid from x$lobstat   where lobspcalloc > 0 and lobcurrtime >= :1   order by lobspcalloc descSELECT ID, WORKSHEET_ID, WEBSHEET_ID, REPORT_ID, EMAIL_SUBJECT, EMAIL_ADDRESS, NOTIFY_INTERVAL, START_DATE, END_DATE, OFFSET_DATE, CREATED_BY, SECURITY_GROUP_ID FROM WWV_FLOW_WORKSHEET_NOTIFY WHERE SYSTIMESTAMP BETWEEN NVL(START_DATE,SYSTIMESTAMP) AND NVL(END_DATE,SYSTIMESTAMP) AND EMAIL_ADDRESS IS NOT NULLdelete from WRM$_BASELINE_DETAILS   where dbid = :dbid     and baseline_id in      (select baseline_id from WRM$_BASELINE        where expiration is not NULL          and creation_time + expiration < :bind1)select /*+  no_parallel_index(t, "I_H_OBJ#_COL#")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_H_OBJ#_COL#") */ count(*) as nrw,count(distinct sys_op_lbid(424,'L',t.rowid)) as nlb,count(distinct hextoraw(sys_op_descend("OBJ#")||sys_op_descend("COL#"))) as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."HISTGRM$" t where "OBJ#" is not null or "COL#" is not nullselect ts# from ts$ where bitmapped <> 0 and  contents$ <> 1 and online$=1 and ts# >= :1 order by ts# ascinsert into WRI$_DBU_USAGE_SAMPLE (dbid, version, last_sample_date, last_sample_date_num, last_sample_period, total_samples, sample_interval) select dbid, version, NULL, NULL, 0, 0, 604800 from v$database, v$instance where not exists (select 1 from WRI$_DBU_USAGE_SAMPLE us where us.dbid    = :dbid and us.version = :version)select count(*) from sys.job$ where next_date < :1 and (field1 = :2 or (field1 = 0 and 'Y' = :3)) and ((dbms_logstdby.db_is_logstdby = 0 and job < 1000000000) or  (dbms_logstdby.db_is_logstdby = 1 and job >= 1000000000))SELECT SUM(blocks)  FROM x$kewx_segments  WHERE segment_name IN ('SQL$', 'I_SQL$_PKEY', 'SQLLOG$')        OR segment_name LIKE '%SMB$CONFIG%'        OR segment_name LIKE '%SQL$TEXT%'        OR segment_name LIKE '%SQLOBJ$%'        OR segment_name IN (SELECT DISTINCT lob_name                            FROM x$kewx_lobs                            WHERE table_name IN ('SQL$', 'SQL$TEXT',                                                 'SQLOBJ$', 'SQLOBJ$DATA',                                                 'SQLOBJ$AUXDATA'))delete from WRH$_RULE_SET tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) SELECT MAX(LOG_DAY) FROM WWV_FLOW_LOG_HISTORY WHERE WORKSPACE_ID = :B1 select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"STARTUP_TIME" val,count(*) cnt  from "SYS"."WRM$_SNAPSHOT" t  where "STARTUP_TIME" is not null  group by "STARTUP_TIME") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"STARTUP_TIME" val,count(*) cnt  from "SYS"."WRM$_SNAPSHOT" t  where "STARTUP_TIME" is not null  group by "STARTUP_TIME") order by val/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("OBJ#")),to_char(substrb(dump(min("OBJ#"),16,0,32),1,120)),to_char(substrb(dump(max("OBJ#"),16,0,32),1,120)),to_char(count("INSERTS")),to_char(substrb(dump(min("INSERTS"),16,0,32),1,120)),to_char(substrb(dump(max("INSERTS"),16,0,32),1,120)),to_char(count("UPDATES")),to_char(substrb(dump(min("UPDATES"),16,0,32),1,120)),to_char(substrb(dump(max("UPDATES"),16,0,32),1,120)),to_char(count("DELETES")),to_char(substrb(dump(min("DELETES"),16,0,32),1,120)),to_char(substrb(dump(max("DELETES"),16,0,32),1,120)),to_char(count("TIMESTAMP")),to_char(substrb(dump(min("TIMESTAMP"),16,0,32),1,120)),to_char(substrb(dump(max("TIMESTAMP"),16,0,32),1,120)),to_char(count("FLAGS")),to_char(substrb(dump(min("FLAGS"),16,0,32),1,120)),to_char(substrb(dump(max("FLAGS"),16,0,32),1,120)),to_char(count("DROP_SEGMENTS")),toselect service_id, name, name_hash, network_name, creation_date, creation_date_hash, goal, flags, edition from service$ where lower(name) = lower(:1) and deletion_date is nullselect obj#, owner, node from syn$ where name=:1SELECT CONTROLFILE_TYPE FROM V$DATABASEupdate hist_head$ set bucket_cnt=:3, row_cnt=:4, cache_cnt=:5,null_cnt=:6, timestamp#=:7, sample_size=:8, minimum=:9, maximum=:10,distcnt=:11, lowval=:12, hival=:13, density=:14, spare1=:15, spare2=:16, avgcln=:17, col#=:18 where obj#=:1 and intcol#=:2lock table sys.mon_mods_all$ in exclusive modelock table sys.mon_mods_all$ in exclusive modelock table sys.mon_mods_all$ in exclusive modeselect num_rows FROM dba_tables where table_name = 'HOSPITALES'delete from WRM$_SNAPSHOT   where :beg_snap <= snap_id and         snap_id <= :end_snap and         status = 2 and         dbid = :dbidWITH MWS AS  (SELECT ROWNUM idx, WINDOW_NAME, NEXT_START_DATE sd,        NEXT_START_DATE + DURATION ed , DURATION,         EXTRACT(DAY FROM DURATION)*24*60 +         EXTRACT(HOUR FROM DURATION)*60 +         EXTRACT(MINUTE FROM DURATION) mdur,         CASE active WHEN 'TRUE' THEN 1 ELSE 0 END AS act     FROM DBA_SCHEDULER_WINDOWS    WHERE ENABLED='TRUE'       AND WINDOW_NAME IN        (SELECT WINDOW_NAME            FROM DBA_SCHEDULER_WINGROUP_MEMBERS          WHERE WINDOW_GROUP_NAME='MAINTENANCE_WINDOW_GROUP'))  SELECT idx, 0,  WINDOW_NAME, sd, ed, DURATION, mdur, act  FROM  MWS UNION ALL   SELECT idx, C.CID_KETCL, WINDOW_NAME, sd, ed, DURATION, mdur, act     FROM MWS, X$KETCL C   WHERE C.CID_KETCL > 0      AND MWS.WINDOW_NAME IN        (SELECT WINDOW_NAME           FROM DBA_SCHEDULER_WINGROUP_MEMBERS WGM          WHERE WGM.WINDOW_GROUP_NAME=C.WGRP_KETCL) ORDER BY 4,1,2WITH MWS AS  (SELECT ROWNUM idx, WINDOW_NAME, NEXT_START_DATE sd,        NEXT_START_DATE + DURATION ed , DURATION,         EXTRACT(DAY FROM DURATION)*24*60 +         EXTRACT(HOUR FROM DURATION)*60 +         EXTRACT(MINUTE FROM DURATION) mdur,         CASE active WHEN 'TRUE' THEN 1 ELSE 0 END AS act     FROM DBA_SCHEDULER_WINDOWS    WHERE ENABLED='TRUE'       AND WINDOW_NAME IN        (SELECT WINDOW_NAME            FROM DBA_SCHEDULER_WINGROUP_MEMBERS          WHERE WINDOW_GROUP_NAME='MAINTENANCE_WINDOW_GROUP'))  SELECT idx, 0,  WINDOW_NAME, sd, ed, DURATION, mdur, act  FROM  MWS UNION ALL   SELECT idx, C.CID_KETCL, WINDOW_NAME, sd, ed, DURATION, mdur, act     FROM MWS, X$KETCL C   WHERE C.CID_KETCL > 0      AND MWS.WINDOW_NAME IN        (SELECT WINDOW_NAME           FROM DBA_SCHEDULER_WINGROUP_MEMBERS WGM          WHERE WGM.WINDOW_GROUP_NAME=C.WGRP_KETCL) ORDER BY 4,1,2      select name, resetlogs_time,              resetlogs_change#,              dbid       into :dbname:dbname_i,            :rlgtime,            :rlgscn,            :fhdbi:fhdbi_i       from v$databasedelete from WRH$_THREAD tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) insert into sys.wri$_optstat_histgrm_history (obj#,intcol#,savtime,bucket, endpoint,epvalue,colname)  select hg.obj#,hg.intcol#,:3,hg.bucket,hg.endpoint,hg.epvalue, :4  from sys.histgrm$ hg  where hg.obj# = :1 and hg.intcol# = :2insert into sys.wri$_optstat_histgrm_history (obj#,intcol#,savtime,bucket, endpoint,epvalue,colname)  select hg.obj#,hg.intcol#,:3,hg.bucket,hg.endpoint,hg.epvalue, :4  from sys.histgrm$ hg  where hg.obj# = :1 and hg.intcol# = :2insert into sys.wri$_optstat_histgrm_history (obj#,intcol#,savtime,bucket, endpoint,epvalue,colname)  select hg.obj#,hg.intcol#,:3,hg.bucket,hg.endpoint,hg.epvalue, :4  from sys.histgrm$ hg  where hg.obj# = :1 and hg.intcol# = :2update sys.col_usage$ set   equality_preds    = equality_preds    + decode(bitand(:flag,1),0,0,1),   equijoin_preds    = equijoin_preds    + decode(bitand(:flag,2),0,0,1),   nonequijoin_preds = nonequijoin_preds + decode(bitand(:flag,4),0,0,1),   range_preds       = range_preds       + decode(bitand(:flag,8),0,0,1),   like_preds        = like_preds        + decode(bitand(:flag,16),0,0,1),   null_preds        = null_preds        + decode(bitand(:flag,32),0,0,1),  timestamp = :time where obj# = :objn and intcol# = :colnupdate sys.col_usage$ set   equality_preds    = equality_preds    + decode(bitand(:flag,1),0,0,1),   equijoin_preds    = equijoin_preds    + decode(bitand(:flag,2),0,0,1),   nonequijoin_preds = nonequijoin_preds + decode(bitand(:flag,4),0,0,1),   range_preds       = range_preds       + decode(bitand(:flag,8),0,0,1),   like_preds        = like_preds        + decode(bitand(:flag,16),0,0,1),   null_preds        = null_preds        + decode(bitand(:flag,32),0,0,1),  timestamp = :time where obj# = :objn and intcol# = :colnupdate sys.col_usage$ set   equality_preds    = equality_preds    + decode(bitand(:flag,1),0,0,1),   equijoin_preds    = equijoin_preds    + decode(bitand(:flag,2),0,0,1),   nonequijoin_preds = nonequijoin_preds + decode(bitand(:flag,4),0,0,1),   range_preds       = range_preds       + decode(bitand(:flag,8),0,0,1),   like_preds        = like_preds        + decode(bitand(:flag,16),0,0,1),   null_preds        = null_preds        + decode(bitand(:flag,32),0,0,1),  timestamp = :time where obj# = :objn and intcol# = :colnupdate sys.col_usage$ set   equality_preds    = equality_preds    + decode(bitand(:flag,1),0,0,1),   equijoin_preds    = equijoin_preds    + decode(bitand(:flag,2),0,0,1),   nonequijoin_preds = nonequijoin_preds + decode(bitand(:flag,4),0,0,1),   range_preds       = range_preds       + decode(bitand(:flag,8),0,0,1),   like_preds        = like_preds        + decode(bitand(:flag,16),0,0,1),   null_preds        = null_preds        + decode(bitand(:flag,32),0,0,1),  timestamp = :time where obj# = :objn and intcol# = :colnupdate sys.col_usage$ set   equality_preds    = equality_preds    + decode(bitand(:flag,1),0,0,1),   equijoin_preds    = equijoin_preds    + decode(bitand(:flag,2),0,0,1),   nonequijoin_preds = nonequijoin_preds + decode(bitand(:flag,4),0,0,1),   range_preds       = range_preds       + decode(bitand(:flag,8),0,0,1),   like_preds        = like_preds        + decode(bitand(:flag,16),0,0,1),   null_preds        = null_preds        + decode(bitand(:flag,32),0,0,1),  timestamp = :time where obj# = :objn and intcol# = :colnupdate sys.col_usage$ set   equality_preds    = equality_preds    + decode(bitand(:flag,1),0,0,1),   equijoin_preds    = equijoin_preds    + decode(bitand(:flag,2),0,0,1),   nonequijoin_preds = nonequijoin_preds + decode(bitand(:flag,4),0,0,1),   range_preds       = range_preds       + decode(bitand(:flag,8),0,0,1),   like_preds        = like_preds        + decode(bitand(:flag,16),0,0,1),   null_preds        = null_preds        + decode(bitand(:flag,32),0,0,1),  timestamp = :time where obj# = :objn and intcol# = :colnselect tab_alias, tab_name, property, tab_id, tab_obj# from rec_tab$ where  ec_obj# = :1select /*+  no_parallel_index(t, "SYS_C003356")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"SYS_C003356") */ count(*) as nrw,count(distinct sys_op_lbid(11623,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."DBMS_LOCK_ALLOCATED" t where "NAME" is not nullselect /*+  no_parallel_index(t, "SYS_C003356")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"SYS_C003356") */ count(*) as nrw,count(distinct sys_op_lbid(11623,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."DBMS_LOCK_ALLOCATED" t where "NAME" is not nullselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"END_INTERVAL_TIME" val,count(*) cnt  from "SYS"."WRM$_SNAPSHOT" t  where "END_INTERVAL_TIME" is not null  group by "END_INTERVAL_TIME") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"END_INTERVAL_TIME" val,count(*) cnt  from "SYS"."WRM$_SNAPSHOT" t  where "END_INTERVAL_TIME" is not null  group by "END_INTERVAL_TIME") order by valSELECT /* OPT_DYN_SAMP */ /*+ ALL_ROWS IGNORE_WHERE_CLAUSE NO_PARALLEL(SAMPLESUB) opt_param('parallel_execution_enabled', 'false') NO_PARALLEL_INDEX(SAMPLESUB) NO_SQL_TUNE */ NVL(SUM(C1),0), NVL(SUM(C2),0) FROM (SELECT /*+ IGNORE_WHERE_CLAUSE NO_PARALLEL("S") FULL("S") NO_PARALLEL_INDEX("S") */ 1 AS C1, CASE WHEN "S"."STATUS"=:B1 THEN 1 ELSE 0 END AS C2 FROM "SYS"."STATS_TARGET$" "S") SAMPLESUBselect num_rows FROM dba_tables where table_name = 'T1'SELECT a.apply#, a.apply_name, a.flags FROM sys.streams$_apply_process a, dba_queues q, dba_queue_tables qt  ,v$instance i WHERE a.queue_owner  = q.owner   and a.queue_name   = q.name   and qt.queue_table = q.queue_table   and qt.owner       = q.owner   and qt.owner_instance = i.instance_number   and a.status       = :1 ORDER BY a.apply# select  PRIV_NUMBER from GV$ENABLEDPRIVS where inst_id = USERENV('Instance')SELECT /* OPT_DYN_SAMP */ /*+ ALL_ROWS IGNORE_WHERE_CLAUSE NO_PARALLEL(SAMPLESUB) opt_param('parallel_execution_enabled', 'false') NO_PARALLEL_INDEX(SAMPLESUB) NO_SQL_TUNE */ NVL(SUM(C1),0), NVL(SUM(C2),0) FROM (SELECT /*+ IGNORE_WHERE_CLAUSE NO_PARALLEL("O") FULL("O") NO_PARALLEL_INDEX("O") */ 1 AS C1, CASE WHEN "O"."TYPE#"=2 AND BITAND("O"."FLAGS",128)<>128 AND (BITAND("O"."FLAGS",16)<>16 OR "O"."NAME" NOT LIKE 'DR$%' AND "O"."NAME" NOT LIKE 'DR#%') THEN 1 ELSE 0 END AS C2 FROM "SYS"."OBJ$" SAMPLE BLOCK (13.080169 , 1) SEED (1) "O") SAMPLESUBselect l.col#, l.intcol#, l.lobj#, l.ind#, l.ts#, l.file#, l.block#, l.chunk, l.pctversion$, l.flags, l.property, l.retention, l.freepools from lob$ l where l.obj# = :1 order by l.intcol# ascselect l.col#, l.intcol#, l.lobj#, l.ind#, l.ts#, l.file#, l.block#, l.chunk, l.pctversion$, l.flags, l.property, l.retention, l.freepools from lob$ l where l.obj# = :1 order by l.intcol# ascselect /*+  no_parallel_index(t, "I_TABPART_OBJ$")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_TABPART_OBJ$") */ count(*) as nrw,count(distinct sys_op_lbid(572,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."TABPART$" t where "OBJ#" is not nullUPDATE STATS_TARGET$ SET FLAGS = CASE WHEN STATUS = :B3 THEN CASE WHEN BITAND(FLAGS, :B7 ) = :B7 THEN :B7 ELSE BITAND(FLAGS, :B7 ) + 1 END ELSE 0 END + CASE WHEN STATUS IN (:B4 , :B3 ) THEN :B6 ELSE 0 END, STATUS = CASE WHEN STATUS IN (:B4 , :B3 ) THEN :B5 ELSE STATUS END WHERE STATUS IN (:B4 , :B3 ) AND SID = :B2 AND SERIAL# = :B1 (SELECT sequence#, src_sid, src_serial#,                                      src_state, src_userid, src_schemaid                            FROM   tsm_src$                                                       WHERE  src_inst_name   = nvl(:1, src_inst_name)                         AND  src_inst_id     = nvl(:2, src_inst_id)                           AND  src_start_time  < :3                                             AND  src_state NOT IN (6, 7))                                      UNION ALL                                                             (SELECT sequence#, dst_sid, dst_serial#,                                      dst_state, dst_userid, dst_schemaid                            FROM   tsm_dst$                                                       WHERE  dst_inst_name   = nvl(:1, dst_inst_name)                         AND  dst_inst_id     = nvl(:2, dst_inst_id)                           AND  dst_start_time  < :3                                             AND  dst_state NOdelete from WRH$_STREAMS_POOL_ADVICE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select SUM(column_length) from all_ind_columns where table_name = 'JOBS'DELETE FROM RECENT_RESOURCE_INCARNATIONS$ WHERE DB_UNIQUE_NAME <> :B2 OR DB_DOMAIN <> :B1 select o.name, o.owner# from obj$ o, type$ t  where o.oid$ = t.tvoid and  bitand(t.properties,8388608) = 8388608 and (sysdate-o.ctime) > 0.0007select SUM(data_length) from all_tab_columns where table_name = 'INTEL'update seq$ set increment$=:2,minvalue=:3,maxvalue=:4,cycle#=:5,order$=:6,cache=:7,highwater=:8,audit$=:9,flags=:10 where obj#=:1update seq$ set increment$=:2,minvalue=:3,maxvalue=:4,cycle#=:5,order$=:6,cache=:7,highwater=:8,audit$=:9,flags=:10 where obj#=:1select re.r_obj#, o.owner#, u.name, o.name, re.property, re.rule_id,  re.r_orcount, re.r_lowbox, re.tabs_used, re.vars_used  from rule_set_re$ re, obj$ o, user$ u where re.rs_obj# = :1 and re.ec_obj# = :2 and re.ent_used = 1 and  re.r_obj# = o.obj# and o.owner# = u.user#select /*+ index(idl_ub1$ i_idl_ub11) +*/ piece#,length,piece from idl_ub1$ where obj#=:1 and part=:2 and version=:3 order by piece#select /*+ index(idl_ub1$ i_idl_ub11) +*/ piece#,length,piece from idl_ub1$ where obj#=:1 and part=:2 and version=:3 order by piece#call dbms_stats.gather_database_stats_job_proc (  )select 1 from "SYS"."AQ$_AQ_PROP_TABLE_L"select SUM(column_length) from all_ind_columns where table_name = 'REGIONS'select min(time_manager_info) from "SYS"."AQ_EVENT_TABLE"select parttype, partcnt, partkeycols, flags, defts#, defpctfree, defpctused, definitrans, defmaxtrans, deftiniexts, defextsize, defminexts, defmaxexts, defextpct, deflists, defgroups, deflogging, spare1, mod(spare2, 256) subparttype, mod(trunc(spare2/256), 256) subpartkeycols, mod(trunc(spare2/65536), 65536) defsubpartcnt, mod(trunc(spare2/4294967296), 256) defhscflags, mod(spare3, 256) interval_dty, rowid, defmaxsize from partobj$ where obj# = :1select parttype, partcnt, partkeycols, flags, defts#, defpctfree, defpctused, definitrans, defmaxtrans, deftiniexts, defextsize, defminexts, defmaxexts, defextpct, deflists, defgroups, deflogging, spare1, mod(spare2, 256) subparttype, mod(trunc(spare2/256), 256) subpartkeycols, mod(trunc(spare2/65536), 65536) defsubpartcnt, mod(trunc(spare2/4294967296), 256) defhscflags, mod(spare3, 256) interval_dty, rowid, defmaxsize from partobj$ where obj# = :1      declare          vsn  varchar2(20);             begin               vsn := dbms_rcvman.getPackageVersion;               :pkg_vsn:pkg_vsn_i := vsn;               if vsn is not null then                  :pkg_vsnub4 :=                    to_number(substr(vsn,1,2) || substr(vsn,4,2) ||                              substr(vsn,7,2) || nvl(substr(vsn,10,2),'00'));               end if;             end;update wrm$_wr_control    set snap_interval = :bind1, snapint_num = :bind2, retention = :bind3,      retention_num = :bind4, most_recent_snap_id = :bind5,      most_recent_snap_time = :bind6, mrct_snap_time_num = :bind7,      status_flag = :bind8, most_recent_purge_time = :bind9,      mrct_purge_time_num = :bind10,      most_recent_split_id = :bind11, most_recent_split_time = :bind12,      swrf_version = :bind13, registration_status = :bind14,      mrct_baseline_id = :bind15, topnsql = :bind16, mrct_bltmpl_id = :bind17    where dbid = :dbidupdate wrm$_wr_control    set snap_interval = :bind1, snapint_num = :bind2, retention = :bind3,      retention_num = :bind4, most_recent_snap_id = :bind5,      most_recent_snap_time = :bind6, mrct_snap_time_num = :bind7,      status_flag = :bind8, most_recent_purge_time = :bind9,      mrct_purge_time_num = :bind10,      most_recent_split_id = :bind11, most_recent_split_time = :bind12,      swrf_version = :bind13, registration_status = :bind14,      mrct_baseline_id = :bind15, topnsql = :bind16, mrct_bltmpl_id = :bind17    where dbid = :dbidupdate wrm$_wr_control    set snap_interval = :bind1, snapint_num = :bind2, retention = :bind3,      retention_num = :bind4, most_recent_snap_id = :bind5,      most_recent_snap_time = :bind6, mrct_snap_time_num = :bind7,      status_flag = :bind8, most_recent_purge_time = :bind9,      mrct_purge_time_num = :bind10,      most_recent_split_id = :bind11, most_recent_split_time = :bind12,      swrf_version = :bind13, registration_status = :bind14,      mrct_baseline_id = :bind15, topnsql = :bind16, mrct_bltmpl_id = :bind17    where dbid = :dbidupdate wrm$_wr_control    set snap_interval = :bind1, snapint_num = :bind2, retention = :bind3,      retention_num = :bind4, most_recent_snap_id = :bind5,      most_recent_snap_time = :bind6, mrct_snap_time_num = :bind7,      status_flag = :bind8, most_recent_purge_time = :bind9,      mrct_purge_time_num = :bind10,      most_recent_split_id = :bind11, most_recent_split_time = :bind12,      swrf_version = :bind13, registration_status = :bind14,      mrct_baseline_id = :bind15, topnsql = :bind16, mrct_bltmpl_id = :bind17    where dbid = :dbidselect '"'||name||'" '||decode(type#,1,decode(charsetform,2,'NVARCHAR2('||decode(bitand(property,8388608),8388608,decode(spare3,0,1,spare3)||')','BYTECOUNT=>'||decode(length,0,1,length)||')'),'VARCHAR2('||decode(bitand(property,8388608),8388608,decode(spare3,0,1,spare3)||' char)',decode(length,0,1,length)||' byte)')),2,decode(scale,null,decode(precision#,null,'NUMBER','FLOAT('||precision#||')'),'NUMBER('||decode(precision#,null,'38', precision#)||','||scale||')'),8,'LONG',9,'VARCHAR('||(decode(length,0,1,length))||')',12,'DATE',23,'RAW('||length||')',24,'LONG RAW',69,'ROWID',96,decode(charsetform,2,'NCHAR('||decode(bitand(property,8388608),8388608,decode(spare3,0,1,spare3)||')','BYTECOUNT=>'||decode(length,0,1,length)||')'),'CHAR('||decode(bitand(property,8388608),8388608,decode(spare3,0,1,spare3)||' char)',decode(length,0,1,length)||' byte)')),97,'VARCHAR('||(decode(length,0,1,length))|| ')',105,'MLSLABEL',106,'MLSLABEL',112,decode(charsetform,2,'NCLOB','CLOB'),113,'BLOB',114,'BFILE',select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"INDMETHOD#" val,count(*) cnt  from "SYS"."IND$" t  where "INDMETHOD#" is not null  group by "INDMETHOD#") order by valSELECT /*+ rule */ U.NAME, OI.NAME, NULL, NULL, DECODE(BITAND(I.FLAGS, 2048),2048,2,0), DECODE(BITAND(I.FLAGS, 64),64,1,0), I.ROWCNT, I.LEAFCNT, I.DISTKEY, I.LBLKKEY, I.DBLKKEY, I.CLUFAC, I.BLEVEL, I.ANALYZETIME, I.SAMPLESIZE, DECODE(BITAND(I.FLAGS, 128), 128, MOD(TRUNC(I.PCTTHRES$/256),256), DECODE(I.TYPE#, 4, MOD(TRUNC(I.PCTTHRES$/256),256), NULL)), IST.CACHEDBLK, IST.CACHEHIT, IST.LOGICALREAD, NULL FROM SYS.USER$ U, SYS.OBJ$ OI, SYS.IND$ I, SYS.IND_STATS$ IST WHERE :B4 IS NULL AND U.NAME = :B3 AND OI.OWNER# = U.USER# AND OI.NAME = :B2 AND OI.TYPE# = 1 AND OI.OBJ# = I.OBJ# AND I.OBJ# = IST.OBJ# (+) AND (:B1 = 'CACHE_HISTORY' OR (:B1 = 'DATA' AND BITAND(I.FLAGS,2) = 2) OR (:B1 = 'CACHE' AND IST.OBJ# IS NOT NULL) OR (:B1 = 'ALL' AND (BITAND(I.FLAGS,2) = 2 OR IST.OBJ# IS NOT NULL)) ) UNION ALL SELECT U.NAME, OP.NAME, OP.SUBNAME, NULL, DECODE(BITAND(IP.FLAGS, 16),16,2,0), DECODE(BITAND(IP.FLAGS, 8),8,1,0), IP.ROWCNT, IP.LEAFCNT, IP.DISTKEY, IP.LBLKKEY, IP.DBLKKEY, IP.CLUFAC, IP.BLEVEL, I/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("SCHEDULE_ID")),to_char(substrb(dump(min("SCHEDULE_ID"),16,0,32),1,120)),to_char(substrb(dump(max("SCHEDULE_ID"),16,0,32),1,120)),to_char(count("SCHEDULE_MODE")),to_char(substrb(dump(min("SCHEDULE_MODE"),16,0,32),1,120)),to_char(substrb(dump(max("SCHEDULE_MODE"),16,0,32),1,120)),to_char(count("START_CALIBRATE")),to_char(substrb(dump(min("START_CALIBRATE"),16,0,32),1,120)),to_char(substrb(dump(max("START_CALIBRATE"),16,0,32),1,120)),to_char(count("LAST_VOTE")),to_char(substrb(dump(min("LAST_VOTE"),16,0,32),1,120)),to_char(substrb(dump(max("LAST_VOTE"),16,0,32),1,120)),to_char(count("NUM_VOTES")),to_char(substrb(dump(min("NUM_VOTES"),16,0,32),1,120)),to_char(substrb(dump(max("NUM_VOTES"),16,0,32),1,120)),to_char(count("SYNCED_TIME")),to_char(substrb(dump(min("SYNCED_TIME"),16,0,32),1,120)),to_c/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("SCHEDULE_ID")),to_char(substrb(dump(min("SCHEDULE_ID"),16,0,32),1,120)),to_char(substrb(dump(max("SCHEDULE_ID"),16,0,32),1,120)),to_char(count("SCHEDULE_MODE")),to_char(substrb(dump(min("SCHEDULE_MODE"),16,0,32),1,120)),to_char(substrb(dump(max("SCHEDULE_MODE"),16,0,32),1,120)),to_char(count("START_CALIBRATE")),to_char(substrb(dump(min("START_CALIBRATE"),16,0,32),1,120)),to_char(substrb(dump(max("START_CALIBRATE"),16,0,32),1,120)),to_char(count("LAST_VOTE")),to_char(substrb(dump(min("LAST_VOTE"),16,0,32),1,120)),to_char(substrb(dump(max("LAST_VOTE"),16,0,32),1,120)),to_char(count("NUM_VOTES")),to_char(substrb(dump(min("NUM_VOTES"),16,0,32),1,120)),to_char(substrb(dump(max("NUM_VOTES"),16,0,32),1,120)),to_char(count("SYNCED_TIME")),to_char(substrb(dump(min("SYNCED_TIME"),16,0,32),1,120)),to_cinsert into WRI$_ALERT_OUTSTANDING (reason_id, object_id, subobject_id, internal_instance_number, owner, object_name, subobject_name, sequence_id, reason_argument_1, reason_argument_2, reason_argument_3, reason_argument_4, reason_argument_5, time_suggested, creation_time, action_argument_1, action_argument_2, action_argument_3, action_argument_4, action_argument_5, message_level, hosting_client_id, process_id, host_id, host_nw_addr, instance_name, instance_number, user_id, execution_context_id, error_instance_id, context, metric_value) values (:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12, :13, :14, :15, :16, :17, :18, :19, :20, :21, :22, :23, :24, :25, :26, :27, :28, :29, :30, :31, :32)DELETE FROM KET$_CLIENT_TASKS WHERE CURR_WIN_START < (SYSTIMESTAMP- INTERVAL '31' DAY)/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("OBJ#")),to_char(substrb(dump(min("OBJ#"),16,0,32),1,120)),to_char(substrb(dump(max("OBJ#"),16,0,32),1,120)),to_char(count("INTCOL#")),to_char(substrb(dump(min("INTCOL#"),16,0,32),1,120)),to_char(substrb(dump(max("INTCOL#"),16,0,32),1,120)),to_char(count("EQUALITY_PREDS")),to_char(substrb(dump(min("EQUALITY_PREDS"),16,0,32),1,120)),to_char(substrb(dump(max("EQUALITY_PREDS"),16,0,32),1,120)),to_char(count("EQUIJOIN_PREDS")),to_char(substrb(dump(min("EQUIJOIN_PREDS"),16,0,32),1,120)),to_char(substrb(dump(max("EQUIJOIN_PREDS"),16,0,32),1,120)),to_char(count("NONEQUIJOIN_PREDS")),to_char(substrb(dump(min("NONEQUIJOIN_PREDS"),16,0,32),1,120)),to_char(substrb(dump(max("NONEQUIJOIN_PREDS"),16,0,32),1,120)),to_char(count("RANGE_PREDS")),to_char(substrb(dump(min("RANGE_PREDS"),16,0,32),1,120)),to_char/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("OBJ#")),to_char(substrb(dump(min("OBJ#"),16,0,32),1,120)),to_char(substrb(dump(max("OBJ#"),16,0,32),1,120)),to_char(count("INTCOL#")),to_char(substrb(dump(min("INTCOL#"),16,0,32),1,120)),to_char(substrb(dump(max("INTCOL#"),16,0,32),1,120)),to_char(count("EQUALITY_PREDS")),to_char(substrb(dump(min("EQUALITY_PREDS"),16,0,32),1,120)),to_char(substrb(dump(max("EQUALITY_PREDS"),16,0,32),1,120)),to_char(count("EQUIJOIN_PREDS")),to_char(substrb(dump(min("EQUIJOIN_PREDS"),16,0,32),1,120)),to_char(substrb(dump(max("EQUIJOIN_PREDS"),16,0,32),1,120)),to_char(count("NONEQUIJOIN_PREDS")),to_char(substrb(dump(min("NONEQUIJOIN_PREDS"),16,0,32),1,120)),to_char(substrb(dump(max("NONEQUIJOIN_PREDS"),16,0,32),1,120)),to_char(count("RANGE_PREDS")),to_char(substrb(dump(min("RANGE_PREDS"),16,0,32),1,120)),to_chardelete from WRH$_RSRC_CONSUMER_GROUP tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select o.obj#, t.flags from tab$ t, obj$ o, user$ u where  u.user# = :1 and u.user# = o.owner# and o.name = :2 and o.obj# = t.obj#select col#,intcol#,ntab# from ntab$ where obj#=:1 order by intcol# ascselect col#,intcol#,ntab# from ntab$ where obj#=:1 order by intcol# ascSELECT /*+ ordered use_nl(u io i ito t itu po) */ IO.OBJ# IOBJN,I.TYPE# ITYPE,I.FLAGS IFLAGS,I.PROPERTY IPROP, I.INTCOLS IINTCOLS, NVL(I.DEGREE,1), I.ANALYZETIME, ITU.NAME TOWN,ITO.NAME TAB,I.BO# TOBJN,T.FLAGS TFLAGS,T.PROPERTY TPROP, ITO.TYPE# TTYPE, CASE WHEN BITAND(T.FLAGS, 16) = 0 THEN NULL ELSE T.ROWCNT END NROWS, PO.PARTTYPE PTYPE,PO.PARTCNT PCNT,PO.PARTKEYCOLS PTKCOLS, PO.FLAGS PFLAGS,MOD(PO.SPARE2,256) SPTYPE FROM SYS.USER$ U,SYS.OBJ$ IO,SYS.IND$ I, SYS.OBJ$ ITO,SYS.USER$ ITU,SYS.TAB$ T, PARTOBJ$ PO WHERE U.NAME=:B2 AND IO.NAME=:B1 AND IO.OWNER#=U.USER# AND IO.TYPE#=1 AND IO.OBJ#=I.OBJ# AND ITO.OBJ#=I.BO# AND ITO.OWNER#=ITU.USER# AND ITO.OBJ#=T.OBJ# AND IO.OBJ#=PO.OBJ#(+) UNION ALL SELECT /*+ ordered use_nl(u io i ito t itu) */ IO.OBJ# IOBJN,I.TYPE# ITYPE,I.FLAGS IFLAGS,I.PROPERTY IPROP, I.INTCOLS IINTCOLS, NVL(I.DEGREE,1), I.ANALYZETIME, ITU.NAME TOWN,ITO.NAME TAB,I.BO# TOBJN,0 TFLAGS,0 TPROP, ITO.TYPE# TTYPE, NULL NROWS, NULL PTYPE,NULL PCNT,NULL PTKCOLS, NULL PFLAGS,NULL SPTSELECT /*+ ordered use_nl(u io i ito t itu po) */ IO.OBJ# IOBJN,I.TYPE# ITYPE,I.FLAGS IFLAGS,I.PROPERTY IPROP, I.INTCOLS IINTCOLS, NVL(I.DEGREE,1), I.ANALYZETIME, ITU.NAME TOWN,ITO.NAME TAB,I.BO# TOBJN,T.FLAGS TFLAGS,T.PROPERTY TPROP, ITO.TYPE# TTYPE, CASE WHEN BITAND(T.FLAGS, 16) = 0 THEN NULL ELSE T.ROWCNT END NROWS, PO.PARTTYPE PTYPE,PO.PARTCNT PCNT,PO.PARTKEYCOLS PTKCOLS, PO.FLAGS PFLAGS,MOD(PO.SPARE2,256) SPTYPE FROM SYS.USER$ U,SYS.OBJ$ IO,SYS.IND$ I, SYS.OBJ$ ITO,SYS.USER$ ITU,SYS.TAB$ T, PARTOBJ$ PO WHERE U.NAME=:B2 AND IO.NAME=:B1 AND IO.OWNER#=U.USER# AND IO.TYPE#=1 AND IO.OBJ#=I.OBJ# AND ITO.OBJ#=I.BO# AND ITO.OWNER#=ITU.USER# AND ITO.OBJ#=T.OBJ# AND IO.OBJ#=PO.OBJ#(+) UNION ALL SELECT /*+ ordered use_nl(u io i ito t itu) */ IO.OBJ# IOBJN,I.TYPE# ITYPE,I.FLAGS IFLAGS,I.PROPERTY IPROP, I.INTCOLS IINTCOLS, NVL(I.DEGREE,1), I.ANALYZETIME, ITU.NAME TOWN,ITO.NAME TAB,I.BO# TOBJN,0 TFLAGS,0 TPROP, ITO.TYPE# TTYPE, NULL NROWS, NULL PTYPE,NULL PCNT,NULL PTKCOLS, NULL PFLAGS,NULL SPTselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"TYPE#" val,count(*) cnt  from "SYS"."IND$" t  where "TYPE#" is not null  group by "TYPE#") order by val       begin          :vsn_min := dbms_backup_restore.protocol_version_number_min;             :rel_min := dbms_backup_restore.protocol_release_number_min;             :upd_min := dbms_backup_restore.protocol_update_number_min;              :cmp_min := 0;                                                                     :vsn_max := dbms_backup_restore.protocol_version_number_max;             :rel_max := dbms_backup_restore.protocol_release_number_max;             :upd_max := dbms_backup_restore.protocol_update_number_max;              :cmp_max := 0;                                                           :pkg_vsn := to_char(:vsn_max, 'fm00')||'.'||                      to_char(:rel_max, 'fm00')||'.'||                      to_char(:upd_max, 'fm00')||'.'||                      to_char(:cmp_max, 'fm00');             end;select     from_tz(      cast ((max(analyzetime) - 1) as timestamp),      to_char(systimestamp, 'TZH:TZM'))  from sys.tab$ where analyzetime is not nullselect /*+  no_parallel_index(t, "WRI$_ALERT_HISTORY_PK")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"WRI$_ALERT_HISTORY_PK") */ count(*) as nrw,count(distinct sys_op_lbid(6144,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."WRI$_ALERT_HISTORY" t where "SEQUENCE_ID" is not nullselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"TS#" val,count(*) cnt  from "SYS"."TABPART$" t  where "TS#" is not null  group by "TS#") order by valselect SUM(data_length) from all_tab_columns where table_name = 'YY'select incarnation#, resetlogs_change#, resetlogs_time,         prior_resetlogs_change#, prior_resetlogs_time, status,         resetlogs_id, prior_incarnation#, flashback_database_allowed  from GV$DATABASE_INCARNATION  where inst_id = USERENV('Instance')select SUM(column_length) from all_ind_columns where table_name = 'RT2'select eventid, destination, name, schema,         disabled, flags, job_name,         propagation_name, destq from (select source_queue_schema, source_queue, propagation_name,       '"' || destination_queue_schema || '"."' || destination_queue ||       '"'|| nvl2(destination_dblink, '@', '') ||       destination_dblink as dest       from sys.streams$_propagation_process) sp, (select q.eventid, s.destination, q.name, t.schema,         s.disabled, t.flags, s.job_name, s.destq from system.aq$_queues q, sys.aq$_schedules s, system.aq$_queue_tables t,   sys.aq$_queue_table_affinities aft where q.oid = s.oid and q.table_objno = t.objno and aft.table_objno = t.objno and  bitand(q.properties, 512) = 512 and aft.owner_instance = :1  ) where sp.source_queue_schema (+)= schema and sp.source_queue (+)= name and sp.dest (+)= destination select min(next_date) from "SYS"."AQ$_SCHEDULER_FILEWATCHER_QT_T"delete from WRH$_IOSTAT_DETAIL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select sum(blocks) from x$kewx_segments  where owner = 'SYS'    and (segment_name like 'STREAMS$%' OR segment_name like 'APPLY$%')select min(minbkt),maxbkt,substrb(dump(min(val),16,0,32),1,120) minval,substrb(dump(max(val),16,0,32),1,120) maxval,sum(rep) sumrep, sum(repsq) sumrepsq, max(rep) maxrep, count(*) bktndv, sum(case when rep=1 then 1 else 0 end) unqrep from (select val,min(bkt) minbkt, max(bkt) maxbkt, count(val) rep, count(val)*count(val) repsq from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"SCN" val, ntile(254) over (order by "SCN") bkt  from "SYS"."SMON_SCN_TIME" t  where "SCN" is not null) group by val) group by maxbkt order by maxbktselect exptime, ltime, astatus, lcount from user$ where user#=:1select count(*) from (                                 select u.name                                        from registry$ r, user$ u                            where r.status in (1,3,5)                              and r.namespace = 'SERVER'                           and r.schema#   = u.user#                            and u.name      = :1                               union all                                            select u.name                                        from registry$ r, registry$schemas s, user$ u        where r.status in (1,3,5)                              and r.namespace = 'SERVER'                           and r.cid       = s.cid                              and s.schema#   = u.user#                            and u.name      = :1)select type# from ind$ where obj# = :1select SUM(column_length) from all_ind_columns where table_name = 'DEPARTMENTS'/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("OBJ#")),to_char(substrb(dump(min("OBJ#"),16,0,32),1,120)),to_char(substrb(dump(max("OBJ#"),16,0,32),1,120)),to_char(count("INCREMENT$")),to_char(substrb(dump(min("INCREMENT$"),16,0,32),1,120)),to_char(substrb(dump(max("INCREMENT$"),16,0,32),1,120)),to_char(count("MINVALUE")),to_char(substrb(dump(min("MINVALUE"),16,0,32),1,120)),to_char(substrb(dump(max("MINVALUE"),16,0,32),1,120)),to_char(count("MAXVALUE")),to_char(substrb(dump(min("MAXVALUE"),16,0,32),1,120)),to_char(substrb(dump(max("MAXVALUE"),16,0,32),1,120)),to_char(count("CYCLE#")),to_char(substrb(dump(min("CYCLE#"),16,0,32),1,120)),to_char(substrb(dump(max("CYCLE#"),16,0,32),1,120)),to_char(count("ORDER$")),to_char(substrb(dump(min("ORDER$"),16,0,32),1,120)),to_char(substrb(dump(max("ORDER$"),16,0,32),1,120)),to_char(count("CACHE")),tselect time_mp, scn, num_mappings, tim_scn_map from smon_scn_time   where scn =    (select max(scn) from smon_scn_time where scn <= :1)select time_mp, scn, num_mappings, tim_scn_map from smon_scn_time   where scn =    (select max(scn) from smon_scn_time where scn <= :1)select num_rows FROM dba_tables where table_name = 'RT' SELECT 1 FROM obj$ WHERE name LIKE 'XS$SESSIONS'SELECT c.parameter_value           FROM smb$config c          WHERE parameter_name = :1SELECT /* OPT_DYN_SAMP */ /*+ ALL_ROWS IGNORE_WHERE_CLAUSE NO_PARALLEL(SAMPLESUB) opt_param('parallel_execution_enabled', 'false') NO_PARALLEL_INDEX(SAMPLESUB) NO_SQL_TUNE */ NVL(SUM(C1),0), NVL(SUM(C2),0) FROM (SELECT /*+ NO_PARALLEL("SYS_ALIAS_1") FULL("SYS_ALIAS_1") NO_PARALLEL_INDEX("SYS_ALIAS_1") */ 1 AS C1, 1 AS C2 FROM "SYS"."MON_MODS$" "SYS_ALIAS_1") SAMPLESUBselect grantee#, privilege#, max(nvl(option$,0)) from objauth$ where obj#=:1 group by grantee#,privilege# order by grantee#select count(*) from undo$select count(*) from undo$select condition from cdef$ where rowid=:1select /*+  no_parallel_index(t, "WRH$_SYSMETRIC_HISTORY_INDEX")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"WRH$_SYSMETRIC_HISTORY_INDEX") */ count(*) as nrw,count(distinct sys_op_lbid(6475,'L',t.rowid)) as nlb,count(distinct hextoraw(sys_op_descend("DBID")||sys_op_descend("SNAP_ID")||sys_op_descend("INSTANCE_NUMBER")||sys_op_descend("GROUP_ID")||sys_op_descend("METRIC_ID")||sys_op_descend("BEGIN_TIME"))) as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."WRH$_SYSMETRIC_HISTORY" t where "DBID" is not null or "SNAP_ID" is not null or "INSTANCE_NUMBER" is not null or "GROUP_ID" is not null or "METRIC_ID" is not null or "BEGIN_TIME" is not nullSELECT /*+ index(u) */ COUNT(*) FROM SYS.USER$ U WHERE NAME = :B1 AND ROWNUM < 2select shared_pool_size_for_estimate s,          shared_pool_size_factor * 100 f,          estd_lc_load_time l, 0             from v$shared_pool_adviceSELECT /*+ ordered use_nl(o c cu h) index(u i_user1) index(o i_obj2)                index(ci_obj#) index(cu i_col_usage$)                index(h i_hh_obj#_intcol#) */ C.NAME COL_NAME, C.TYPE# COL_TYPE, C.CHARSETFORM COL_CSF, C.DEFAULT$ COL_DEF, C.NULL$ COL_NULL, C.PROPERTY COL_PROP, C.COL# COL_UNUM, C.INTCOL# COL_INUM, C.OBJ# COL_OBJ, C.SCALE COL_SCALE, H.BUCKET_CNT H_BCNT, (T.ROWCNT-H.NULL_CNT)/GREATEST(H.DISTCNT,1) H_PFREQ, C.LENGTH COL_LEN, CU.TIMESTAMP CU_TIME, CU.EQUALITY_PREDS CU_EP, CU.EQUIJOIN_PREDS CU_EJP, CU.RANGE_PREDS CU_RP, CU.LIKE_PREDS CU_LP, CU.NONEQUIJOIN_PREDS CU_NEJP, CU.NULL_PREDS NP FROM SYS.USER$ U, SYS.OBJ$ O, SYS.TAB$ T, SYS.COL$ C, SYS.COL_USAGE$ CU, SYS.HIST_HEAD$ H WHERE :B3 = '0' AND U.NAME = :B2 AND O.OWNER# = U.USER# AND O.TYPE# = 2 AND O.NAME = :B1 AND O.OBJ# = T.OBJ# AND O.OBJ# = C.OBJ# AND C.OBJ# = CU.OBJ#(+) AND C.INTCOL# = CU.INTCOL#(+) AND C.OBJ# = H.OBJ#(+) AND C.INTCOL# = H.INTCOL#(+) UNION ALL SELECT /*+ ordered use_nl(c) */ C.KQFCONAM COL_NAME, CSELECT /*+ ordered use_nl(o c cu h) index(u i_user1) index(o i_obj2)                index(ci_obj#) index(cu i_col_usage$)                index(h i_hh_obj#_intcol#) */ C.NAME COL_NAME, C.TYPE# COL_TYPE, C.CHARSETFORM COL_CSF, C.DEFAULT$ COL_DEF, C.NULL$ COL_NULL, C.PROPERTY COL_PROP, C.COL# COL_UNUM, C.INTCOL# COL_INUM, C.OBJ# COL_OBJ, C.SCALE COL_SCALE, H.BUCKET_CNT H_BCNT, (T.ROWCNT-H.NULL_CNT)/GREATEST(H.DISTCNT,1) H_PFREQ, C.LENGTH COL_LEN, CU.TIMESTAMP CU_TIME, CU.EQUALITY_PREDS CU_EP, CU.EQUIJOIN_PREDS CU_EJP, CU.RANGE_PREDS CU_RP, CU.LIKE_PREDS CU_LP, CU.NONEQUIJOIN_PREDS CU_NEJP, CU.NULL_PREDS NP FROM SYS.USER$ U, SYS.OBJ$ O, SYS.TAB$ T, SYS.COL$ C, SYS.COL_USAGE$ CU, SYS.HIST_HEAD$ H WHERE :B3 = '0' AND U.NAME = :B2 AND O.OWNER# = U.USER# AND O.TYPE# = 2 AND O.NAME = :B1 AND O.OBJ# = T.OBJ# AND O.OBJ# = C.OBJ# AND C.OBJ# = CU.OBJ#(+) AND C.INTCOL# = CU.INTCOL#(+) AND C.OBJ# = H.OBJ#(+) AND C.INTCOL# = H.INTCOL#(+) UNION ALL SELECT /*+ ordered use_nl(c) */ C.KQFCONAM COL_NAME, CSELECT /*+ ordered use_nl(o c cu h) index(u i_user1) index(o i_obj2)                index(ci_obj#) index(cu i_col_usage$)                index(h i_hh_obj#_intcol#) */ C.NAME COL_NAME, C.TYPE# COL_TYPE, C.CHARSETFORM COL_CSF, C.DEFAULT$ COL_DEF, C.NULL$ COL_NULL, C.PROPERTY COL_PROP, C.COL# COL_UNUM, C.INTCOL# COL_INUM, C.OBJ# COL_OBJ, C.SCALE COL_SCALE, H.BUCKET_CNT H_BCNT, (T.ROWCNT-H.NULL_CNT)/GREATEST(H.DISTCNT,1) H_PFREQ, C.LENGTH COL_LEN, CU.TIMESTAMP CU_TIME, CU.EQUALITY_PREDS CU_EP, CU.EQUIJOIN_PREDS CU_EJP, CU.RANGE_PREDS CU_RP, CU.LIKE_PREDS CU_LP, CU.NONEQUIJOIN_PREDS CU_NEJP, CU.NULL_PREDS NP FROM SYS.USER$ U, SYS.OBJ$ O, SYS.TAB$ T, SYS.COL$ C, SYS.COL_USAGE$ CU, SYS.HIST_HEAD$ H WHERE :B3 = '0' AND U.NAME = :B2 AND O.OWNER# = U.USER# AND O.TYPE# = 2 AND O.NAME = :B1 AND O.OBJ# = T.OBJ# AND O.OBJ# = C.OBJ# AND C.OBJ# = CU.OBJ#(+) AND C.INTCOL# = CU.INTCOL#(+) AND C.OBJ# = H.OBJ#(+) AND C.INTCOL# = H.INTCOL#(+) UNION ALL SELECT /*+ ordered use_nl(c) */ C.KQFCONAM COL_NAME, Cselect /*+  no_parallel_index(t, "I_SCHEDULER_JOB4")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_SCHEDULER_JOB4") */ count(*) as nrw,count(distinct sys_op_lbid(5928,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."SCHEDULER$_JOB" t where "SYS_NC00056$" is not nullselect /*+  no_parallel_index(t, "I_SCHEDULER_JOB4")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_SCHEDULER_JOB4") */ count(*) as nrw,count(distinct sys_op_lbid(5928,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."SCHEDULER$_JOB" t where "SYS_NC00056$" is not nulldelete from WRH$_PERSISTENT_QUEUES tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from opqtype$ where obj#=:1 declare     total_blocks number := 0;   begin     select nvl(sum(d.blocks), 0) into total_blocks       from x$kewx_segments d,            (select distinct o1.segment_name name from x$kewx_segments o1             where o1.segment_name like 'LOGMNR%' and                   o1.segment_name not like 'LOGMNRT%'             union all             select distinct o2.lob_name name from x$kewx_lobs o2             where o2.table_name like 'LOGMNR%' and                   o2.table_name not like 'LOGMNRT%' ) s       where (d.owner = 'SYS' or d.owner = 'SYSTEM') and             (d.segment_name = s.name );     :1 := total_blocks;   end;/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("AUTO_TASKID")),to_char(substrb(dump(min("AUTO_TASKID"),16,0,32),1,120)),to_char(substrb(dump(max("AUTO_TASKID"),16,0,32),1,120)),to_char(count("SNAPID")),to_char(substrb(dump(min("SNAPID"),16,0,32),1,120)),to_char(substrb(dump(max("SNAPID"),16,0,32),1,120)),to_char(count("SEGMENTS_SELECTED")),to_char(substrb(dump(min("SEGMENTS_SELECTED"),16,0,32),1,120)),to_char(substrb(dump(max("SEGMENTS_SELECTED"),16,0,32),1,120)),to_char(count("SEGMENTS_PROCESSED")),to_char(substrb(dump(min("SEGMENTS_PROCESSED"),16,0,32),1,120)),to_char(substrb(dump(max("SEGMENTS_PROCESSED"),16,0,32),1,120)),to_char(count("TABLESPACE_SELECTED")),to_char(substrb(dump(min("TABLESPACE_SELECTED"),16,0,32),1,120)),to_char(substrb(dump(max("TABLESPACE_SELECTED"),16,0,32),1,120)),to_char(count("TABLESPACE_PROCESSED")),to_char(suselect ts#,online$ from ts$ where name=:1delete from WRH$_ACTIVE_SESSION_HISTORY_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) SELECT O.SUBNAME PART FROM SYS.USER$ U, SYS.OBJ$ O, SYS.INDPART$ IP, PARTOBJ$ PO, IND$ I, TABPART$ TP WHERE U.NAME = :B2 AND O.NAME = :B1 AND O.TYPE# = 20 AND U.USER# = O.OWNER# AND IP.OBJ# = O.OBJ# AND IP.BO# = PO.OBJ# AND BITAND(PO.FLAGS, 1) = 1 AND I.BO# = TP.BO# AND I.OBJ# = IP.BO# AND IP.PART# = TP.PART# AND BITAND(TP.FLAGS, 32) = 32 UNION ALL SELECT O.SUBNAME PART FROM SYS.USER$ U, SYS.OBJ$ O, SYS.INDCOMPART$ IP, PARTOBJ$ PO, IND$ I, TABCOMPART$ TP WHERE U.NAME = :B2 AND O.NAME = :B1 AND O.TYPE# = 20 AND U.USER# = O.OWNER# AND IP.OBJ# = O.OBJ# AND IP.BO# = PO.OBJ# AND BITAND(PO.FLAGS, 1) = 1 AND I.BO# = TP.BO# AND I.OBJ# = IP.BO# AND IP.PART# = TP.PART# AND BITAND(TP.FLAGS, 32) = 32 delete from WRI$_SEGADV_CNTRLTAB where start_time < :1select max(procedure#) from procedureplsql$ where obj#=:1SELECT VERSION FROM V$INSTANCEdelete from WRH$_OSSTAT_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select /*+  no_parallel_index(t, "I_WRI$_OPTSTAT_H_ST")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_WRI$_OPTSTAT_H_ST") */ count(*) as nrw,count(distinct sys_op_lbid(478,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."WRI$_OPTSTAT_HISTGRM_HISTORY" t where "SYS_NC00014$" is not nullselect reason_id, object_id, subobject_id, internal_instance_number, time_suggested, context, reason_argument_1, reason_argument_2, reason_argument_3, reason_argument_4, reason_argument_5, action_argument_1, action_argument_2, action_argument_3, action_argument_4, action_argument_5, sequence_id, metric_value, instance_name from wri$_alert_outstanding where internal_instance_number > -2select reason_id, object_id, subobject_id, internal_instance_number, time_suggested, context, reason_argument_1, reason_argument_2, reason_argument_3, reason_argument_4, reason_argument_5, action_argument_1, action_argument_2, action_argument_3, action_argument_4, action_argument_5, sequence_id, metric_value, instance_name from wri$_alert_outstanding where internal_instance_number > -2SELECT ID FROM WWV_FLOW_SESSIONS$ WHERE LAST_CHANGED <= (SYSDATE - (:B2 /24)) AND (SECURITY_GROUP_ID = :B1 OR :B1 IS NULL OR SECURITY_GROUP_ID = 0) select /*+  no_parallel_index(t, "I_SCHEDULER_WINDOW1")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_SCHEDULER_WINDOW1") */ count(*) as nrw,count(distinct sys_op_lbid(5945,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."SCHEDULER$_WINDOW" t where "SYS_NC00022$" is not nullselect action# from trigger$ where obj# = :1select ee.ectx#, o.owner#, u.name, o.name, ee.num_rules, ee.num_boxes,  ee.ee_flags  from rule_set_ee$ ee, obj$ o, user$ u where ee.rs_obj# = :1 and  ee.ectx# = o.obj# and o.owner# = u.user#delete from WRH$_CURRENT_BLOCK_SERVER tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"OBJ#" val,count(*) cnt  from sys.ora_temp_1_ds_170008 t where "OBJ#" is not null  group by "OBJ#") order by valselect SUM(data_length) from all_tab_columns where table_name = 'LD'select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"SYS_NC00056$" val,count(*) cnt  from "SYS"."SCHEDULER$_JOB" t  where "SYS_NC00056$" is not null  group by "SYS_NC00056$") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"SYS_NC00056$" val,count(*) cnt  from "SYS"."SCHEDULER$_JOB" t  where "SYS_NC00056$" is not null  group by "SYS_NC00056$") order by valselect /*+  no_parallel_index(t, "WRM$_SNAPSHOT_PK")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"WRM$_SNAPSHOT_PK") */ count(*) as nrw,count(distinct sys_op_lbid(6622,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."WRM$_SNAPSHOT" t where "DBID" is not null or "SNAP_ID" is not null or "INSTANCE_NUMBER" is not nullselect /*+  no_parallel_index(t, "WRM$_SNAPSHOT_PK")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"WRM$_SNAPSHOT_PK") */ count(*) as nrw,count(distinct sys_op_lbid(6622,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."WRM$_SNAPSHOT" t where "DBID" is not null or "SNAP_ID" is not null or "INSTANCE_NUMBER" is not nullUPDATE KET$_CLIENT_TASKS     SET STATUS = CASE STATUS WHEN 13 THEN 2 ELSE STATUS END,         WINDOW_NAME = NULL,         CURR_JOB_NAME = NULL,         RETRY_COUNT = 0,         GOOD_COUNT = GOOD_COUNT + 1,         LT_JOB_LOG_ID = :log,         LG_JOB_LOG_ID = :log,         LG_PRIORITY = TASK_PRIORITY,         LT_TERM_CODE = 10,         LT_ERROR = 0,         LG_DATE = :end,         LT_DATE = :end,         LG_DURATION = :ela,         LG_CPU_TIME = :cpu,         LT_DURATION = :ela,         LT_CPU_TIME = :cpu,         MG_DURATION = ((MG_DURATION * GOOD_COUNT) + :ela)/(GOOD_COUNT+1),         MG_CPU_TIME = ((MG_CPU_TIME * GOOD_COUNT) + :cpu)/(GOOD_COUNT+1)   WHERE CLIENT_ID = :cid     AND OPERATION_ID = :oid     AND TARGET_TYPE = :tgt     AND TARGET_NAME = :tgnUPDATE KET$_CLIENT_TASKS     SET STATUS = CASE STATUS WHEN 13 THEN 2 ELSE STATUS END,         WINDOW_NAME = NULL,         CURR_JOB_NAME = NULL,         RETRY_COUNT = 0,         GOOD_COUNT = GOOD_COUNT + 1,         LT_JOB_LOG_ID = :log,         LG_JOB_LOG_ID = :log,         LG_PRIORITY = TASK_PRIORITY,         LT_TERM_CODE = 10,         LT_ERROR = 0,         LG_DATE = :end,         LT_DATE = :end,         LG_DURATION = :ela,         LG_CPU_TIME = :cpu,         LT_DURATION = :ela,         LT_CPU_TIME = :cpu,         MG_DURATION = ((MG_DURATION * GOOD_COUNT) + :ela)/(GOOD_COUNT+1),         MG_CPU_TIME = ((MG_CPU_TIME * GOOD_COUNT) + :cpu)/(GOOD_COUNT+1)   WHERE CLIENT_ID = :cid     AND OPERATION_ID = :oid     AND TARGET_TYPE = :tgt     AND TARGET_NAME = :tgnselect u.name,o.name from tab$ t,user$ u,obj$ o where t.bobj#=:1 and t.obj#=o.obj# and o.owner#=u.user#select q.eventid, q.table_objno from system.aq$_queues q select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */max(substrb("CURR_JOB_NAME",1,32)) val,count(*) cnt  from "SYS"."KET$_CLIENT_TASKS" t  where substrb("CURR_JOB_NAME",1,32) is not null  group by nlssort(substrb("CURR_JOB_NAME",1,32), 'NLS_SORT = binary')) order by nlssort(val,'NLS_SORT = binary')select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */max(substrb("CURR_JOB_NAME",1,32)) val,count(*) cnt  from "SYS"."KET$_CLIENT_TASKS" t  where substrb("CURR_JOB_NAME",1,32) is not null  group by nlssort(substrb("CURR_JOB_NAME",1,32), 'NLS_SORT = binary')) order by nlssort(val,'NLS_SORT = binary')select count(*), sum(blocks) from x$kewx_segments  where segment_name like 'SCHEDULER$%'SELECT COUNT(*), SUM(blocks)    FROM x$kewx_segments   WHERE owner = 'SYS'     AND segment_name LIKE 'KET$%'delete /*+ dynamic_sampling(4) */ from sys.wri$_optstat_aux_history          where savtime < :1 and rownum <= NVL(:2, rownum)select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"LAST_ASH_SAMPLE_ID" val,count(*) cnt  from "SYS"."WRM$_DATABASE_INSTANCE" t  where "LAST_ASH_SAMPLE_ID" is not null  group by "LAST_ASH_SAMPLE_ID") order by valdelete from WRH$_MUTEX_SLEEP tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"INTCOL#" val,count(*) cnt  from sys.ora_temp_1_ds_170008 t where "INTCOL#" is not null  group by "INTCOL#") order by valDECLARE job BINARY_INTEGER := :job;  next_date TIMESTAMP WITH TIME ZONE := :mydate;  broken BOOLEAN := FALSE;  job_name VARCHAR2(30) := :job_name;  job_subname VARCHAR2(30) := :job_subname;  job_owner VARCHAR2(30) := :job_owner;  job_start TIMESTAMP WITH TIME ZONE := :job_start;  job_scheduled_start TIMESTAMP WITH TIME ZONE := :job_scheduled_start;  window_start TIMESTAMP WITH TIME ZONE := :window_start;  window_end TIMESTAMP WITH TIME ZONE := :window_end;  chain_id VARCHAR2(14) :=  :chainid;  credential_owner varchar2(30) := :credown;  credential_name  varchar2(30) := :crednam;  destination_owner varchar2(30) := :destown;  destination_name varchar2(30) := :destnam;  job_dest_id varchar2(14) := :jdestid;  log_id number := :log_id;  BEGIN  begin if prvt_advisor.is_pack_enabled('DIAGNOSTIC') then dbsnmp.bsln_internal.maintain_statistics; end if; end;  :mydate := next_date; IF broken THEN :b := 1; ELSE :b := 0; END IF; END; SELECT /* OPT_DYN_SAMP */ /*+ ALL_ROWS IGNORE_WHERE_CLAUSE NO_PARALLEL(SAMPLESUB) opt_param('parallel_execution_enabled', 'false') NO_PARALLEL_INDEX(SAMPLESUB) NO_SQL_TUNE */ NVL(SUM(C1),0), NVL(SUM(C2),0) FROM (SELECT /*+ IGNORE_WHERE_CLAUSE NO_PARALLEL("I") FULL("I") NO_PARALLEL_INDEX("I") */ 1 AS C1, CASE WHEN "I"."TYPE#"=3 AND BITAND("I"."FLAGS",5145)=0 THEN 1 ELSE 0 END AS C2 FROM "SYS"."IND$" SAMPLE BLOCK (3.039216 , 1) SEED (1) "I") SAMPLESUB/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("DBID")),to_char(substrb(dump(min("DBID"),16,0,32),1,120)),to_char(substrb(dump(max("DBID"),16,0,32),1,120)),to_char(count("INSTANCE_NUMBER")),to_char(substrb(dump(min("INSTANCE_NUMBER"),16,0,32),1,120)),to_char(substrb(dump(max("INSTANCE_NUMBER"),16,0,32),1,120)),to_char(count("STARTUP_TIME")),to_char(substrb(dump(min("STARTUP_TIME"),16,0,32),1,120)),to_char(substrb(dump(max("STARTUP_TIME"),16,0,32),1,120)),to_char(count("PARALLEL")),to_char(substrb(dump(min("PARALLEL"),16,0,32),1,120)),to_char(substrb(dump(max("PARALLEL"),16,0,32),1,120)),to_char(count("VERSION")),to_char(substrb(dump(min("VERSION"),16,0,32),1,120)),to_char(substrb(dump(max("VERSION"),16,0,32),1,120)),to_char(count("DB_NAME")),to_char(substrb(dump(min("DB_NAME"),16,0,32),1,120)),to_char(substrb(dump(max("DB_NAME"),16,0,32),select SUM(data_length) from all_tab_columns where table_name = 'REGIONS'SELECT COUNT(DISTINCT(OBJ#)) FROM SYS.WRH$_SEG_STAT WHERE SNAP_ID > :B1 AND TABLE_SCANS_DELTA != 0SELECT T.FLAGS, T.OBJNO, T.SORT_COLS FROM SYSTEM.AQ$_QUEUE_TABLES T WHERE T.SCHEMA = :B2 AND T.NAME = :B1 SELECT CASE WHEN BITAND(FLAGS,16) = 0 THEN NULL ELSE ANALYZETIME END, BITAND(FLAGS,512) FROM SYS.TAB$ T WHERE T.OBJ# = :B1 select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"CLIENT_ID" val,count(*) cnt  from "SYS"."KET$_CLIENT_TASKS" t  where "CLIENT_ID" is not null  group by "CLIENT_ID") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"CLIENT_ID" val,count(*) cnt  from "SYS"."KET$_CLIENT_TASKS" t  where "CLIENT_ID" is not null  group by "CLIENT_ID") order by valupdate con$ set con#=:3,spare1=:4 where owner#=:1 and name=:2DELETE FROM sys.sumdelta$ sd   WHERE sd.tableobj# = :1delete from WRH$_SGA tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select OBJOID,  CLSOID, RUNTIME, PRI, JOBTYPE,  SCHLIM,  WT, INST,  RUNNOW, ENQ_SCHLIM from ( select a.obj# OBJOID, a.class_oid CLSOID,    decode(bitand(a.flags, 16384), 0, a.next_run_date,           a.last_enabled_time) RUNTIME,    (2*a.priority +     decode(bitand(a.job_status, 4), 0, 0,            decode(a.running_instance, :1, -1, 1))) PRI,    1 JOBTYPE,    decode(a.schedule_limit, NULL,           decode(bitand(a.flags, 4194304), 4194304, p.schedule_limit, NULL),           a.schedule_limit) SCHLIM,    a.job_weight WT,    decode(a.running_instance, NULL, 0, a.running_instance) INST,    decode(bitand(a.flags, 16384), 0, 0, 1) RUNNOW,    decode(bitand(a.job_status, 8388608), 0, 0, 1) ENQ_SCHLIM  from sys.scheduler$_job a, sys.scheduler$_program p, v$database v,                      v$instance i  where a.program_oid = p.obj#(+)    and bitand(a.job_status, 515) = 1    and bitand(a.flags, 1048576) = 0    and ((bitand(a.flags, 134217728 + 268435456) = 0) or         (bitand(a.job_status, 1select OBJOID,  CLSOID, RUNTIME, PRI, JOBTYPE,  SCHLIM,  WT, INST,  RUNNOW, ENQ_SCHLIM from ( select a.obj# OBJOID, a.class_oid CLSOID,    decode(bitand(a.flags, 16384), 0, a.next_run_date,           a.last_enabled_time) RUNTIME,    (2*a.priority +     decode(bitand(a.job_status, 4), 0, 0,            decode(a.running_instance, :1, -1, 1))) PRI,    1 JOBTYPE,    decode(a.schedule_limit, NULL,           decode(bitand(a.flags, 4194304), 4194304, p.schedule_limit, NULL),           a.schedule_limit) SCHLIM,    a.job_weight WT,    decode(a.running_instance, NULL, 0, a.running_instance) INST,    decode(bitand(a.flags, 16384), 0, 0, 1) RUNNOW,    decode(bitand(a.job_status, 8388608), 0, 0, 1) ENQ_SCHLIM  from sys.scheduler$_job a, sys.scheduler$_program p, v$database v,                      v$instance i  where a.program_oid = p.obj#(+)    and bitand(a.job_status, 515) = 1    and bitand(a.flags, 1048576) = 0    and ((bitand(a.flags, 134217728 + 268435456) = 0) or         (bitand(a.job_status, 1select OBJOID,  CLSOID, RUNTIME, PRI, JOBTYPE,  SCHLIM,  WT, INST,  RUNNOW, ENQ_SCHLIM from ( select a.obj# OBJOID, a.class_oid CLSOID,    decode(bitand(a.flags, 16384), 0, a.next_run_date,           a.last_enabled_time) RUNTIME,    (2*a.priority +     decode(bitand(a.job_status, 4), 0, 0,            decode(a.running_instance, :1, -1, 1))) PRI,    1 JOBTYPE,    decode(a.schedule_limit, NULL,           decode(bitand(a.flags, 4194304), 4194304, p.schedule_limit, NULL),           a.schedule_limit) SCHLIM,    a.job_weight WT,    decode(a.running_instance, NULL, 0, a.running_instance) INST,    decode(bitand(a.flags, 16384), 0, 0, 1) RUNNOW,    decode(bitand(a.job_status, 8388608), 0, 0, 1) ENQ_SCHLIM  from sys.scheduler$_job a, sys.scheduler$_program p, v$database v,                      v$instance i  where a.program_oid = p.obj#(+)    and bitand(a.job_status, 515) = 1    and bitand(a.flags, 1048576) = 0    and ((bitand(a.flags, 134217728 + 268435456) = 0) or         (bitand(a.job_status, 1delete from WRH$_FILESTATXS_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id))  SELECT ext_username FROM sys.user$ where name = :1 select SUM(column_length) from all_ind_columns where table_name = 'EMPLOYEES'insert into sys.scheduler$_event_log  (log_id, log_date, type#, name, owner, operation, status, user_name,   client_id, guid, dbid, additional_info, destination, credential, class_id,   flags)   values  (:1, SYSTIMESTAMP,   :2, :3, :4, :5, :6, :7, :8, :9, NULL, :10, :11, :12, :13, :14)insert into sys.scheduler$_event_log  (log_id, log_date, type#, name, owner, operation, status, user_name,   client_id, guid, dbid, additional_info, destination, credential, class_id,   flags)   values  (:1, SYSTIMESTAMP,   :2, :3, :4, :5, :6, :7, :8, :9, NULL, :10, :11, :12, :13, :14)insert into sys.scheduler$_event_log  (log_id, log_date, type#, name, owner, operation, status, user_name,   client_id, guid, dbid, additional_info, destination, credential, class_id,   flags)   values  (:1, SYSTIMESTAMP,   :2, :3, :4, :5, :6, :7, :8, :9, NULL, :10, :11, :12, :13, :14)insert into sys.scheduler$_event_log  (log_id, log_date, type#, name, owner, operation, status, user_name,   client_id, guid, dbid, additional_info, destination, credential, class_id,   flags)   values  (:1, SYSTIMESTAMP,   :2, :3, :4, :5, :6, :7, :8, :9, NULL, :10, :11, :12, :13, :14)select max(snap_id) from wrm$_snapshot  where dbid = :dbid and     (cast(SYSTIMESTAMP as TIMESTAMP) - end_interval_time) > :retention and     snap_id < :max_snapselect last_sample_date_num, last_sample_date, total_samples from WRI$_DBU_USAGE_SAMPLE where dbid     = :dbid and version  = :versionselect num_rows FROM dba_tables where table_name = 'GATO'select con#,type#,condlength,intcols,robj#,rcon#,match#,refact,nvl(enabled,0),rowid,cols,nvl(defer,0),mtime,nvl(spare1,0),spare2,spare3 from cdef$ where obj#=:1select con#,type#,condlength,intcols,robj#,rcon#,match#,refact,nvl(enabled,0),rowid,cols,nvl(defer,0),mtime,nvl(spare1,0),spare2,spare3 from cdef$ where obj#=:1delete from icoldep$ where obj# in (select obj# from ind$ where bo#=:1)select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */max(substrb("NAME",1,32)) val,count(*) cnt  from "SYS"."SCHEDULER$_EVENT_LOG" t  where substrb("NAME",1,32) is not null  group by nlssort(substrb("NAME",1,32), 'NLS_SORT = binary')) order by nlssort(val,'NLS_SORT = binary')select plan, group_or_subplan, is_subplan,description, mandatory,mgmt_p1, mgmt_p2, mgmt_p3, mgmt_p4, mgmt_p5, mgmt_p6, mgmt_p7, mgmt_p8,active_sess_pool_p1, queueing_p1, parallel_degree_limit_p1, switch_group, switch_for_call, switch_time, switch_estimate,max_est_exec_time, switch_io_megabytes, switch_io_reqs, undo_pool, max_idle_time, max_idle_blocker_time, max_utilization_limit, max_active_sess_target_p1, parallel_queue_timeout from resource_plan_directive$ where obj#=:1 and status = 'ACTIVE'delete from WRH$_CLUSTER_INTERCON tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id))   UPDATE wrh$_seg_stat_obj ob      SET (snap_id, owner, object_name, subobject_name, tablespace_name,           object_type, index_type, base_obj#, base_object_name,           base_object_owner) =       (SELECT so.snap_id + 1,               so.oj.owner_name, so.oj.object_name,               so.oj.subobject_name, so.oj.tablespace_name, so.oj.object_type,               index_type, coalesce(io.base_obj#, so.base_obj#),               coalesce(io.base_object_name, so.base_object_name),              coalesce(io.base_object_owner, so.base_object_owner)          FROM            (SELECT dbid, ts#, obj#, dataobj#, object_type, base_obj#,                    base_object_name, base_object_owner, snap_id,                    dbms_swrf_internal.awr_get_object_info(                      ts#, obj#, dataobj#,                      AWR_OBJECT_INFO_TYPE(owner, object_name, subobject_name,                                           tablespace_name, object_type)) oj               FROM wrh$_seg_stat_obj) so      UPDATE wrh$_seg_stat_obj ob      SET (snap_id, owner, object_name, subobject_name, tablespace_name,           object_type, index_type, base_obj#, base_object_name,           base_object_owner) =       (SELECT so.snap_id + 1,               so.oj.owner_name, so.oj.object_name,               so.oj.subobject_name, so.oj.tablespace_name, so.oj.object_type,               index_type, coalesce(io.base_obj#, so.base_obj#),               coalesce(io.base_object_name, so.base_object_name),              coalesce(io.base_object_owner, so.base_object_owner)          FROM            (SELECT dbid, ts#, obj#, dataobj#, object_type, base_obj#,                    base_object_name, base_object_owner, snap_id,                    dbms_swrf_internal.awr_get_object_info(                      ts#, obj#, dataobj#,                      AWR_OBJECT_INFO_TYPE(owner, object_name, subobject_name,                                           tablespace_name, object_type)) oj               FROM wrh$_seg_stat_obj) so    delete from WRH$_SYSTEM_EVENT_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select snap_interval, retention,most_recent_snap_time, most_recent_snap_id, status_flag, most_recent_purge_time, most_recent_split_id, most_recent_split_time, mrct_snap_time_num, mrct_purge_time_num, snapint_num, retention_num, swrf_version, registration_status, mrct_baseline_id, topnsql, mrct_bltmpl_id from wrm$_wr_control where dbid = :dbidselect min(minbkt),maxbkt,substrb(dump(min(val),16,0,32),1,120) minval,substrb(dump(max(val),16,0,32),1,120) maxval,sum(rep) sumrep, sum(repsq) sumrepsq, max(rep) maxrep, count(*) bktndv, sum(case when rep=1 then 1 else 0 end) unqrep from (select val,min(bkt) minbkt, max(bkt) maxbkt, count(val) rep, count(val)*count(val) repsq from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"DATAOBJ#" val, ntile(254) over (order by "DATAOBJ#") bkt  from "SYS"."WRH$_SEG_STAT" t  where "DATAOBJ#" is not null) group by val) group by maxbkt order by maxbktselect tc.type#,tc.intcol#,tc.position#,c.type#, c.length,c.scale,c.precision#,c.charsetid,c.charsetform, decode(bitand(c.property,8388608),8388608, c.spare3, 0) from triggercol$ tc,col$ c, trigger$ tr where tc.obj#=:1 and tc.intcol#=c.intcol# and tr.obj# = tc.obj# and (bitand(tr.property,32) != 32 or bitand(tc.type#,20) = 20) and (   c.obj#=:2 and (bitand(tc.type#, 1024) = :3 or tc.type# = 0)      or c.obj#=:4 and bitand(tc.type#, 1024) = :5      or c.obj#=:6 and tc.type# = 0 and tc.position# = 0) union select type#,intcol#,position#,69,0,0,0,0,0,0 from triggercol$ where obj#=:7 and intcol#=1001 union select tc.type#,tc.intcol#,tc.position#,121,0,0,0,0,0,0 from triggercol$ tc,trigger$ tr where tr.obj# = tc.obj# and bitand(tr.property,32) = 32 and tc.obj# = :8 and bitand(tc.type#,20) != 20select /*+  no_parallel_index(t, "SMON_SCN_TIME_TIM_IDX")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"SMON_SCN_TIME_TIM_IDX") */ count(*) as nrw,count(distinct sys_op_lbid(271,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."SMON_SCN_TIME" t where "TIME_MP" is not nullinsert into obj$(owner#,name,namespace,obj#,type#,ctime,mtime,stime,status,remoteowner,linkname,subname,dataobj#,flags,oid$,spare1,spare2,spare3) values(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15,:16,:17,:18)SELECT OWNER, SEGMENT_NAME, PARTITION_NAME, SEGMENT_TYPE, TABLESPACE_NAME, TABLESPACE_ID FROM SYS_DBA_SEGS WHERE SEGMENT_OBJD = :B1 AND SEGMENT_TYPE <> 'ROLLBACK' AND SEGMENT_TYPE <> 'TYPE2 UNDO' AND SEGMENT_TYPE <> 'DEFERRED ROLLBACK' AND SEGMENT_TYPE <> 'TEMPORARY' AND SEGMENT_TYPE <> 'CACHE' AND SEGMENT_TYPE <> 'SPACE HEADER' AND SEGMENT_TYPE <> 'UNDEFINED' AND TABLESPACE_NAME NOT IN ('SYSAUX' , 'SYSTEM') SELECT OWNER, SEGMENT_NAME, PARTITION_NAME, SEGMENT_TYPE, TABLESPACE_NAME, TABLESPACE_ID FROM SYS_DBA_SEGS WHERE SEGMENT_OBJD = :B1 AND SEGMENT_TYPE <> 'ROLLBACK' AND SEGMENT_TYPE <> 'TYPE2 UNDO' AND SEGMENT_TYPE <> 'DEFERRED ROLLBACK' AND SEGMENT_TYPE <> 'TEMPORARY' AND SEGMENT_TYPE <> 'CACHE' AND SEGMENT_TYPE <> 'SPACE HEADER' AND SEGMENT_TYPE <> 'UNDEFINED' AND TABLESPACE_NAME NOT IN ('SYSAUX' , 'SYSTEM') UPDATE WRH$_SEG_STAT_OBJ SET snap_id = :lah_snap_id  WHERE dbid = :dbid    AND (OBJ#, DATAOBJ#) IN (SELECT NUM1_KEWRATTR, NUM2_KEWRATTR FROM X$KEWRATTRSTALE)select con#,spare1 from con$ where owner#=:1 and name=:2select min(minbkt),maxbkt,substrb(dump(min(val),16,0,32),1,120) minval,substrb(dump(max(val),16,0,32),1,120) maxval,sum(rep) sumrep, sum(repsq) sumrepsq, max(rep) maxrep, count(*) bktndv, sum(case when rep=1 then 1 else 0 end) unqrep from (select val,min(bkt) minbkt, max(bkt) maxbkt, count(val) rep, count(val)*count(val) repsq from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"LOG_ID" val, ntile(254) over (order by "LOG_ID") bkt  from "SYS"."SCHEDULER$_EVENT_LOG" t  where "LOG_ID" is not null) group by val) group by maxbkt order by maxbktselect SUM(column_length) from all_ind_columns where table_name = 'RT'SELECT VALUE V FROM WWV_FLOW_PLATFORM_PREFS WHERE NAME = :B1 delete from WRH$_SERVICE_WAIT_CLASS_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select A.OBJNUM, decode(bitand(A.FLGS,549755813888),0,0,1) from  (select obj# OBJNUM, class_oid CLSOID, flags FLGS from sys.scheduler$_job   union all   select obj#, class_oid, flags from sys.scheduler$_lightweight_job) A  where A.CLSOID = :1 and bitand(A.FLGS,137438953472) = 0 order by A.OBJNUMselect A.OBJNUM, decode(bitand(A.FLGS,549755813888),0,0,1) from  (select obj# OBJNUM, class_oid CLSOID, flags FLGS from sys.scheduler$_job   union all   select obj#, class_oid, flags from sys.scheduler$_lightweight_job) A  where A.CLSOID = :1 and bitand(A.FLGS,137438953472) = 0 order by A.OBJNUMselect /*+  no_parallel_index(t, "I_WRI$_OPTSTAT_IND_ST")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_WRI$_OPTSTAT_IND_ST") */ count(*) as nrw,count(distinct sys_op_lbid(470,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."WRI$_OPTSTAT_IND_HISTORY" t where "SYS_NC00023$" is not nullselect /*+  no_parallel_index(t, "I_UNDO1")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_UNDO1") */ count(*) as nrw,count(distinct sys_op_lbid(34,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."UNDO$" t where "US#" is not nullUPDATE SYS.WRI$_SEGADV_OBJLIST SET STATUS = 'NEW' WHERE STATUS = 'BEING_PROCESSED'select bl.baseline_id, bl.start_snap_id, min(s1.begin_interval_time), bl.end_snap_id, max(s2.end_interval_time) from wrm$_baseline bl, wrm$_snapshot s1, wrm$_snapshot s2 where (bl.start_snap_id = s1.snap_id) and (bl.end_snap_id = s2.snap_id) and (bl.dbid = :dbid) and (bl.dbid = s1.dbid) and (bl.dbid = s2.dbid) and (bl.baseline_id != 0) group by bl.baseline_id, bl.start_snap_id, bl.end_snap_idselect count(*) from sys.aq_event_tabledelete from WRH$_SERVICE_STAT_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) update wrm$_snapshot tab set status = 2  where (:beg_snap <= tab.snap_id and tab.snap_id <= :end_snap         and tab.dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.snap_id >= b.start_snap_id)                          and (tab.snap_id <= b.end_snap_id)                          and (b.dbid = :dbid2))DELETE FROM sys.sumpartlog$ sp   WHERE sp.bo# = :1select action, number_of_args, comments, flags, schedule_limit,         priority, job_weight, max_runs, max_failures,         max_run_duration, nls_env, env  from sys.scheduler$_program  where obj# = :1select obj#, prgoid, creation_time, mod_time, spec_time, flags    from sys.scheduler$_lwjob_obj where userid = :1 and name = :2 and    subname is nullselect case when (bitand(u.spare1, 16) = 0) then         0        when (u.type# = 2) then         (u.spare2)        else         1        end from obj$ o, user$ u where o.obj# = :1 and o.owner# = u.user#select file#, block#, ts#, blocks from seg$ where type# = 3select count(*) from edition$SELECT COUNT(DISTINCT(OBJ#)) FROM SYS.WRH$_SEG_STAT WHERE SNAP_ID > :B1 AND CHAIN_ROW_EXCESS_DELTA != 0delete from WRH$_BUFFERED_SUBSCRIBERS tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from idl_char$ where obj#=:1 and part=:2select max(procedure#) from procedurec$ where obj#=:1select SUM(column_length) from all_ind_columns where table_name = 'ACER'select userid, name, subname, flags    from sys.scheduler$_lwjob_obj where obj# = :1insert into wrh$_sessmetric_history     (snap_id, dbid, instance_number,      begin_time, end_time, sessid, serial#,      intsize, group_id, metric_id, value)  select      :snap_id, :dbid, :instance_number,      begtime, endtime, eid, eidsq, intsize_csec,      groupid, metricid, value  from x$kewmdrmv where groupid = 4/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("EST_UNDO_RATE")),to_char(substrb(dump(min("EST_UNDO_RATE"),16,0,32),1,120)),to_char(substrb(dump(max("EST_UNDO_RATE"),16,0,32),1,120)),to_char(count("RETRY_COUNT")),to_char(substrb(dump(min("RETRY_COUNT"),16,0,32),1,120)),to_char(substrb(dump(max("RETRY_COUNT"),16,0,32),1,120)),to_char(count("GOOD_COUNT")),to_char(substrb(dump(min("GOOD_COUNT"),16,0,32),1,120)),to_char(substrb(dump(max("GOOD_COUNT"),16,0,32),1,120)),to_char(count("LG_JOB_LOG_ID")),to_char(substrb(dump(min("LG_JOB_LOG_ID"),16,0,32),1,120)),to_char(substrb(dump(max("LG_JOB_LOG_ID"),16,0,32),1,120)),to_char(count("LG_DATE")),to_char(substrb(dump(min("LG_DATE"),16,0,32),1,120)),to_char(substrb(dump(max("LG_DATE"),16,0,32),1,120)),to_char(count("LG_PRIORITY")),to_char(substrb(dump(min("LG_PRIORITY"),16,0,32),1,120)),to_char(subst/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("EST_UNDO_RATE")),to_char(substrb(dump(min("EST_UNDO_RATE"),16,0,32),1,120)),to_char(substrb(dump(max("EST_UNDO_RATE"),16,0,32),1,120)),to_char(count("RETRY_COUNT")),to_char(substrb(dump(min("RETRY_COUNT"),16,0,32),1,120)),to_char(substrb(dump(max("RETRY_COUNT"),16,0,32),1,120)),to_char(count("GOOD_COUNT")),to_char(substrb(dump(min("GOOD_COUNT"),16,0,32),1,120)),to_char(substrb(dump(max("GOOD_COUNT"),16,0,32),1,120)),to_char(count("LG_JOB_LOG_ID")),to_char(substrb(dump(min("LG_JOB_LOG_ID"),16,0,32),1,120)),to_char(substrb(dump(max("LG_JOB_LOG_ID"),16,0,32),1,120)),to_char(count("LG_DATE")),to_char(substrb(dump(min("LG_DATE"),16,0,32),1,120)),to_char(substrb(dump(max("LG_DATE"),16,0,32),1,120)),to_char(count("LG_PRIORITY")),to_char(substrb(dump(min("LG_PRIORITY"),16,0,32),1,120)),to_char(substdelete from WRH$_SQL_PLAN tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) SELECT P.VALCHAR FROM SYS.OPTSTAT_USER_PREFS$ P WHERE P.OBJ#=:B2 AND P.PNAME=:B1 delete /*+ dynamic_sampling(4) */ from sys.wri$_optstat_ind_history h        where savtime < :1 and rownum <= NVL(:2, rownum)SELECT sum(bytes)  FROM dba_data_files  WHERE tablespace_name = 'SYSAUX'delete from WRH$_BUFFER_POOL_STATISTICS tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select /*+  no_parallel_index(t, "RECENT_RESOURCE_INCARNATIONS$P")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"RECENT_RESOURCE_INCARNATIONS$P") */ count(*) as nrw,count(distinct sys_op_lbid(5781,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(sys_op_lbid(5781,'O',"RESOURCE_ID"),1) as clf from "SYS"."RECENT_RESOURCE_INCARNATIONS$" t where "RESOURCE_TYPE" is not null or "DB_DOMAIN" is not null or "DB_UNIQUE_NAME" is not null or "INSTANCE_NAME" is not null or "INCARNATION" is not null or "STARTUP_TIME" is not nullselect name,intcol#,segcol#,type#,length,nvl(precision#,0),decode(type#,2,nvl(scale,-127/*MAXSB1MINAL*/),178,scale,179,scale,180,scale,181,scale,182,scale,183,scale,231,scale,0),null$,fixedstorage,nvl(deflength,0),default$,rowid,col#,property, nvl(charsetid,0),nvl(charsetform,0),spare1,spare2,nvl(spare3,0) from col$ where obj#=:1 order by intcol#select name,intcol#,segcol#,type#,length,nvl(precision#,0),decode(type#,2,nvl(scale,-127/*MAXSB1MINAL*/),178,scale,179,scale,180,scale,181,scale,182,scale,183,scale,231,scale,0),null$,fixedstorage,nvl(deflength,0),default$,rowid,col#,property, nvl(charsetid,0),nvl(charsetform,0),spare1,spare2,nvl(spare3,0) from col$ where obj#=:1 order by intcol#select name,intcol#,segcol#,type#,length,nvl(precision#,0),decode(type#,2,nvl(scale,-127/*MAXSB1MINAL*/),178,scale,179,scale,180,scale,181,scale,182,scale,183,scale,231,scale,0),null$,fixedstorage,nvl(deflength,0),default$,rowid,col#,property, nvl(charsetid,0),nvl(charsetform,0),spare1,spare2,nvl(spare3,0) from col$ where obj#=:1 order by intcol#UPDATE KET$_AUTOTASK_STATUS     SET ABA_STATE = :1,         ABA_STATE_TIME = :3   WHERE DUMMY_KEY = 99999UPDATE KET$_AUTOTASK_STATUS     SET ABA_STATE = :1,         ABA_STATE_TIME = :3   WHERE DUMMY_KEY = 99999select name from service$ where lower(network_name) = lower(:1) and deletion_date is nullSELECT ONLINE$ FROM TS$ WHERE NAME = 'SYSAUX'select 1 from sys.streams$_prepare_object po, sys.obj$ o where po.obj#= :1 and po.obj#=o.obj# and bitand(o.flags,128) = 0select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"SNAP_FLAG" val,count(*) cnt  from "SYS"."WRM$_SNAPSHOT" t  where "SNAP_FLAG" is not null  group by "SNAP_FLAG") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"SNAP_FLAG" val,count(*) cnt  from "SYS"."WRM$_SNAPSHOT" t  where "SNAP_FLAG" is not null  group by "SNAP_FLAG") order by valselect local_tran_id, global_tran_fmt, global_oracle_id, global_foreign_id,        state, status, heuristic_dflt,        session_vector, reco_vector, 3600*24*(sysdate-reco_time),        3600*24*(sysdate-nvl(heuristic_time,fail_time)), global_commit#,        type#   from pending_trans$  where session_vector != '00000000'select   vector_index, vector from   WRI$_SCH_VOTES where   schedule_id  = :id and   vector_index = :vidxselect   vector_index, vector from   WRI$_SCH_VOTES where   schedule_id  = :id and   vector_index = :vidxselect   vector_index, vector from   WRI$_SCH_VOTES where   schedule_id  = :id and   vector_index = :vidxselect   vector_index, vector from   WRI$_SCH_VOTES where   schedule_id  = :id and   vector_index = :vidxselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */max(substrb("VALUE",1,32)) val,count(*) cnt  from "SYS"."SCHEDULER$_GLOBAL_ATTRIBUTE" t  where substrb("VALUE",1,32) is not null  group by nlssort(substrb("VALUE",1,32), 'NLS_SORT = binary')) order by nlssort(val,'NLS_SORT = binary')delete from WRH$_LIBRARYCACHE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from WRH$_SGASTAT_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select  THREAD# , STATUS , ENABLED , GROUPS , INSTANCE , OPEN_TIME , CURRENT_GROUP# , SEQUENCE# , CHECKPOINT_CHANGE# , CHECKPOINT_TIME , ENABLE_CHANGE# , ENABLE_TIME , DISABLE_CHANGE# , DISABLE_TIME, LAST_REDO_SEQUENCE#, LAST_REDO_BLOCK, LAST_REDO_CHANGE#, LAST_REDO_TIME from GV$THREAD where inst_id = USERENV('Instance')insert into WRI$_ALERT_HISTORY (sequence_id, reason_id, owner, object_name, subobject_name, reason_argument_1, reason_argument_2, reason_argument_3, reason_argument_4, reason_argument_5, time_suggested, creation_time, action_argument_1, action_argument_2, action_argument_3, action_argument_4, action_argument_5, message_level, hosting_client_id, process_id, host_id, host_nw_addr, instance_name, instance_number, user_id, execution_context_id, error_instance_id, resolution, metric_value) values (:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12, :13, :14, :15, :16, :17, :18, :19, :20, :21, :22, :23, :24, :25, :26, :27, :28, :29)select /*+  no_parallel_index(t, "WRI$_DBU_CPU_USAGE_SAMPLE_PK")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"WRI$_DBU_CPU_USAGE_SAMPLE_PK") */ count(*) as nrw,count(distinct sys_op_lbid(6134,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."WRI$_DBU_CPU_USAGE_SAMPLE" t where "DBID" is not null or "VERSION" is not nulldelete from WRH$_DISPATCHER tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from object_usage where obj# in  (select a.obj# from object_usage a, ind$ b where  a.obj# = b.obj# and b.bo# = :1)delete from WRH$_MTTR_TARGET_ADVICE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from WRH$_WAITSTAT_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"BEGIN_INTERVAL_TIME" val,count(*) cnt  from "SYS"."WRM$_SNAPSHOT" t  where "BEGIN_INTERVAL_TIME" is not null  group by "BEGIN_INTERVAL_TIME") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"BEGIN_INTERVAL_TIME" val,count(*) cnt  from "SYS"."WRM$_SNAPSHOT" t  where "BEGIN_INTERVAL_TIME" is not null  group by "BEGIN_INTERVAL_TIME") order by valSELECT PROVISIONING_COMPANY_ID FROM WWV_FLOW_COMPANIES ORDER BY SHORT_NAMEupdate WRI$_SCH_CONTROL    set num_votes = :votes,        last_vote = :lvotetm  where schedule_id = :idupdate WRI$_SCH_CONTROL    set num_votes = :votes,        last_vote = :lvotetm  where schedule_id = :idupdate WRI$_SCH_CONTROL    set num_votes = :votes,        last_vote = :lvotetm  where schedule_id = :idupdate WRI$_SCH_CONTROL    set num_votes = :votes,        last_vote = :lvotetm  where schedule_id = :idDELETE FROM RECENT_RESOURCE_INCARNATIONS$ WHERE RESOURCE_TYPE = 'INSTANCE' AND RESOURCE_NAME = :B4 AND DB_UNIQUE_NAME = :B3 AND DB_DOMAIN = NVL(:B2 , '==N/A==') AND STARTUP_TIME < SYS_EXTRACT_UTC(:B1 )SELECT C.CLIENT_ID,         C.OPERATION_ID,         C.STATUS,         NVL(C.ATTRIBUTES, 0),         NVL(C.PRIORITY_OVERRIDE, 0),         C.GENERATOR_JOB_NAME    FROM KET$_CLIENT_CONFIG C   WHERE (C.CLIENT_ID = 0           AND C.OPERATION_ID = 0)      OR (C.CLIENT_ID IN (SELECT CID_KETCL                             FROM X$KETCL X)          AND C.OPERATION_ID = 0)      OR (C.OPERATION_ID != 0           AND C.OPERATION_ID IN (SELECT O.OPID_KETOP                                    FROM X$KETOP O                                  WHERE O.CID_KETOP = C.CLIENT_ID))  ORDER BY 2,1  FOR UPDATE OF C.STATUSdelete from WRH$_LATCH_PARENT_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) SELECT COUNT(*) FROM X$KSPPI A, X$KSPPCV2 B WHERE A.INDX + 1 = KSPFTCTXPN AND KSPPINM = '_deferred_log_dest_is_valid' AND UPPER(KSPFTCTXVL)='TRUE'SELECT VALUE FROM V$SESSION_FIX_CONTROL WHERE BUGNO = :B1 AND SESSION_ID = USERENV('SID')select min(next_date) from "SYS"."AQ$_ALERT_QT_T"select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"FILE#" val,count(*) cnt  from "SYS"."UNDO$" t  where "FILE#" is not null  group by "FILE#") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"STATUS" val,count(*) cnt  from "SYS"."WRM$_SNAPSHOT" t  where "STATUS" is not null  group by "STATUS") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"STATUS" val,count(*) cnt  from "SYS"."WRM$_SNAPSHOT" t  where "STATUS" is not null  group by "STATUS") order by valdelete from WRM$_DATABASE_INSTANCE dbinst where dbinst.dbid = :dbid   and NOT EXISTS       (select 1 from WRM$_SNAPSHOT snap          where snap.dbid = :dbid            and snap.instance_number = dbinst.instance_number            and snap.startup_time = dbinst.startup_time)   and dbinst.startup_time <       (select max(startup_time)          from WRM$_DATABASE_INSTANCE         where dbid = :dbid           and instance_number = dbinst.instance_number           and startup_time < (cast(SYSTIMESTAMP as TIMESTAMP) -                               :retention))/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("REASON_ID")),to_char(count("OBJECT_ID")),to_char(count("SUBOBJECT_ID")),to_char(count("INTERNAL_INSTANCE_NUMBER")),to_char(count("OWNER")),to_char(count("OBJECT_NAME")),to_char(count("SUBOBJECT_NAME")),to_char(count("SEQUENCE_ID")),to_char(count("REASON_ARGUMENT_1")),to_char(count("REASON_ARGUMENT_2")),to_char(count("REASON_ARGUMENT_3")),to_char(count("REASON_ARGUMENT_4")),to_char(count("REASON_ARGUMENT_5")),to_char(count("TIME_SUGGESTED")),to_char(count("CREATION_TIME")),to_char(count("ACTION_ARGUMENT_1")),to_char(count("ACTION_ARGUMENT_2")),to_char(count("ACTION_ARGUMENT_3")),to_char(count("ACTION_ARGUMENT_4")),to_char(count("ACTION_ARGUMENT_5")),to_char(count("MESSAGE_LEVEL")),to_char(count("HOSTING_CLIENT_ID")),to_char(count("PROCESS_ID")),to_char(count("HOST_ID")),to_char(count("HOST_NWselect null from obj$ where obj#=:1 and type#=:2 and obj# not in (select p_obj# from dependency$ where p_obj# = obj$.obj#)select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"TS#" val,count(*) cnt  from "SYS"."INDPART$" t  where "TS#" is not null  group by "TS#") order by valSELECT KSPPCV.KSPPSTVL FROM X$KSPPCV KSPPCV, X$KSPPI KSPPI WHERE KSPPI.INDX = KSPPCV.INDX AND KSPPI.KSPPINM = 'db_block_size'/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("SCHEDULE_ID")),to_char(substrb(dump(min("SCHEDULE_ID"),16,0,32),1,120)),to_char(substrb(dump(max("SCHEDULE_ID"),16,0,32),1,120)),to_char(count("VECTOR_INDEX")),to_char(substrb(dump(min("VECTOR_INDEX"),16,0,32),1,120)),to_char(substrb(dump(max("VECTOR_INDEX"),16,0,32),1,120)),to_char(count("VECTOR")),to_char(substrb(dump(min("VECTOR"),16,0,32),1,120)),to_char(substrb(dump(max("VECTOR"),16,0,32),1,120)) from "SYS"."WRI$_SCH_VOTES" t  /* NDV,NIL,NIL,NDV,NIL,NIL,NDV,NIL,NIL*//* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("SCHEDULE_ID")),to_char(substrb(dump(min("SCHEDULE_ID"),16,0,32),1,120)),to_char(substrb(dump(max("SCHEDULE_ID"),16,0,32),1,120)),to_char(count("VECTOR_INDEX")),to_char(substrb(dump(min("VECTOR_INDEX"),16,0,32),1,120)),to_char(substrb(dump(max("VECTOR_INDEX"),16,0,32),1,120)),to_char(count("VECTOR")),to_char(substrb(dump(min("VECTOR"),16,0,32),1,120)),to_char(substrb(dump(max("VECTOR"),16,0,32),1,120)) from "SYS"."WRI$_SCH_VOTES" t  /* NDV,NIL,NIL,NDV,NIL,NIL,NDV,NIL,NIL*/DELETE FROM SYS.SCHEDULER$_EVENT_LOG WHERE DBID IS NULL AND LOG_ID IN (SELECT E.LOG_ID FROM SYS.SCHEDULER$_EVENT_LOG E, SYS.SCHEDULER$_CLASS C WHERE E.TYPE# = 66 AND E.CLASS_ID = C.OBJ#(+) AND (E.FLAGS IS NULL OR BITAND(E.FLAGS, 2)=0) AND OPERATION NOT LIKE 'CHAIN%' AND E.LOG_DATE < :B2 - NUMTODSINTERVAL(NVL(C.LOG_HISTORY, :B1 ), 'DAY'))declare  error boolean;   st_syn_detected EXCEPTION;    PRAGMA EXCEPTION_INIT(st_syn_detected, -995);  BEGIN    if((sys.dbms_standard.dictionary_obj_type!='SYNONYM')or(sys.dbms_standard.dictionary_obj_owner!='PUBLIC'))    then      return;    end if;    error :=       CASE sys.dbms_standard.dictionary_obj_name          WHEN 'ST_GEOMETRY' THEN TRUE          WHEN 'ST_SURFACE' THEN TRUE          WHEN 'ST_POLYGON' THEN TRUE          WHEN 'ST_POINT' THEN TRUE          WHEN 'ST_MULTISURFACE' THEN TRUE          WHEN 'ST_MULTIPOINT' THEN TRUE          WHEN 'ST_MULTILINESTRING' THEN TRUE          WHEN 'ST_MULTICURVE' THEN TRUE          WHEN 'ST_LINESTRING' THEN TRUE          WHEN 'ST_GEOMCOLLECTION' THEN TRUE          WHEN 'ST_CURVE' THEN TRUE          WHEN 'ST_CURVEPOLYGON' THEN TRUE          WHEN 'ST_COMPOUNDCURVE' THEN TRUE          WHEN 'ST_CIRCULARSTRING' THEN TRUE          WHEN 'ST_INTERSECTS' THEN TRUE          WHEN 'ST_RELATE' THEN TRUE          WHEN 'ST_TOUCH' THEN TRUE          WHEN 'select name,password,datats#,tempts#,type#,defrole,resource$, ptime, decode(defschclass,NULL,'DEFAULT_CONSUMER_GROUP',defschclass),spare1,spare4,ext_username,spare2 from user$ where user#=:1select /*+  no_parallel_index(t, "WRM$_SNAPSHOT_DETAILS_INDEX")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"WRM$_SNAPSHOT_DETAILS_INDEX") */ count(*) as nrw,count(distinct sys_op_lbid(6624,'L',t.rowid)) as nlb,count(distinct hextoraw(sys_op_descend("SNAP_ID")||sys_op_descend("DBID")||sys_op_descend("INSTANCE_NUMBER")||sys_op_descend("TABLE_ID"))) as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."WRM$_SNAPSHOT_DETAILS" t where "SNAP_ID" is not null or "DBID" is not null or "INSTANCE_NUMBER" is not null or "TABLE_ID" is not nullinsert into histgrm$(obj#,intcol#,row#,bucket,endpoint,col#,epvalue)values(:1,:2,:3,:4,:5,:6,:7)insert into histgrm$(obj#,intcol#,row#,bucket,endpoint,col#,epvalue)values(:1,:2,:3,:4,:5,:6,:7)update sys.scheduler$_job set  flags = :1, dist_flags = :2 where  obj# = :3update sys.scheduler$_job set  flags = :1, dist_flags = :2 where  obj# = :3call WWV_FLOW_MAINT.DAILY_MAINTENANCE (  )/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("STALENESS")),to_char(substrb(dump(min("STALENESS"),16,0,32),1,120)),to_char(substrb(dump(max("STALENESS"),16,0,32),1,120)),to_char(count("OSIZE")),to_char(substrb(dump(min("OSIZE"),16,0,32),1,120)),to_char(substrb(dump(max("OSIZE"),16,0,32),1,120)),to_char(count("OBJ#")),to_char(substrb(dump(min("OBJ#"),16,0,32),1,120)),to_char(substrb(dump(max("OBJ#"),16,0,32),1,120)),to_char(count("TYPE#")),to_char(substrb(dump(min("TYPE#"),16,0,32),1,120)),to_char(substrb(dump(max("TYPE#"),16,0,32),1,120)),to_char(count("FLAGS")),to_char(substrb(dump(min("FLAGS"),16,0,32),1,120)),to_char(substrb(dump(max("FLAGS"),16,0,32),1,120)),to_char(count("STATUS")),to_char(substrb(dump(min("STATUS"),16,0,32),1,120)),to_char(substrb(dump(max("STATUS"),16,0,32),1,120)),to_char(count("SID")),to_char(substrb(dump(min("Sselect count(*) from resource_group_mapping$ where attribute = :1 and status = 'ACTIVE'select SUM(column_length) from all_ind_columns where table_name = 'STUDENT'SELECT /* OPT_DYN_SAMP */ /*+ ALL_ROWS IGNORE_WHERE_CLAUSE NO_PARALLEL(SAMPLESUB) opt_param('parallel_execution_enabled', 'false') NO_PARALLEL_INDEX(SAMPLESUB) NO_SQL_TUNE */ NVL(SUM(C1),0), NVL(SUM(C2),0) FROM (SELECT /*+ IGNORE_WHERE_CLAUSE NO_PARALLEL("TAB") FULL("TAB") NO_PARALLEL_INDEX("TAB") */ 1 AS C1, CASE WHEN BITAND("TAB"."TRIGFLAG",67108864)<>67108864 AND BITAND("TAB"."PROPERTY",512)<>512 AND BITAND("TAB"."FLAGS",536870912)<>536870912 THEN 1 ELSE 0 END AS C2 FROM "SYS"."TAB$" SAMPLE BLOCK (3.039216 , 1) SEED (1) "TAB") SAMPLESUBselect ownername,classname,methodname,signature,flags from procedurejava$ where obj#=:1 and procedure#=:2 order by procedure#select intcol#, col# , type#, spare1, segcol#, charsetform from partcol$  where obj# = :1 order by pos#select intcol#, col# , type#, spare1, segcol#, charsetform from partcol$  where obj# = :1 order by pos#select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"DBID" val,count(*) cnt  from "SYS"."WRM$_SNAPSHOT" t  where "DBID" is not null  group by "DBID") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"DBID" val,count(*) cnt  from "SYS"."WRM$_SNAPSHOT" t  where "DBID" is not null  group by "DBID") order by valselect box_id, value from rule_set_iot$ where rs_obj# = :1 and ec_obj# = :2  and rule_id = :3 and rule_or_piece = :4 and rop_id <> :5 order by rop_idSELECT /* OPT_DYN_SAMP */ /*+ ALL_ROWS IGNORE_WHERE_CLAUSE NO_PARALLEL(SAMPLESUB) opt_param('parallel_execution_enabled', 'false') NO_PARALLEL_INDEX(SAMPLESUB) NO_SQL_TUNE */ NVL(SUM(C1),0), NVL(SUM(C2),0) FROM (SELECT /*+ IGNORE_WHERE_CLAUSE NO_PARALLEL("O") FULL("O") NO_PARALLEL_INDEX("O") */ 1 AS C1, CASE WHEN "O"."TYPE#"=1 AND BITAND("O"."FLAGS",128)<>128 THEN 1 ELSE 0 END AS C2 FROM "SYS"."OBJ$" SAMPLE BLOCK (13.080169 , 1) SEED (1) "O") SAMPLESUBSELECT COUNT(DISTINCT(batch#)) FROM sqllog$LOCK TABLE RECENT_RESOURCE_INCARNATIONS$ IN EXCLUSIVE MODEselect procedure#,ownerlength,classlength,methodlength,siglength, flagslength,cookiesize from procedurejava$ where obj#=:1 order by procedure#select p_obj#, flags, code, audit$ from edition$ where obj#=:1select intcol# from ustats$ where obj# = :1select SUM(data_length) from all_tab_columns where table_name = 'RT2'select bind#, functionname, property, returnschema, returntype, impschema, imptype  from opbinding$ where obj# = :1insert into WRM$_DATABASE_INSTANCE   (dbid, instance_number, startup_time, parallel,    version, db_name, instance_name, host_name, last_ash_sample_id,    platform_name )  values   (:dbid, :instance_number, :startup_time, :parallel,    :version, :db_name, :instance_name, :host_name, 0,    :platform_name )SELECT INCARNATION#, RESETLOGS_CHANGE#, RESETLOGS_TIME, PRIOR_RESETLOGS_CHANGE#, PRIOR_RESETLOGS_TIME, STATUS, RESETLOGS_ID, PRIOR_INCARNATION# FROM V$DATABASE_INCARNATION WHERE STATUS <> 'ORPHAN' ORDER BY RESETLOGS_CHANGE# DESCselect 1 from sys.streams$_prepare_ddl p  where  ((p.global_flag = 1 and :1 is null) or           (p.global_flag = 0 and p.usrid = :2)) and rownum = 1SELECT /* OPT_DYN_SAMP */ /*+ ALL_ROWS IGNORE_WHERE_CLAUSE NO_PARALLEL(SAMPLESUB) opt_param('parallel_execution_enabled', 'false') NO_PARALLEL_INDEX(SAMPLESUB) NO_SQL_TUNE */ NVL(SUM(C1),0), NVL(SUM(C2),0) FROM (SELECT /*+ IGNORE_WHERE_CLAUSE NO_PARALLEL("IND") FULL("IND") NO_PARALLEL_INDEX("IND") */ 1 AS C1, CASE WHEN "IND"."TYPE#"<>4 AND "IND"."TYPE#"<>8 AND BITAND("IND"."FLAGS",5145)=0 THEN 1 ELSE 0 END AS C2 FROM "SYS"."IND$" SAMPLE BLOCK (3.039216 , 1) SEED (1) "IND") SAMPLESUBSELECT TS#, OBJ#, DATAOBJ#, SUM(TABLE_SCANS_DELTA) FROM SYS.WRH$_SEG_STAT WHERE SNAP_ID > :B1 AND TS# <> 0 GROUP BY TS# , OBJ#, DATAOBJ# ORDER BY SUM(TABLE_SCANS_DELTA) DESC                                       merge /*+ dynamic_sampling(mm 4) dynamic_sampling_est_cdn(mm)                           dynamic_sampling(m 4) dynamic_sampling_est_cdn(m) */                    into mon_mods_all$ mm                                                       using                                                                         (select                                                                          decode(grouping_id(tp.bo#,m.obj#),1,tp.bo#,m.obj#) obj#,                      sum(m.inserts) inserts, sum(m.updates) updates, sum(m.deletes) deletes,       case when grouping_id(tp.bo#, m.obj#) = 0 then                                (/* IF THIS IS A PARTITION AGGREGATE THE TRUNCATE BIT */                       decode(sum(bitand(m.flags,1)),0,0,1)                                          +decode(sum(bitand(m.flags,2)),0,0,2)                                         +decode(sum(bitand(m.flags,4)),0,0,4)                                         /* ADD NEW KSXM BIT                                       merge /*+ dynamic_sampling(mm 4) dynamic_sampling_est_cdn(mm)                           dynamic_sampling(m 4) dynamic_sampling_est_cdn(m) */                    into mon_mods_all$ mm                                                       using                                                                         (select                                                                          decode(grouping_id(tp.bo#,m.obj#),1,tp.bo#,m.obj#) obj#,                      sum(m.inserts) inserts, sum(m.updates) updates, sum(m.deletes) deletes,       case when grouping_id(tp.bo#, m.obj#) = 0 then                                (/* IF THIS IS A PARTITION AGGREGATE THE TRUNCATE BIT */                       decode(sum(bitand(m.flags,1)),0,0,1)                                          +decode(sum(bitand(m.flags,2)),0,0,2)                                         +decode(sum(bitand(m.flags,4)),0,0,4)                                         /* ADD NEW KSXM BIT                                       merge /*+ dynamic_sampling(mm 4) dynamic_sampling_est_cdn(mm)                           dynamic_sampling(m 4) dynamic_sampling_est_cdn(m) */                    into mon_mods_all$ mm                                                       using                                                                         (select                                                                          decode(grouping_id(tp.bo#,m.obj#),1,tp.bo#,m.obj#) obj#,                      sum(m.inserts) inserts, sum(m.updates) updates, sum(m.deletes) deletes,       case when grouping_id(tp.bo#, m.obj#) = 0 then                                (/* IF THIS IS A PARTITION AGGREGATE THE TRUNCATE BIT */                       decode(sum(bitand(m.flags,1)),0,0,1)                                          +decode(sum(bitand(m.flags,2)),0,0,2)                                         +decode(sum(bitand(m.flags,4)),0,0,4)                                         /* ADD NEW KSXM BITdeclare    stmt varchar2(200);    cnt number; BEGIN      if sys.dbms_standard.dictionary_obj_type = 'USER' THEN        stmt := 'DELETE FROM SDO_GEOM_METADATA_TABLE ' ||      ' WHERE SDO_OWNER = :owner ';        EXECUTE IMMEDIATE stmt USING sys.dbms_standard.dictionary_obj_name;         stmt := 'DELETE FROM SDO_MAPS_TABLE ' ||     ' WHERE SDO_OWNER = :owner ';        EXECUTE IMMEDIATE stmt USING sys.dbms_standard.dictionary_obj_name;         stmt := 'DELETE FROM SDO_CACHED_MAPS_TABLE ' ||     ' WHERE SDO_OWNER = :owner ';        EXECUTE IMMEDIATE stmt USING sys.dbms_standard.dictionary_obj_name;         stmt := 'DELETE FROM SDO_STYLES_TABLE ' ||     ' WHERE SDO_OWNER = :owner ';        EXECUTE IMMEDIATE stmt USING sys.dbms_standard.dictionary_obj_name;         stmt := 'DELETE FROM SDO_THEMES_TABLE ' ||    ' WHERE SDO_OWNER = :owner ';        EXECUTE IMMEDIATE stmt USING sys.dbms_standard.dictionary_obj_name;         stmt := 'DELETE FROM SDO_LRS_METADATA_TABLE ' ||    ' WHERE SDO_OWNER =delete from ind_stats$ where obj#=:1delete from ind_stats$ where obj#=:1SELECT 1 from "SYS"."AQ$SCHEDULER$_EVENT_QTAB" qtview  WHERE (queue = 'SYS.AQ$_SCHEDULER$_EVENT_QTAB_E' ) AND rownum < 2call dbms_space.auto_space_advisor_job_proc (  )select /*+  no_parallel_index(t, "I_SEQ1")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_SEQ1") */ count(*) as nrw,count(distinct sys_op_lbid(79,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."SEQ$" t where "OBJ#" is not nullUPDATE DBMS_LOCK_ALLOCATED SET EXPIRATION = SYSDATE + (:B1 /86400) WHERE ROWID = :B2 UPDATE DBMS_LOCK_ALLOCATED SET EXPIRATION = SYSDATE + (:B1 /86400) WHERE ROWID = :B2 UPDATE DBMS_LOCK_ALLOCATED SET EXPIRATION = SYSDATE + (:B1 /86400) WHERE ROWID = :B2 UPDATE DBMS_LOCK_ALLOCATED SET EXPIRATION = SYSDATE + (:B1 /86400) WHERE ROWID = :B2 select numbind, nextbindnum, property from operator$ where obj#=:1select inst_id, tablespace_name, segment_file, segment_block, extent_size, current_users, total_extents, total_blocks, used_extents, used_blocks, free_extents, free_blocks, added_extents, extent_hits, freed_extents, free_requests, max_size, max_blocks, max_used_size, max_used_blocks, max_sort_size, max_sort_blocks, relative_fno from x$ktstssdselect max_iops, max_mbps, max_pmbps, latency, num_disks  from resource_io_calibrate$delete from WRH$_SYS_TIME_MODEL_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"INTCOL#" val,count(*) cnt  from "SYS"."COL_USAGE$" t  where "INTCOL#" is not null  group by "INTCOL#") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"INTCOL#" val,count(*) cnt  from "SYS"."COL_USAGE$" t  where "INTCOL#" is not null  group by "INTCOL#") order by valselect TOTAL from SYS.ID_GENS$select null from sys.optstat_hist_control$ where sval2 >= :1  and sname = 'SKIP_TIME'select blocksize from ts$ where name = :tsnamedelete from WRH$_SYSMETRIC_HISTORY tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from wrm$_wr_usage tab   where usage_time <=    (select nvl(max(last_sample_date), sysdate-7)       from wri$_dbu_usage_sample)delete from WRH$_BG_EVENT_SUMMARY tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select SUM(data_length) from all_tab_columns where table_name = 'EMPLOYEES'create global temporary table sys.ora_temp_1_ds_170008 on commit preserve rows cache noparallel as select /*+  no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"OBJ#","ROW#","INTCOL#", rowid SYS_DS_ALIAS_0  from "SYS"."HISTGRM$" sample ( 21.8210672486)  t  WHERE  1 = 2select min(next_date) from "SYS"."AQ$_SYS$SERVICE_METRICS_TAB_T"select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"FILE#" val,count(*) cnt  from "SYS"."INDPART$" t  where "FILE#" is not null  group by "FILE#") order by valBEGIN  dbms_ha_alerts_prvt.clear_instance_resources(   :dbdomain, :dbuniquename, :instance_name, :event_time);END;DELETE FROM SYS.SCHEDULER$_JOB_RUN_DETAILS WHERE LOG_ID IN (SELECT E.LOG_ID FROM SYS.SCHEDULER$_EVENT_LOG E, SYS.SCHEDULER$_CLASS C WHERE E.TYPE# = 66 AND E.CLASS_ID = C.OBJ#(+) AND (E.FLAGS IS NULL OR BITAND(E.FLAGS, 2)=0) AND OPERATION NOT LIKE 'CHAIN%' AND E.LOG_DATE < :B2 - NUMTODSINTERVAL(NVL(C.LOG_HISTORY, :B1 ), 'DAY'))select /*+ connect_by_filtering */ privilege#,level from sysauth$ connect by grantee#=prior privilege# and privilege#>0 start with grantee#=:1 and privilege#>0/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("SNAP_ID")),to_char(substrb(dump(min("SNAP_ID"),16,0,32),1,120)),to_char(substrb(dump(max("SNAP_ID"),16,0,32),1,120)),to_char(count("DBID")),to_char(substrb(dump(min("DBID"),16,0,32),1,120)),to_char(substrb(dump(max("DBID"),16,0,32),1,120)),to_char(count("INSTANCE_NUMBER")),to_char(substrb(dump(min("INSTANCE_NUMBER"),16,0,32),1,120)),to_char(substrb(dump(max("INSTANCE_NUMBER"),16,0,32),1,120)),to_char(count("STARTUP_TIME")),to_char(substrb(dump(min("STARTUP_TIME"),16,0,32),1,120)),to_char(substrb(dump(max("STARTUP_TIME"),16,0,32),1,120)),to_char(count("BEGIN_INTERVAL_TIME")),to_char(substrb(dump(min("BEGIN_INTERVAL_TIME"),16,0,32),1,120)),to_char(substrb(dump(max("BEGIN_INTERVAL_TIME"),16,0,32),1,120)),to_char(count("END_INTERVAL_TIME")),to_char(substrb(dump(min("END_INTERVAL_TIME"),16,0,32),/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("SNAP_ID")),to_char(substrb(dump(min("SNAP_ID"),16,0,32),1,120)),to_char(substrb(dump(max("SNAP_ID"),16,0,32),1,120)),to_char(count("DBID")),to_char(substrb(dump(min("DBID"),16,0,32),1,120)),to_char(substrb(dump(max("DBID"),16,0,32),1,120)),to_char(count("INSTANCE_NUMBER")),to_char(substrb(dump(min("INSTANCE_NUMBER"),16,0,32),1,120)),to_char(substrb(dump(max("INSTANCE_NUMBER"),16,0,32),1,120)),to_char(count("STARTUP_TIME")),to_char(substrb(dump(min("STARTUP_TIME"),16,0,32),1,120)),to_char(substrb(dump(max("STARTUP_TIME"),16,0,32),1,120)),to_char(count("BEGIN_INTERVAL_TIME")),to_char(substrb(dump(min("BEGIN_INTERVAL_TIME"),16,0,32),1,120)),to_char(substrb(dump(max("BEGIN_INTERVAL_TIME"),16,0,32),1,120)),to_char(count("END_INTERVAL_TIME")),to_char(substrb(dump(min("END_INTERVAL_TIME"),16,0,32),SELECT TS_ID, TABLESPACE_NAME, REASON_VALUE FROM SYS.WRI$_SEGADV_OBJLIST WHERE REASON IN ('TBS WARNING ALERT', 'TBS CRITICAL ALERT') AND STATUS = 'NEW' ORDER BY CREATION_TIME,REASON ASCdelete from WRH$_MEM_DYNAMIC_COMP tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select num_rows FROM dba_tables where table_name = 'POO'/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("DBID")),to_char(substrb(dump(min("DBID"),16,0,32),1,120)),to_char(substrb(dump(max("DBID"),16,0,32),1,120)),to_char(count("SNAP_INTERVAL")),to_char(substrb(dump(min("SNAP_INTERVAL"),16,0,32),1,120)),to_char(substrb(dump(max("SNAP_INTERVAL"),16,0,32),1,120)),to_char(count("SNAPINT_NUM")),to_char(substrb(dump(min("SNAPINT_NUM"),16,0,32),1,120)),to_char(substrb(dump(max("SNAPINT_NUM"),16,0,32),1,120)),to_char(count("RETENTION")),to_char(substrb(dump(min("RETENTION"),16,0,32),1,120)),to_char(substrb(dump(max("RETENTION"),16,0,32),1,120)),to_char(count("RETENTION_NUM")),to_char(substrb(dump(min("RETENTION_NUM"),16,0,32),1,120)),to_char(substrb(dump(max("RETENTION_NUM"),16,0,32),1,120)),to_char(count("MOST_RECENT_SNAP_ID")),to_char(substrb(dump(min("MOST_RECENT_SNAP_ID"),16,0,32),1,120)),to_char(s/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("DBID")),to_char(substrb(dump(min("DBID"),16,0,32),1,120)),to_char(substrb(dump(max("DBID"),16,0,32),1,120)),to_char(count("SNAP_INTERVAL")),to_char(substrb(dump(min("SNAP_INTERVAL"),16,0,32),1,120)),to_char(substrb(dump(max("SNAP_INTERVAL"),16,0,32),1,120)),to_char(count("SNAPINT_NUM")),to_char(substrb(dump(min("SNAPINT_NUM"),16,0,32),1,120)),to_char(substrb(dump(max("SNAPINT_NUM"),16,0,32),1,120)),to_char(count("RETENTION")),to_char(substrb(dump(min("RETENTION"),16,0,32),1,120)),to_char(substrb(dump(max("RETENTION"),16,0,32),1,120)),to_char(count("RETENTION_NUM")),to_char(substrb(dump(min("RETENTION_NUM"),16,0,32),1,120)),to_char(substrb(dump(max("RETENTION_NUM"),16,0,32),1,120)),to_char(count("MOST_RECENT_SNAP_ID")),to_char(substrb(dump(min("MOST_RECENT_SNAP_ID"),16,0,32),1,120)),to_char(sselect obj#,type#,ctime,mtime,stime, status, dataobj#, flags, oid$, spare1, spare2 from obj$ where owner#=:1 and name=:2 and namespace=:3 and remoteowner is null and linkname is null and subname is nullselect obj#,type#,ctime,mtime,stime, status, dataobj#, flags, oid$, spare1, spare2 from obj$ where owner#=:1 and name=:2 and namespace=:3 and remoteowner is null and linkname is null and subname is null                                        merge /*+ dynamic_sampling(mm 4) dynamic_sampling_est_cdn(mm)                           dynamic_sampling(m 4) dynamic_sampling_est_cdn(m) */                    into sys.mon_mods_all$ mm                                                   using                                                                         (select                                                                         m.obj# obj#,                                                                  m.inserts inserts, m.updates updates, m.deletes deletes,                      m.flags flags, m.timestamp timestamp, m.drop_segments drop_segments         from sys.mon_mods$ m, tab$ t                                                  where m.obj# = t.obj#                                                         ) v on (mm.obj# = v.obj#)                                                     when matched then                                                               update                                                      merge /*+ dynamic_sampling(mm 4) dynamic_sampling_est_cdn(mm)                           dynamic_sampling(m 4) dynamic_sampling_est_cdn(m) */                    into sys.mon_mods_all$ mm                                                   using                                                                         (select                                                                         m.obj# obj#,                                                                  m.inserts inserts, m.updates updates, m.deletes deletes,                      m.flags flags, m.timestamp timestamp, m.drop_segments drop_segments         from sys.mon_mods$ m, tab$ t                                                  where m.obj# = t.obj#                                                         ) v on (mm.obj# = v.obj#)                                                     when matched then                                                               update                                                      merge /*+ dynamic_sampling(mm 4) dynamic_sampling_est_cdn(mm)                           dynamic_sampling(m 4) dynamic_sampling_est_cdn(m) */                    into sys.mon_mods_all$ mm                                                   using                                                                         (select                                                                         m.obj# obj#,                                                                  m.inserts inserts, m.updates updates, m.deletes deletes,                      m.flags flags, m.timestamp timestamp, m.drop_segments drop_segments         from sys.mon_mods$ m, tab$ t                                                  where m.obj# = t.obj#                                                         ) v on (mm.obj# = v.obj#)                                                     when matched then                                                               update              select /*+ index(idl_char$ i_idl_char1) +*/ piece#,length,piece from idl_char$ where obj#=:1 and part=:2 and version=:3 order by piece#select /*+ index(idl_char$ i_idl_char1) +*/ piece#,length,piece from idl_char$ where obj#=:1 and part=:2 and version=:3 order by piece#SELECT redef_id FROM sys.redef_object$  WHERE obj_type = :1 AND  ((obj_owner = :2 AND obj_name = :3) OR   (int_obj_owner = :2 AND int_obj_name = :3))  AND rownum = 1delete from WRH$_IOSTAT_FILETYPE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id))                                      delete /*+ dynamic_sampling(m 4) dynamic_sampling_est_cdn(m) */                 from sys.mon_mods$ m                                                          where exists                                                                  (select /*+ unnest */ * from sys.tabcompart$ t where t.obj# = m.obj#)                                     delete /*+ dynamic_sampling(m 4) dynamic_sampling_est_cdn(m) */                 from sys.mon_mods$ m                                                          where exists                                                                  (select /*+ unnest */ * from sys.tabcompart$ t where t.obj# = m.obj#)                                     delete /*+ dynamic_sampling(m 4) dynamic_sampling_est_cdn(m) */                 from sys.mon_mods$ m                                                          where exists                                                                  (select /*+ unnest */ * from sys.tabcompart$ t where t.obj# = m.obj#)update wrm$_snapshot set status = 0,      flush_elapsed =         greatest((cast(SYSDATE as TIMESTAMP) - end_interval_time),                 interval '00.10' second)  where snap_id = :snap_id and dbid = :dbid and      instance_number = :instance_numberupdate wrm$_snapshot set status = 0,      flush_elapsed =         greatest((cast(SYSDATE as TIMESTAMP) - end_interval_time),                 interval '00.10' second)  where snap_id = :snap_id and dbid = :dbid and      instance_number = :instance_numberupdate wrm$_snapshot set status = 0,      flush_elapsed =         greatest((cast(SYSDATE as TIMESTAMP) - end_interval_time),                 interval '00.10' second)  where snap_id = :snap_id and dbid = :dbid and      instance_number = :instance_numberupdate wrm$_snapshot set status = 0,      flush_elapsed =         greatest((cast(SYSDATE as TIMESTAMP) - end_interval_time),                 interval '00.10' second)  where snap_id = :snap_id and dbid = :dbid and      instance_number = :instance_numberselect num_rows FROM dba_tables where table_name = 'Y'select count(*) from vtable$ where obj#=:1update sys.scheduler$_job set  user_callback_ctx = :1, dist_flags = :2 where  obj# = :3update sys.scheduler$_job set  user_callback_ctx = :1, dist_flags = :2 where  obj# = :3delete com$ where obj#=:1delete from WRI$_ALERT_THRESHOLD_LOG where sequence_id = :1select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"DBID" val,count(*) cnt  from "SYS"."WRM$_DATABASE_INSTANCE" t  where "DBID" is not null  group by "DBID") order by valselect a.default_selectivity                             from association$ a                                      where a.obj# = :1                                          and a.property = :2select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"START_TIME" val,count(*) cnt  from "SYS"."WRI$_SEGADV_CNTRLTAB" t  where "START_TIME" is not null  group by "START_TIME") order by valdelete from WRH$_MVPARAMETER_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) insert into sys.scheduler$_job_run_details  (log_id, log_date, req_start_date, start_date, run_duration,   instance_id, session_id, slave_pid, cpu_used, error#, additional_info)   values  (:1, SYSTIMESTAMP, :2, :3, :4, :5, :6, :7,   numtodsinterval(:8/100, 'second'), :9, :10)insert into sys.scheduler$_job_run_details  (log_id, log_date, req_start_date, start_date, run_duration,   instance_id, session_id, slave_pid, cpu_used, error#, additional_info)   values  (:1, SYSTIMESTAMP, :2, :3, :4, :5, :6, :7,   numtodsinterval(:8/100, 'second'), :9, :10)select t.rowcnt, t.blkcnt, t.empcnt, t.avgspc, t.chncnt, t.avgrln, t.avgspc_flb, t.flbcnt, t.analyzetime, t.samplesize, t.flags, ts.cachedblk, ts.cachehit, ts.logicalread from tab$ t, tab_stats$ ts where t.obj#= :1 and t.obj# = ts.obj# (+)select sum(used_blocks), ts.ts#   from GV$SORT_SEGMENT gv, ts$ ts   where gv.tablespace_name = ts.name and   ts.bitmapped  <> 0   group by ts.ts#select o.obj#, u.name, o.name, ti.parent_obj#, ti.parent_ptn_obj#    from sys.obj$ o, sys.user$ u, sys.transient_iot$ ti    where o.obj# = ti.obj# and o.owner# = u.user#select min(minbkt),maxbkt,substrb(dump(min(val),16,0,32),1,120) minval,substrb(dump(max(val),16,0,32),1,120) maxval,sum(rep) sumrep, sum(repsq) sumrepsq, max(rep) maxrep, count(*) bktndv, sum(case when rep=1 then 1 else 0 end) unqrep from (select val,min(bkt) minbkt, max(bkt) maxbkt, count(val) rep, count(val)*count(val) repsq from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"SYS_NC00014$" val, ntile(254) over (order by "SYS_NC00014$") bkt  from "SYS"."WRI$_OPTSTAT_HISTGRM_HISTORY" sample (  6.3277304157)  t  where "SYS_NC00014$" is not null) group by val) group by maxbkt order by maxbktSELECT NVL(SUM(D.BLOCKS), 0) FROM X$KEWX_SEGMENTS D, (SELECT DISTINCT O1.SEGMENT_NAME NAME FROM X$KEWX_SEGMENTS O1 WHERE O1.SEGMENT_NAME LIKE 'LOGSTDBY$%' UNION ALL SELECT DISTINCT O2.LOB_NAME NAME FROM X$KEWX_LOBS O2 WHERE O2.TABLE_NAME LIKE 'LOGSTDBY$%') S WHERE (D.OWNER = 'SYSTEM') AND (D.SEGMENT_NAME = S.NAME)SELECT COUNT(*) FROM SYS_UNCOMPRESSED_SEGS WHERE TOTAL_INDEXES >= 3 AND SEGSIZE > 10485760SELECT COUNT(*) FROM SYS_UNCOMPRESSED_SEGS WHERE TOTAL_INDEXES >= 3 AND SEGSIZE > 10485760delete from WRH$_EVENT_HISTOGRAM_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select obj#,type#,ctime,mtime,stime, status, dataobj#, flags, oid$, spare1, spare2 from obj$ where owner#=:1 and name=:2 and namespace=:3 and remoteowner is null and linkname is null and subname = :4SELECT /*+ first_rows(1) */ '"'||OI.NAME||'"' FROM SYS.USER$ U, SYS.OBJ$ OT, SYS.IND$ I, SYS.OBJ$ OI WHERE U.NAME = :B2 AND OT.OWNER# = U.USER# AND OT.NAME = :B1 AND I.BO# = OT.OBJ# AND I.TYPE# = 4 AND I.OBJ# = OI.OBJ#select i.obj#,i.ts#,i.file#,i.block#,i.intcols,i.type#,i.flags, i.property,i.pctfree$,i.initrans,i.maxtrans,i.blevel,i.leafcnt,i.distkey, i.lblkkey,i.dblkkey,i.clufac,i.cols,i.analyzetime,i.samplesize,i.dataobj#, nvl(i.degree,1),nvl(i.instances,1),i.rowcnt,mod(i.pctthres$,256),i.indmethod#,i.trunccnt,nvl(c.unicols,0),nvl(c.deferrable#+c.valid#,0), nvl(i.spare1,i.intcols),i.spare4,spare2,spare6, decode(i.pctthres$,null,null, mod(trunc(i.pctthres$/256),256)) from ind$ i, (select enabled, min(cols) unicols, min(to_number(bitand(defer,1))) deferrable#, min(to_number(bitand(defer,4))) valid# from cdef$ where obj#=:1 and enabled > 1 group by enabled) c where i.obj#=c.enabled(+) and i.bo#=:1 order by i.obj#select a.default_cpu_cost, a.default_io_cost             from association$ a                                      where a.obj# = :1                                          and a.property = :2delete from WRH$_LOG tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select  FILE# , NAME from GV$DBFILE where inst_id = USERENV('Instance')select object_type, object_name, object_id, opcode, sequence_id from WRI$_ALERT_THRESHOLD_LOG order by sequence_idselect audit$ from library$ where obj#=:1delete from WRH$_LATCH_MISSES_SUMMARY_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select /*+ rule */ bucket, endpoint, col#, epvalue from histgrm$ where obj#=:1 and intcol#=:2 and row#=:3 order by bucketselect /*+ rule */ bucket, endpoint, col#, epvalue from histgrm$ where obj#=:1 and intcol#=:2 and row#=:3 order by bucket/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("DUMMY_KEY")),to_char(substrb(dump(min("DUMMY_KEY"),16,0,32),1,120)),to_char(substrb(dump(max("DUMMY_KEY"),16,0,32),1,120)),to_char(count("AUTOTASK_STATUS")),to_char(substrb(dump(min("AUTOTASK_STATUS"),16,0,32),1,120)),to_char(substrb(dump(max("AUTOTASK_STATUS"),16,0,32),1,120)),to_char(count("ABA_STATE")),to_char(substrb(dump(min("ABA_STATE"),16,0,32),1,120)),to_char(substrb(dump(max("ABA_STATE"),16,0,32),1,120)),to_char(count("ABA_STATE_TIME")),to_char(substrb(dump(min("ABA_STATE_TIME"),16,0,32),1,120)),to_char(substrb(dump(max("ABA_STATE_TIME"),16,0,32),1,120)),to_char(count("ABA_OS_PID")),to_char(substrb(dump(min("ABA_OS_PID"),16,0,32),1,120)),to_char(substrb(dump(max("ABA_OS_PID"),16,0,32),1,120)),to_char(count("ABA_START_TIME")),to_char(substrb(dump(min("ABA_START_TIME"),16,0,32),1,120)/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("DUMMY_KEY")),to_char(substrb(dump(min("DUMMY_KEY"),16,0,32),1,120)),to_char(substrb(dump(max("DUMMY_KEY"),16,0,32),1,120)),to_char(count("AUTOTASK_STATUS")),to_char(substrb(dump(min("AUTOTASK_STATUS"),16,0,32),1,120)),to_char(substrb(dump(max("AUTOTASK_STATUS"),16,0,32),1,120)),to_char(count("ABA_STATE")),to_char(substrb(dump(min("ABA_STATE"),16,0,32),1,120)),to_char(substrb(dump(max("ABA_STATE"),16,0,32),1,120)),to_char(count("ABA_STATE_TIME")),to_char(substrb(dump(min("ABA_STATE_TIME"),16,0,32),1,120)),to_char(substrb(dump(max("ABA_STATE_TIME"),16,0,32),1,120)),to_char(count("ABA_OS_PID")),to_char(substrb(dump(min("ABA_OS_PID"),16,0,32),1,120)),to_char(substrb(dump(max("ABA_OS_PID"),16,0,32),1,120)),to_char(count("ABA_START_TIME")),to_char(substrb(dump(min("ABA_START_TIME"),16,0,32),1,120)select table_name FROM dba_tables where tablespace_name='BSCHEMA'SELECT COUNT(*), SUM(blocks) FROM x$kewx_segments  WHERE owner = 'SYS' AND segment_name like 'SMON_SCN%'select procedure#,entrypoint# from procedureplsql$ where obj#=:1 order by procedure#select TIME_WAITED_MICRO from V$SYSTEM_EVENT  where event = 'Shared IO Pool Memory'select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"BLOCK#" val,count(*) cnt  from "SYS"."UNDO$" t  where "BLOCK#" is not null  group by "BLOCK#") order by valSELECT /* OPT_DYN_SAMP */ /*+ ALL_ROWS IGNORE_WHERE_CLAUSE NO_PARALLEL(SAMPLESUB) opt_param('parallel_execution_enabled', 'false') NO_PARALLEL_INDEX(SAMPLESUB) NO_SQL_TUNE */ NVL(SUM(C1),0), NVL(SUM(C2),0) FROM (SELECT /*+ IGNORE_WHERE_CLAUSE NO_PARALLEL("OT") FULL("OT") NO_PARALLEL_INDEX("OT") */ 1 AS C1, CASE WHEN BITAND("OT"."FLAGS",128)<>128 AND (BITAND("OT"."FLAGS",16)<>16 OR "OT"."NAME" NOT LIKE 'DR$%' AND "OT"."NAME" NOT LIKE 'DR#%') THEN 1 ELSE 0 END AS C2 FROM "SYS"."OBJ$" SAMPLE BLOCK (13.080169 , 1) SEED (1) "OT") SAMPLESUBdelete ntab$ where obj#=:1select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"SNAP_ID" val,count(*) cnt  from sys.ora_temp_1_ds_170009 t where "SNAP_ID" is not null  group by "SNAP_ID") order by valselect rt.inst_id,rtnum,decode(bitand(rtsta,1),1,'OPEN','CLOSED'), decode(bitand(rtsta,6),0,'DISABLED',2,'PRIVATE',6,'PUBLIC','UNKNOWN'), rtnlf,tirsid,to_date(rtots,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'), rtcln,rtseq, to_number(rtckp_scn), to_date(rtckp_tim,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'), to_number(rtenb), to_date(rtets,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'), to_number(rtdis), to_date(rtdit,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'), cpodr_seq, cpodr_bno, to_number(cpods), to_date(cpodt,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian') from x$kccrt rt, x$kcctir tr, x$kcccp  where rtnlf != 0 and tr.inst_id = rt.inst_id  and tirnum = rtnum and cptno = rtnumselect owner, segment_name, blocks from dba_segments where tablespace_name = :tsnameselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"NUMBER_OF_ARGS" val,count(*) cnt  from "SYS"."SCHEDULER$_JOB" t  where "NUMBER_OF_ARGS" is not null  group by "NUMBER_OF_ARGS") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"NUMBER_OF_ARGS" val,count(*) cnt  from "SYS"."SCHEDULER$_JOB" t  where "NUMBER_OF_ARGS" is not null  group by "NUMBER_OF_ARGS") order by valdelete from jirefreshsql$ where iobj# in ( select iobj# from jirefreshsql$ where tobj# = :1)select num_rows FROM dba_tables where table_name = 'T2'select recurrence_expr, max_count, comments, flags, end_date, reference_date, queue_owner, queue_name, queue_agent, fw_name  from sys.scheduler$_schedule  where obj# = :1insert into col$(obj#,name,intcol#,segcol#,type#,length,precision#,scale,null$,offset,fixedstorage,segcollength,deflength,default$,col#,property,charsetid,charsetform,spare1,spare2,spare3)values(:1,:2,:3,:4,:5,:6,decode(:5,182/*DTYIYM*/,:7,183/*DTYIDS*/,:7,decode(:7,0,null,:7)),decode(:5,2,decode(:8,-127/*MAXSB1MINAL*/,null,:8),178,:8,179,:8,180,:8,181,:8,182,:8,183,:8,231,:8,null),:9,0,:10,:11,decode(:12,0,null,:12),:13,:14,:15,:16,:17,:18,:19,:20)delete from ncomp_dll$ where obj#=:1 returning dllname into :2select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"INSTANCE_NUMBER" val,count(*) cnt  from "SYS"."WRH$_SEG_STAT" t  where "INSTANCE_NUMBER" is not null  group by "INSTANCE_NUMBER") order by valselect SUM(column_length) from all_ind_columns where table_name = 'LENTES'select grantee#,privilege#,nvl(col#,0),max(mod(nvl(option$,0),2))from objauth$ where obj#=:1 group by grantee#,privilege#,nvl(col#,0) order by grantee#select grantee#,privilege#,nvl(col#,0),max(mod(nvl(option$,0),2))from objauth$ where obj#=:1 group by grantee#,privilege#,nvl(col#,0) order by grantee#delete from WRH$_PGA_TARGET_ADVICE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select max(FA#) from SYS_FBA_FAselect pname, pval1 from sys.aux_stats$ where sname = 'SYSSTATS_MAIN' and pval1 IS NOT NULLSELECT TS#, OBJ#, DATAOBJ#, SUM(CHAIN_ROW_EXCESS_DELTA) FROM SYS.WRH$_SEG_STAT WHERE SNAP_ID > :B1 AND TS# <> 0 GROUP BY TS# , OBJ#, DATAOBJ# ORDER BY SUM(CHAIN_ROW_EXCESS_DELTA) DESCselect num_rows FROM dba_tables where table_name = 'GRAFICO'select num_rows FROM dba_tables where table_name = 'GRAFICO'select name, type_number, user_type_num, value,        flags, position  from sys.scheduler$_job_argument  where oid = :1SELECT occupant_name, occupant_desc, schema_name,                 move_procedure, move_procedure_desc, space_usage_kbytes          FROM   gv$sysaux_occupants          WHERE  inst_id = USERENV('INSTANCE')select min(minbkt),maxbkt,substrb(dump(min(val),16,0,32),1,120) minval,substrb(dump(max(val),16,0,32),1,120) maxval,sum(rep) sumrep, sum(repsq) sumrepsq, max(rep) maxrep, count(*) bktndv, sum(case when rep=1 then 1 else 0 end) unqrep from (select val,min(bkt) minbkt, max(bkt) maxbkt, count(val) rep, count(val)*count(val) repsq from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"BLOCK#" val, ntile(254) over (order by "BLOCK#") bkt  from "SYS"."IND$" t  where "BLOCK#" is not null) group by val) group by maxbkt order by maxbktDELETE /*+ dynamic_sampling(ST 4) dynamic_sampling_est_cdn(ST) */ FROM STATS_TARGET$ ST WHERE NOT EXISTS (SELECT /*+ unnest */ * FROM OBJ$ O WHERE O.OBJ# = ST.OBJ#)select num_rows FROM dba_tables where table_name = 'MEDICOS'select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"VECTOR_INDEX" val,count(*) cnt  from "SYS"."WRI$_SCH_VOTES" t  where "VECTOR_INDEX" is not null  group by "VECTOR_INDEX") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"VECTOR_INDEX" val,count(*) cnt  from "SYS"."WRI$_SCH_VOTES" t  where "VECTOR_INDEX" is not null  group by "VECTOR_INDEX") order by valBEGIN   BEGIN     IF (sys.is_vpd_enabled(sys.dictionary_obj_owner, sys.dictionary_obj_name, xdb.DBMS_XDBZ.IS_ENABLED_CONTENTS)) THEN       xdb.XDB_PITRIG_PKG.pitrig_truncate(sys.dictionary_obj_owner, sys.dictionary_obj_name);     ELSIF (sys.is_vpd_enabled(sys.dictionary_obj_owner, sys.dictionary_obj_name, xdb.DBMS_XDBZ.IS_ENABLED_RESMETADATA)) THEN       xdb.XDB_PITRIG_PKG.pitrig_dropmetadata(sys.dictionary_obj_owner, sys.dictionary_obj_name);     END IF;   EXCEPTION     WHEN OTHERS THEN      null;   END; END;select nvl(sum(d.blocks), 0)    from x$kewx_segments d,         (select distinct o1.segment_name name from x$kewx_segments o1            where o1.segment_name = 'AUD$' OR o1.segment_name = 'FGA_LOG$'          union all          select distinct o2.lob_name name from x$kewx_lobs o2            where o2.table_name = 'AUD$' OR o2.table_name = 'FGA_LOG$') s    where (d.owner = 'SYS' OR (d.owner = 'SYSTEM' AND d.segment_name <> 'FGA_LOG$'))           and (d.segment_name = s.name)select /*+  no_parallel_index(t, "SCHEDULER$_JOB_PK")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"SCHEDULER$_JOB_PK") */ count(*) as nrw,count(distinct sys_op_lbid(5924,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."SCHEDULER$_JOB" t where "OBJ#" is not nullselect /*+  no_parallel_index(t, "SCHEDULER$_JOB_PK")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"SCHEDULER$_JOB_PK") */ count(*) as nrw,count(distinct sys_op_lbid(5924,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."SCHEDULER$_JOB" t where "OBJ#" is not nullselect message_level, sequence_id, time_suggested from WRI$_ALERT_OUTSTANDING where reason_id = :1 and object_id = :2 and subobject_id = :3 and internal_instance_number = :4select message_level, sequence_id, time_suggested from WRI$_ALERT_OUTSTANDING where reason_id = :1 and object_id = :2 and subobject_id = :3 and internal_instance_number = :4select count(*) from dba_tables where tablespace_name='BSCHEMA'select u.name, o.name,o.obj#,o.type# from ind$ i, obj$ o, user$ u where i.obj#=:1 and o.obj#=i.bo# and o.owner#=u.user#delete from WRH$_BUFFERED_QUEUES tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select 1 from "SYS"."AQ$_SCHEDULER_FILEWATCHER_QT_L"select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"FLAGS" val,count(*) cnt  from "SYS"."INDPART$" t  where "FLAGS" is not null  group by "FLAGS") order by valselect SUM(column_length) from all_ind_columns where table_name = 'T1'SELECT USERENV('INSTANCE') FROM DUALdelete from WRH$_PGASTAT tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from smon_scn_time where scn =  (select min(scn) from smon_scn_time)delete from smon_scn_time where scn =  (select min(scn) from smon_scn_time)update clu$ set ts#=:2,file#=:3,block#=:4,cols=:5,size$=decode(:6,-1,null,:6),pctfree$=:7,pctused$=:8,initrans=:9,maxtrans=:10,hashkeys=:11,func=:12,extind=:13,avgchn=:14,degree=decode(:15,1,null,:15),instances=decode(:16,1,null,:16),dataobj#=:17,flags=:18,spare1=:19 where obj#=:1select count(FA#) from SYS_FBA_TRACKEDTABLES where OBJ# = 21702 and bitand(FLAGS, 128)=0delete from col$ where obj#=:1/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("SNAP_ID")),to_char(substrb(dump(min("SNAP_ID"),16,0,32),1,120)),to_char(substrb(dump(max("SNAP_ID"),16,0,32),1,120)),to_char(count("DBID")),to_char(substrb(dump(min("DBID"),16,0,32),1,120)),to_char(substrb(dump(max("DBID"),16,0,32),1,120)),to_char(count("INSTANCE_NUMBER")),to_char(substrb(dump(min("INSTANCE_NUMBER"),16,0,32),1,120)),to_char(substrb(dump(max("INSTANCE_NUMBER"),16,0,32),1,120)),to_char(count("TS#")),to_char(substrb(dump(min("TS#"),16,0,32),1,120)),to_char(substrb(dump(max("TS#"),16,0,32),1,120)),to_char(count("OBJ#")),to_char(substrb(dump(min("OBJ#"),16,0,32),1,120)),to_char(substrb(dump(max("OBJ#"),16,0,32),1,120)),to_char(count("DATAOBJ#")),to_char(substrb(dump(min("DATAOBJ#"),16,0,32),1,120)),to_char(substrb(dump(max("DATAOBJ#"),16,0,32),1,120)),to_char(count("LOGICAL_READSselect  INSTANCE_NUMBER , INSTANCE_NAME , HOST_NAME , VERSION , STARTUP_TIME , STATUS , PARALLEL , THREAD# , ARCHIVER , LOG_SWITCH_WAIT , LOGINS , SHUTDOWN_PENDING, DATABASE_STATUS, INSTANCE_ROLE, ACTIVE_STATE, BLOCKED, EDITION from GV$INSTANCE where inst_id = USERENV('Instance')SELECT DURATION FROM DBA_SCHEDULER_WINDOWS WHERE WINDOW_NAME = :B1 SELECT DURATION FROM DBA_SCHEDULER_WINDOWS WHERE WINDOW_NAME = :B1 select OBJOID, RUNTIME, JOBTYP, DUR from (  select a.obj# OBJOID, a.next_start_date RUNTIME, 2 JOBTYP, a.duration DUR    from sys.scheduler$_window a   where bitand(a.flags, 1) <> 0     and bitand(a.flags, 2) = 0     and bitand(a.flags, 64) = 0     and a.next_start_date <= :1     and a.next_start_date + a.duration > :2 union all  select b.obj#, b.next_start_date + b.duration,         4, numtodsinterval(0,'minute')  from sys.scheduler$_window b  where bitand(b.flags, 1) <> 0    and bitand(b.flags, 2) = 0    and bitand(b.flags, 64) = 0    and b.next_start_date <= :3    and b.next_start_date + b.duration > :4 union all  select d.obj#, c.attr_tstamp,         decode(bitand(c.flags, 131072), 0, 2, 3),         c.attr_intv  from sys.scheduler$_global_attribute c, sys.obj$ d, sys.obj$ e  where c.obj# = e.obj#    and e.name = 'CURRENT_OPEN_WINDOW'    and c.value = d.name    and d.type# = 69    and c.attr_tstamp is not null    and c.attr_intv is not null union all  select g.obj#, f.attr_tstamp + select /*+  no_parallel_index(t, "I_STATS_TARGET1")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_STATS_TARGET1") */ count(*) as nrw,count(distinct sys_op_lbid(446,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."STATS_TARGET$" t where "STALENESS" is not null or "OSIZE" is not null or "OBJ#" is not null or "STATUS" is not nullselect SUM(data_length) from all_tab_columns where table_name = 'LOCATIONS'select /*+  no_parallel_index(t, "WRM$_SCH_CONTROL_PK")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"WRM$_SCH_CONTROL_PK") */ count(*) as nrw,count(distinct sys_op_lbid(6550,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."WRI$_SCH_CONTROL" t where "SCHEDULE_ID" is not nullselect /*+  no_parallel_index(t, "WRM$_SCH_CONTROL_PK")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"WRM$_SCH_CONTROL_PK") */ count(*) as nrw,count(distinct sys_op_lbid(6550,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."WRI$_SCH_CONTROL" t where "SCHEDULE_ID" is not nullselect inst_id,-kzsprprv from x$kzsprSELECT DISTINCT OID FROM SYS.RECO_SCRIPT_BLOCK$ WHERE STATUS IN (:B3 , :B2 ) AND (SYSDATE -CTIME) >= :B1 select  SQL_TEXT , SQL_FULLTEXT , SQL_ID,  SHARABLE_MEM , PERSISTENT_MEM , RUNTIME_MEM , SORTS , LOADED_VERSIONS , OPEN_VERSIONS , USERS_OPENING , FETCHES , EXECUTIONS , PX_SERVERS_EXECUTIONS , END_OF_FETCH_COUNT, USERS_EXECUTING , LOADS , FIRST_LOAD_TIME, INVALIDATIONS, PARSE_CALLS , DISK_READS , DIRECT_WRITES , BUFFER_GETS , APPLICATION_WAIT_TIME, CONCURRENCY_WAIT_TIME, CLUSTER_WAIT_TIME, USER_IO_WAIT_TIME, PLSQL_EXEC_TIME, JAVA_EXEC_TIME, ROWS_PROCESSED , COMMAND_TYPE , OPTIMIZER_MODE , OPTIMIZER_COST, OPTIMIZER_ENV, OPTIMIZER_ENV_HASH_VALUE, PARSING_USER_ID , PARSING_SCHEMA_ID , PARSING_SCHEMA_NAME, KEPT_VERSIONS , ADDRESS , TYPE_CHK_HEAP , HASH_VALUE, OLD_HASH_VALUE, PLAN_HASH_VALUE, CHILD_NUMBER, SERVICE, SERVICE_HASH, MODULE, MODULE_HASH , ACTION , ACTION_HASH ,  SERIALIZABLE_ABORTS , OUTLINE_CATEGORY, CPU_TIME, ELAPSED_TIME, OUTLINE_SID, CHILD_ADDRESS, SQLTYPE, REMOTE, OBJECT_STATUS, LITERAL_HASH_VALUE, LAST_LOAD_TIME, IS_OBSOLETE, IS_BIND_SENSITIVE, IS_BIND_AWARE, IS_SHAREABLEdelete from icol$ where bo#=:1select value$ from sys.props$ where name = :1select value$ from sys.props$ where name = :1select value$ from sys.props$ where name = :1select value$ from sys.props$ where name = :1select job, nvl2(last_date, 1, 0) from sys.job$ where (((:1 <= next_date) and (next_date <= :2))    or  ((last_date is null) and (next_date < :3))) and (field1 = :4 or (field1 = 0 and 'Y' = :5)) and (this_date is null) and ((dbms_logstdby.db_is_logstdby = 0 and job < 1000000000) or  (dbms_logstdby.db_is_logstdby = 1 and job >= 1000000000)) order by next_date, jobinsert into wrh$_seg_stat   (snap_id, dbid, instance_number, ts#, obj#, dataobj#, logical_reads_total,    logical_reads_delta, buffer_busy_waits_total, buffer_busy_waits_delta,    db_block_changes_total, db_block_changes_delta, physical_reads_total,    physical_reads_delta, physical_writes_total, physical_writes_delta,    physical_reads_direct_total, physical_reads_direct_delta,    physical_writes_direct_total, physical_writes_direct_delta,    itl_waits_total, itl_waits_delta,    row_lock_waits_total, row_lock_waits_delta,    gc_buffer_busy_total, gc_buffer_busy_delta,    gc_cr_blocks_received_total, gc_cr_blocks_received_delta,    gc_cu_blocks_received_total, gc_cu_blocks_received_delta,    space_used_total, space_used_delta,    space_allocated_total, space_allocated_delta,    table_scans_total, table_scans_delta,    chain_row_excess_total, chain_row_excess_delta,    physical_read_requests_total, physical_read_requests_delta,    physical_write_requests_total, physical_write_requests_dinsert into wrh$_seg_stat   (snap_id, dbid, instance_number, ts#, obj#, dataobj#, logical_reads_total,    logical_reads_delta, buffer_busy_waits_total, buffer_busy_waits_delta,    db_block_changes_total, db_block_changes_delta, physical_reads_total,    physical_reads_delta, physical_writes_total, physical_writes_delta,    physical_reads_direct_total, physical_reads_direct_delta,    physical_writes_direct_total, physical_writes_direct_delta,    itl_waits_total, itl_waits_delta,    row_lock_waits_total, row_lock_waits_delta,    gc_buffer_busy_total, gc_buffer_busy_delta,    gc_cr_blocks_received_total, gc_cr_blocks_received_delta,    gc_cu_blocks_received_total, gc_cu_blocks_received_delta,    space_used_total, space_used_delta,    space_allocated_total, space_allocated_delta,    table_scans_total, table_scans_delta,    chain_row_excess_total, chain_row_excess_delta,    physical_read_requests_total, physical_read_requests_delta,    physical_write_requests_total, physical_write_requests_dSELECT O.NAME TABNAME FROM OBJ$ O, USER$ U WHERE U.NAME = 'SYS' AND O.NAME LIKE 'ORA_TEMP_%_DS_%' AND O.OWNER# = U.USER# AND O.TYPE# = 2 AND BITAND(O.FLAGS,2) != 0 AND O.CTIME < SYSTIMESTAMP - 30 AND ROWNUM <= :B1 delete from WRH$_TABLESPACE_STAT_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select num_rows FROM dba_tables where table_name = 'REGIONS'select increment$,minvalue,maxvalue,cycle#,order$,cache,highwater,audit$,flags from seq$ where obj#=:1select increment$,minvalue,maxvalue,cycle#,order$,cache,highwater,audit$,flags from seq$ where obj#=:1/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("OBJ#")),to_char(substrb(dump(min("OBJ#"),16,0,32),1,120)),to_char(substrb(dump(max("OBJ#"),16,0,32),1,120)),to_char(count("INTCOL#")),to_char(substrb(dump(min("INTCOL#"),16,0,32),1,120)),to_char(substrb(dump(max("INTCOL#"),16,0,32),1,120)),to_char(count("SAVTIME")),to_char(substrb(dump(min("SAVTIME"),16,0,32),1,120)),to_char(substrb(dump(max("SAVTIME"),16,0,32),1,120)),to_char(count("BUCKET")),to_char(substrb(dump(min("BUCKET"),16,0,32),1,120)),to_char(substrb(dump(max("BUCKET"),16,0,32),1,120)),to_char(count("ENDPOINT")),to_char(substrb(dump(min("ENDPOINT"),16,0,32),1,120)),to_char(substrb(dump(max("ENDPOINT"),16,0,32),1,120)),to_char(count("EPVALUE")),to_char(substrb(dump(min("EPVALUE"),16,0,32),1,120)),to_char(substrb(dump(max("EPVALUE"),16,0,32),1,120)),to_char(count("COLNAME")),to_char(select SUM(data_length) from all_tab_columns where table_name = 'ACER'select SUM(column_length) from all_ind_columns where table_name = 'POO'select ROWID from SYS_FBA_PARTITIONS where ROWNUM = 1begin    sys.dbms_aq_inv.internal_purge_queue_table(:1, :2, :3, :4, :5, :6, :7, :8); end;select o.owner#,o.obj#,decode(o.linkname,null,decode(u.name,null,'SYS',u.name),o.remoteowner),o.name,o.linkname,o.namespace,o.subname,o.type# from user$ u, obj$ o where u.user#(+)=o.owner# and o.type#=:1 and not exists (select p_obj# from dependency$ where p_obj# = o.obj#)select SUM(column_length) from all_ind_columns where table_name = 'LD'SELECT /*+ index(t) */ T.PROPERTY FROM SYS.TAB$ T WHERE T.OBJ# = :B1 UPDATE STATS_TARGET$ ST SET STATUS = :B3 , FLAGS = FLAGS - BITAND(FLAGS, :B2 ) WHERE OBJ# = :B1 UPDATE STATS_TARGET$ ST SET STATUS = :B3 , FLAGS = FLAGS - BITAND(FLAGS, :B2 ) WHERE OBJ# = :B1 select SUM(column_length) from all_ind_columns where table_name = 'LDA'insert into wrm$_snapshot_details     (snap_id, dbid, instance_number, table_id, begin_time, end_time)      values (:snap_id, :dbid, :instance_number, :bind1, :bind2, :bind3)insert into wrm$_snapshot_details     (snap_id, dbid, instance_number, table_id, begin_time, end_time)      values (:snap_id, :dbid, :instance_number, :bind1, :bind2, :bind3)delete from WRH$_SYSSTAT_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from superobj$ where subobj# = :1delete from superobj$ where subobj# = :1select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"SERIAL#" val,count(*) cnt  from "SYS"."STATS_TARGET$" t  where "SERIAL#" is not null  group by "SERIAL#") order by valBEGIN    prvt_advisor.recover_stale_tasks;  END;delete from WRH$_WAITCLASSMETRIC_HISTORY tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select /*+  no_parallel_index(t, "I_WRI$_OPTSTAT_H_OBJ#_ICOL#_ST")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_WRI$_OPTSTAT_H_OBJ#_ICOL#_ST") */ count(*) as nrw,count(distinct sys_op_lbid(477,'L',t.rowid)) as nlb,count(distinct hextoraw(sys_op_descend("OBJ#")||sys_op_descend("INTCOL#")||sys_op_descend("SYS_NC00014$")||sys_op_descend("COLNAME"))) as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."WRI$_OPTSTAT_HISTGRM_HISTORY" t where "OBJ#" is not null or "INTCOL#" is not null or "SYS_NC00014$" is not null or "COLNAME" is not nullselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"INSTANCE_NUMBER" val,count(*) cnt  from "SYS"."WRM$_DATABASE_INSTANCE" t  where "INSTANCE_NUMBER" is not null  group by "INSTANCE_NUMBER") order by valselect min(minbkt),maxbkt,substrb(dump(min(val),16,0,32),1,120) minval,substrb(dump(max(val),16,0,32),1,120) maxval,sum(rep) sumrep, sum(repsq) sumrepsq, max(rep) maxrep, count(*) bktndv, sum(case when rep=1 then 1 else 0 end) unqrep from (select val,min(bkt) minbkt, max(bkt) maxbkt, count(val) rep, count(val)*count(val) repsq from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"DATAOBJ#" val, ntile(254) over (order by "DATAOBJ#") bkt  from "SYS"."IND$" t  where "DATAOBJ#" is not null) group by val) group by maxbkt order by maxbktselect WRM$_DEEP_PURGE_INTERVAL.nextval into :bind1 from dualSELECT LOCKID FROM DBMS_LOCK_ALLOCATED WHERE NAME = :B1 FOR UPDATESELECT LOCKID FROM DBMS_LOCK_ALLOCATED WHERE NAME = :B1 FOR UPDATESELECT LOCKID FROM DBMS_LOCK_ALLOCATED WHERE NAME = :B1 FOR UPDATEdelete from objauth$ where obj#=:1delete from WRH$_SGA_TARGET_ADVICE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select decode(u.type#, 2, u.ext_username, u.name), o.name,        t.update$, t.insert$, t.delete$, t.enabled,        decode(bitand(t.property, 8192),8192, 1, 0),        decode(bitand(t.property, 65536), 65536, 1, 0),       decode(bitand(t.property, 131072), 131072, 1, 0),       (select o.name from obj$ o          where o.obj# = u.spare2 and o.type# =57)  from sys.obj$ o, sys.user$ u, sys.trigger$ t, sys.obj$ bo where t.baseobject=bo.obj# and bo.name = :1 and bo.spare3 = :2  and bo.namespace = 1  and t.obj#=o.obj# and o.owner#=u.user#  and o.type# = 12 and bitand(property,16)=0 and bitand(property,8)=0  order by o.obj#select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"STATUS" val,count(*) cnt  from "SYS"."STATS_TARGET$" t  where "STATUS" is not null  group by "STATUS") order by valselect /*+  no_parallel_index(t, "I_WRI$_OPTSTAT_OPR_STIME")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_WRI$_OPTSTAT_OPR_STIME") */ count(*) as nrw,count(distinct sys_op_lbid(482,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."WRI$_OPTSTAT_OPR" t where "SYS_NC00012$" is not nullselect srchcols, tab_id from rule_set_te$ where rs_obj# = :1 and  ec_obj# = :2select /*+  no_parallel_index(t, "WRM$_SCH_VOTES_PK")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"WRM$_SCH_VOTES_PK") */ count(*) as nrw,count(distinct sys_op_lbid(6552,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."WRI$_SCH_VOTES" t where "SCHEDULE_ID" is not null or "VECTOR_INDEX" is not nullselect /*+  no_parallel_index(t, "WRM$_SCH_VOTES_PK")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"WRM$_SCH_VOTES_PK") */ count(*) as nrw,count(distinct sys_op_lbid(6552,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."WRI$_SCH_VOTES" t where "SCHEDULE_ID" is not null or "VECTOR_INDEX" is not nullselect regid, regflags, numobjs, objarray, plsqlcallback, changelag,  username  from invalidation_registry$       begin          :cmp_min := dbms_backup_restore.protocol_component_number_min;           :cmp_max := dbms_backup_restore.protocol_component_number_max;           :pkg_vsn := to_char(:vsn_max, 'fm00')||'.'||                      to_char(:rel_max, 'fm00')||'.'||                      to_char(:upd_max, 'fm00')||'.'||                      to_char(:cmp_max, 'fm00');             end;select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"TYPE#" val,count(*) cnt  from "SYS"."SCHEDULER$_EVENT_LOG" t  where "TYPE#" is not null  group by "TYPE#") order by valSELECT count(*), sum(blocks) FROM dba_segments where    OWNER = 'XDB' and TABLESPACE_NAME = 'SYSAUX'select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"BLOCK#" val,count(*) cnt  from "SYS"."INDPART$" t  where "BLOCK#" is not null  group by "BLOCK#") order by valselect /*+  no_parallel_index(t, "WRH$_SEG_STAT_PK")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"WRH$_SEG_STAT_PK") */ count(*) as nrw,count(distinct sys_op_lbid(6465,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."WRH$_SEG_STAT" t where "DBID" is not null or "SNAP_ID" is not null or "INSTANCE_NUMBER" is not null or "TS#" is not null or "OBJ#" is not null or "DATAOBJ#" is not null select u.name, o.name, t.attributes  from sys.type$ t, sys.user$ u, sys.obj$ o   where  o.owner# = u.user#  AND  t.toid = o.oid$   and t.toid = :1 and t.version# = :2 select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"STARTUP_TIME" val,count(*) cnt  from "SYS"."RECENT_RESOURCE_INCARNATIONS$" t  where "STARTUP_TIME" is not null  group by "STARTUP_TIME") order by valdelete from WRH$_CR_BLOCK_SERVER tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) SELECT /* OPT_DYN_SAMP */ /*+ ALL_ROWS IGNORE_WHERE_CLAUSE NO_PARALLEL(SAMPLESUB) opt_param('parallel_execution_enabled', 'false') NO_PARALLEL_INDEX(SAMPLESUB) NO_SQL_TUNE */ NVL(SUM(C1),0), NVL(SUM(C2),0) FROM (SELECT /*+ NO_PARALLEL("ST") FULL("ST") NO_PARALLEL_INDEX("ST") */ 1 AS C1, 1 AS C2 FROM "SYS"."STATS_TARGET$" "ST") SAMPLESUBSELECT /* OPT_DYN_SAMP */ /*+ ALL_ROWS IGNORE_WHERE_CLAUSE NO_PARALLEL(SAMPLESUB) opt_param('parallel_execution_enabled', 'false') NO_PARALLEL_INDEX(SAMPLESUB) NO_SQL_TUNE */ NVL(SUM(C1),0), NVL(SUM(C2),0) FROM (SELECT /*+ NO_PARALLEL("ST") FULL("ST") NO_PARALLEL_INDEX("ST") */ 1 AS C1, 1 AS C2 FROM "SYS"."STATS_TARGET$" "ST") SAMPLESUBselect dbid, open_time, parallel, version, name, instance_name,host_name, platform_name     from V$DATABASE, V$INSTANCE, V$THREAD where open_time =  (select min(open_time) from V$THREAD where instance = instance_name)select smontabv.cnt, smontab.time_mp,    smontab.scn, smontab.num_mappings, smontab.tim_scn_map    from smon_scn_time smontab,         (select max(scn) scnmax,                 count(*)+sum(NVL2(TIM_SCN_MAP,NUM_MAPPINGS,0)) cnt                 from smon_scn_time) smontabv   where smontab.scn = smontabv.scnmaxselect smontabv.cnt, smontab.time_mp,    smontab.scn, smontab.num_mappings, smontab.tim_scn_map    from smon_scn_time smontab,         (select max(scn) scnmax,                 count(*)+sum(NVL2(TIM_SCN_MAP,NUM_MAPPINGS,0)) cnt                 from smon_scn_time) smontabv   where smontab.scn = smontabv.scnmaxselect count(FA#) from SYS_FBA_TRACKEDTABLES where OBJ# = 21703 and bitand(FLAGS, 128)=0select user# from sys.user$ where name = :1SELECT C.CID_KETCL, W.NUMBER_OF_WINDOWS + 1      FROM X$KETCL C, DBA_SCHEDULER_WINGROUP_MEMBERS WGM,           DBA_SCHEDULER_WINDOW_GROUPS W     WHERE C.WGRP_KETCL = WGM.WINDOW_GROUP_NAME       AND C.WGRP_KETCL = W.WINDOW_GROUP_NAME       AND WGM.WINDOW_NAME = :1     ORDER BY 1select text from view$ where rowid=:1select text from view$ where rowid=:1select timestamp, obj# from fixed_obj$ order by obj#select obj#, dataobj#, part#, hiboundlen, hiboundval, flags, ts#, file#, block#, pctfree$, initrans, maxtrans, analyzetime, samplesize, rowcnt, blevel, leafcnt, distkey, lblkkey, dblkkey, clufac, pctthres$, length(bhiboundval), bhiboundval from indpart$ where bo# = :1 order by part#select obj#, dataobj#, part#, hiboundlen, hiboundval, flags, ts#, file#, block#, pctfree$, initrans, maxtrans, analyzetime, samplesize, rowcnt, blevel, leafcnt, distkey, lblkkey, dblkkey, clufac, pctthres$, length(bhiboundval), bhiboundval from indpart$ where bo# = :1 order by part#select template_id, template_type, baseline_name_prefix,        start_time, end_time, day_of_week,        hour_in_day, duration, expiration,        repeat_interval, last_generated,        template_name   from WRM$_BASELINE_TEMPLATE  where dbid = :dbid select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"SNAP_ID" val,count(*) cnt  from "SYS"."WRM$_SNAPSHOT" t  where "SNAP_ID" is not null  group by "SNAP_ID") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"SNAP_ID" val,count(*) cnt  from "SYS"."WRM$_SNAPSHOT" t  where "SNAP_ID" is not null  group by "SNAP_ID") order by valselect a.next_start_date, a.objid, a.w_open from  (select b.obj# objid,          decode(bitand(b.flags, 64), 0, b.next_start_date,                 b.manual_open_time) next_start_date,          decode(bitand(b.flags, 66), 0, 0, 2, 1, 2) w_open  from sys.scheduler$_window b   where bitand(b.flags, 1) <> 0   order by 2) a  where rownum = 1select count(*) from sys.scheduler$_wingrp_member   where oid = :1 and member_oid = :2delete from WRH$_INSTANCE_RECOVERY tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from WRH$_DYN_REMASTER_STATS tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) SELECT ROWCNT, BLKCNT, ANALYZETIME FROM SYS.TAB$ WHERE OBJ# = :B1 AND BITAND(FLAGS, 16) != 0SELECT 'SYS_AUTO_SPCADV_'|| TO_CHAR(CURRENT_TIMESTAMP,'SSMIHH24DDMMYYYY') FROM DUALselect rowid, condition, ectx#, r_action, property, uactx_client from rule$  where obj# = :1select o.name from obj$ o where o.type# = 9 and bitand(o.flags, 2048) = 2048 and o.name like 'SYSFN%' and (sysdate-o.ctime) > 0.0007select baseobject,type#,update$,insert$,delete$,refnewname,refoldname,whenclause,definition,enabled,property,sys_evts,nttrigcol,nttrigatt,refprtname,rowid,actionlineno,trignameline,trignamecol, trignamecolofs,actioncolno from trigger$ where obj# =:1select attribute, value, pool_name from resource_storage_pool_mapping$ where status = 'ACTIVE'select SUM(data_length) from all_tab_columns where table_name = 'PERRO'select user#,password,datats#,tempts#,type#,defrole,resource$, ptime,decode(defschclass,NULL,'DEFAULT_CONSUMER_GROUP',defschclass),spare1,spare4,ext_username,spare2 from user$ where name=:1select user#,password,datats#,tempts#,type#,defrole,resource$, ptime,decode(defschclass,NULL,'DEFAULT_CONSUMER_GROUP',defschclass),spare1,spare4,ext_username,spare2 from user$ where name=:1SELECT /* OPT_DYN_SAMP */ /*+ ALL_ROWS IGNORE_WHERE_CLAUSE NO_PARALLEL(SAMPLESUB) opt_param('parallel_execution_enabled', 'false') NO_PARALLEL_INDEX(SAMPLESUB) NO_SQL_TUNE */ NVL(SUM(C1),0), NVL(SUM(C2),0) FROM (SELECT /*+ NO_PARALLEL("MM") FULL("MM") NO_PARALLEL_INDEX("MM") */ 1 AS C1, 1 AS C2 FROM "SYS"."MON_MODS_ALL$" "MM") SAMPLESUBSELECT /* OPT_DYN_SAMP */ /*+ ALL_ROWS IGNORE_WHERE_CLAUSE NO_PARALLEL(SAMPLESUB) opt_param('parallel_execution_enabled', 'false') NO_PARALLEL_INDEX(SAMPLESUB) NO_SQL_TUNE */ NVL(SUM(C1),0), NVL(SUM(C2),0) FROM (SELECT /*+ IGNORE_WHERE_CLAUSE NO_PARALLEL("IND") FULL("IND") NO_PARALLEL_INDEX("IND") */ 1 AS C1, CASE WHEN BITAND("IND"."FLAGS",5145)=0 AND "IND"."TYPE#"<>8 AND "IND"."TYPE#"<>4 THEN 1 ELSE 0 END AS C2 FROM "SYS"."IND$" SAMPLE BLOCK (3.039216 , 1) SEED (1) "IND") SAMPLESUBselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */max("NAME") val,count(*) cnt  from "SYS"."UNDO$" t  where "NAME" is not null  group by nlssort("NAME", 'NLS_SORT = binary')) order by nlssort(val,'NLS_SORT = binary')select nvl(sum(space),0) from recyclebin$ where ts# = :1select /*+ index(idl_sb4$ i_idl_sb41) +*/ piece#,length,piece from idl_sb4$ where obj#=:1 and part=:2 and version=:3 order by piece#select /*+ index(idl_sb4$ i_idl_sb41) +*/ piece#,length,piece from idl_sb4$ where obj#=:1 and part=:2 and version=:3 order by piece#SELECT /*+ leading(u) use_nl_with_index(o) */ O.OBJ# FROM SYS.USER$ U, SYS.OBJ$ O WHERE U.NAME = :B3 AND O.OWNER# = U.USER# AND O.NAME = :B2 AND O.NAMESPACE = 1 AND O.REMOTEOWNER IS NULL AND O.LINKNAME IS NULL AND (O.SUBNAME IS NULL AND :B1 IS NULL OR O.SUBNAME = :B1 ) AND O.TYPE# IN (2,19,34)delete from WRH$_PARAMETER_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select res_plan, next_start_date, duration, schedule_expr, flags, comments,       end_date, start_date, unused_slave_policy, creator, max_slave_percent,      min_slave_percent, schedule_id, priority, max_conc_jobs,       last_start_date, actual_start_date,       manual_open_time, manual_duration from sys.scheduler$_window  where obj# = :1select /*+  no_parallel_index(t, "I_TABPART_BOPART$")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_TABPART_BOPART$") */ count(*) as nrw,count(distinct sys_op_lbid(571,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."TABPART$" t where "BO#" is not null or "PART#" is not nullselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"DEST_OID" val,count(*) cnt  from "SYS"."SCHEDULER$_JOB" t  where "DEST_OID" is not null  group by "DEST_OID") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"DEST_OID" val,count(*) cnt  from "SYS"."SCHEDULER$_JOB" t  where "DEST_OID" is not null  group by "DEST_OID") order by valselect t.schema, t.name, t.objno, t.flags, t.timezone from  system.aq$_queue_tables t, sys.aq$_queue_table_affinities aft  where aft.table_objno = t.objno and aft.owner_instance = :1        and bitand(t.flags, 4+16+32+64+128+256) = 0        and NOT        ( t.name in ('DEF$_AQCALL' , 'DEF$_AQERROR') and t.schema = 'SYSTEM')        and exists (select 1 from system.aq$_queues q where                q.table_objno = t.objno and q.usage = 0)select res_grp_name, affinity, flags, comments, default_priority,  log_history  from sys.scheduler$_class  where obj# = :1select num_rows FROM dba_tables where table_name = 'X'select value$ from props$ where name = 'GLOBAL_DB_NAME'select owner#,name,namespace,remoteowner,linkname,p_timestamp,p_obj#, nvl(property,0),subname,type#,d_attrs from dependency$ d, obj$ o where d_obj#=:1 and p_obj#=obj#(+) order by order#select owner#,name,namespace,remoteowner,linkname,p_timestamp,p_obj#, nvl(property,0),subname,type#,d_attrs from dependency$ d, obj$ o where d_obj#=:1 and p_obj#=obj#(+) order by order#select owner#,name,namespace,remoteowner,linkname,p_timestamp,p_obj#, nvl(property,0),subname,type#,d_attrs from dependency$ d, obj$ o where d_obj#=:1 and p_obj#=obj#(+) order by order#select ks.inst_id,ksuxsins,ksuxssid,ksuxshst,ksuxsver,ksuxstim,decode(ksuxssts,0,'STARTED',1,'MOUNTED',2,'OPEN',3,'OPEN MIGRATE','UNKNOWN'),decode(ksuxsshr,0,'NO',1,'YES',2,NULL),ksuxsthr,decode(ksuxsarc,0,'STOPPED',1,'STARTED','FAILED'),decode(ksuxslsw,0,NULL,2,'ARCHIVE LOG',3,'CLEAR LOG',4,'CHECKPOINT',       5,'REDO GENERATION'),decode(ksuxsdba,0,'ALLOWED','RESTRICTED'),decode(ksuxsshp,0,'NO','YES'),decode(kvitval,0,'ACTIVE',2147483647,'SUSPENDED','INSTANCE RECOVERY'),decode(ksuxsrol,1,'PRIMARY_INSTANCE',2,'SECONDARY_INSTANCE','UNKNOWN'), decode(qui_state,0,'NORMAL',1,'QUIESCING',2,'QUIESCED','UNKNOWN'), decode(bitand(ksuxsdst, 1), 0, 'NO', 1, 'YES', 'NO'), decode(ksuxsedition, 1, 'PO', 2, 'SE', 4, 'EE', 8, 'XE', 'UNKNOWN') from x$ksuxsinst ks, x$kvit kv, x$quiesce qu where kvittag = 'kcbwst'SELECT DBID FROM V$DATABASEdelete from WRH$_DB_CACHE_ADVICE_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"FLAGS" val,count(*) cnt  from "SYS"."SCHEDULER$_JOB" t  where "FLAGS" is not null  group by "FLAGS") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"FLAGS" val,count(*) cnt  from "SYS"."SCHEDULER$_JOB" t  where "FLAGS" is not null  group by "FLAGS") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"FLAGS" val,count(*) cnt  from "SYS"."SCHEDULER$_WINDOW" t  where "FLAGS" is not null  group by "FLAGS") order by valselect /*+  no_parallel_index(t, "I_MON_MODS_ALL$_OBJ")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_MON_MODS_ALL$_OBJ") */ count(*) as nrw,count(distinct sys_op_lbid(464,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."MON_MODS_ALL$" t where "OBJ#" is not nullselect min(minbkt),maxbkt,substrb(dump(min(val),16,0,32),1,120) minval,substrb(dump(max(val),16,0,32),1,120) maxval,sum(rep) sumrep, sum(repsq) sumrepsq, max(rep) maxrep, count(*) bktndv, sum(case when rep=1 then 1 else 0 end) unqrep from (select val,min(bkt) minbkt, max(bkt) maxbkt, count(val) rep, count(val)*count(val) repsq from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"BO#" val, ntile(254) over (order by "BO#") bkt  from "SYS"."IND$" t  where "BO#" is not null) group by val) group by maxbkt order by maxbktselect table_objno, primary_instance, secondary_instance, owner_instance from sys.aq$_queue_table_affinities a  where  a.owner_instance <> :1 and dbms_aqadm_syscalls.get_owner_instance(a.primary_instance,       a.secondary_instance,       a.owner_instance) = :2  order by table_objnoupdate ind$ set ts#=:2,file#=:3,block#=:4,intcols=:5,type#=:6,flags=:7,property=:8,pctfree$=:9,initrans=:10,maxtrans=:11,blevel=:12,leafcnt=:13,distkey=:14,lblkkey=:15,dblkkey=:16,clufac=:17,cols=:18,analyzetime=:19,samplesize=:20,dataobj#=:21,degree=decode(:22,1,null,:22),instances=decode(:23,1,null,:23),rowcnt=:24,pctthres$=:31*256+:25, indmethod#=:26, trunccnt=:27,spare4=:29,spare2=:30,spare6=:32where obj#=:1update ind$ set ts#=:2,file#=:3,block#=:4,intcols=:5,type#=:6,flags=:7,property=:8,pctfree$=:9,initrans=:10,maxtrans=:11,blevel=:12,leafcnt=:13,distkey=:14,lblkkey=:15,dblkkey=:16,clufac=:17,cols=:18,analyzetime=:19,samplesize=:20,dataobj#=:21,degree=decode(:22,1,null,:22),instances=decode(:23,1,null,:23),rowcnt=:24,pctthres$=:31*256+:25, indmethod#=:26, trunccnt=:27,spare4=:29,spare2=:30,spare6=:32where obj#=:1SELECT /* OPT_DYN_SAMP */ /*+ ALL_ROWS IGNORE_WHERE_CLAUSE NO_PARALLEL(SAMPLESUB) opt_param('parallel_execution_enabled', 'false') NO_PARALLEL_INDEX(SAMPLESUB) NO_SQL_TUNE */ NVL(SUM(C1),0), NVL(SUM(C2),0) FROM (SELECT /*+ IGNORE_WHERE_CLAUSE NO_PARALLEL("O") FULL("O") NO_PARALLEL_INDEX("O") */ 1 AS C1, CASE WHEN "O"."TYPE#"=34 AND (BITAND("O"."FLAGS",16)<>16 OR "O"."NAME" NOT LIKE 'DR$%' AND "O"."NAME" NOT LIKE 'DR#%') THEN 1 ELSE 0 END AS C2 FROM "SYS"."OBJ$" SAMPLE BLOCK (13.080169 , 1) SEED (1) "O") SAMPLESUBselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"TS#" val,count(*) cnt  from "SYS"."IND$" t  where "TS#" is not null  group by "TS#") order by valselect cpu_capable, io_capable from resource_capability$ where status = 'ACTIVE'select nvl(sum(blocks), 0) from x$kewx_segments where owner = :ownerdelete from tab_stats$ where obj#=:1delete from tab_stats$ where obj#=:1select t_metrics_id, t_instance_name from WRI$_ALERT_THRESHOLD where t_object_type = :1 and t_object_name = :2 and t_flags != :3 for updateSELECT /* OPT_DYN_SAMP */ /*+ ALL_ROWS IGNORE_WHERE_CLAUSE NO_PARALLEL(SAMPLESUB) opt_param('parallel_execution_enabled', 'false') NO_PARALLEL_INDEX(SAMPLESUB) NO_SQL_TUNE */ NVL(SUM(C1),0), NVL(SUM(C2),0) FROM (SELECT /*+ IGNORE_WHERE_CLAUSE NO_PARALLEL("I") FULL("I") NO_PARALLEL_INDEX("I") */ 1 AS C1, CASE WHEN BITAND("I"."PROPERTY",32)<>32 AND BITAND("I"."PROPERTY",64)<>64 AND BITAND("I"."FLAGS",2)<>2 AND "I"."TYPE#"<>4 AND "I"."TYPE#"<>8 AND BITAND("I"."FLAGS",5145)=0 THEN 1 ELSE 0 END AS C2 FROM "SYS"."IND$" SAMPLE BLOCK (3.039216 , 1) SEED (1) "I") SAMPLESUBselect /*+ FIRST_ROWS(1) */ x.C1, x.C2, x.C3 from  (select a.obj# C1,          decode(bitand(a.flags, 64), 0, a.next_start_date,                 a.manual_open_time) C2,          decode(bitand(a.flags, 64), 0, a.duration, a.manual_duration) C3,          decode(bitand(a.flags, 64), 0, a.priority, 0) C4   from sys.scheduler$_window a   where bitand(a.flags, 1) = 1     and (a.next_start_date >= systimestamp or bitand(a.flags, 2) <> 0 or          bitand(a.flags, 64) <> 0)     and a.obj# in (select b.member_oid from sys.scheduler$_wingrp_member b                    where b.oid = :1)) x  order by x.C2, x.C4, x.C3 DESCselect /*+ FIRST_ROWS(1) */ x.C1, x.C2, x.C3 from  (select a.obj# C1,          decode(bitand(a.flags, 64), 0, a.next_start_date,                 a.manual_open_time) C2,          decode(bitand(a.flags, 64), 0, a.duration, a.manual_duration) C3,          decode(bitand(a.flags, 64), 0, a.priority, 0) C4   from sys.scheduler$_window a   where bitand(a.flags, 1) = 1     and (a.next_start_date >= systimestamp or bitand(a.flags, 2) <> 0 or          bitand(a.flags, 64) <> 0)     and a.obj# in (select b.member_oid from sys.scheduler$_wingrp_member b                    where b.oid = :1)) x  order by x.C2, x.C4, x.C3 DESCselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"TS#" val,count(*) cnt  from "SYS"."UNDO$" t  where "TS#" is not null  group by "TS#") order by valSELECT ID FROM WWV_FLOW_MAIL_QUEUE delete from idl_sb4$ where obj#=:1 and part=:2select audit$,properties from type_misc$ where obj#=:1select audit$,properties from type_misc$ where obj#=:1select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"PROPERTY" val,count(*) cnt  from "SYS"."IND$" t  where "PROPERTY" is not null  group by "PROPERTY") order by valDELETE FROM SYS.SCHEDULER$_EVENT_LOG WHERE DBID IS NULL AND LOG_ID IN (SELECT E.LOG_ID FROM SYS.SCHEDULER$_EVENT_LOG E WHERE E.TYPE# = 69 AND E.LOG_DATE < :B2 - NUMTODSINTERVAL(:B1 , 'DAY'))select SUM(data_length) from all_tab_columns where table_name = 'RT'LOCK TABLE "SYS"."ORA_TEMP_1_DS_170009" IN EXCLUSIVE MODE  NOWAIT select inst_id,ksullms,ksullws,ksullcs,ksullhs,ksullmu,cpu_count, decode(cpu_core_count,0,to_number(null),cpu_core_count), decode(cpu_socket_count,0,to_number(null),cpu_socket_count), cpu_count_hwm, decode(cpu_core_count_hwm,0,to_number(null),cpu_core_count_hwm), decode(cpu_socket_count_hwm,0,to_number(null),cpu_socket_count_hwm) from x$ksullSELECT SPARE4 FROM SYS.OPTSTAT_HIST_CONTROL$ WHERE SNAME = :B1 SELECT SPARE4 FROM SYS.OPTSTAT_HIST_CONTROL$ WHERE SNAME = :B1 select num_rows FROM dba_tables where table_name = 'EMPLOYEES'delete from WRH$_UNDOSTAT tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from WRH$_PROCESS_MEMORY_SUMMARY tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select sval1 from sys.optstat_hist_control$ where sname = 'STATS_RETENTION'select OBJOID, RETRYCNT, FLAGS, STATUS, ISLW, PARNT, JDESTID FROM (  select a.obj# OBJOID, a.retry_count RETRYCNT,     a.job_status STATUS, a.flags FLAGS, a.running_instance RUNINST,     0 ISLW, 0 PARNT, a.job_dest_id JDESTID  from sys.scheduler$_job a  union all  select b.obj#, b.retry_count, b.job_status, b.flags, b.running_instance, 1,    decode(bitand(b.flags, 137438953472), 0, 0, b.program_oid), b.job_dest_id  from sys.scheduler$_lightweight_job b )  where bitand(STATUS, 2) = 2   and ( RUNINST = :1  or ( RUNINST is not null            and  RUNINST not in (select inst_id from gv$instance)))SELECT TASK_ID FROM SYS.DBA_ADVISOR_TASKS WHERE STATUS# = :B1 SELECT COUNT(DISTINCT(OBJ#)) FROM SYS.WRH$_SEG_STAT WHERE SNAP_ID > :B1 AND SPACE_USED_DELTA != 0      begin          dbms_rcvman.resetAll;       end;select audit$,options from procedure$ where obj#=:1select audit$,options from procedure$ where obj#=:1select o.owner#,o.name,o.namespace,o.remoteowner,o.linkname,o.subname from obj$ o where o.obj#=:1select o.owner#,o.name,o.namespace,o.remoteowner,o.linkname,o.subname from obj$ o where o.obj#=:1SELECT (SUM(LENGTH)+COUNT(*))*2 FROM USER$ U, OBJ$ O, IND$ I, ICOL$ IC, COL$ C WHERE U.NAME = :B2 AND O.NAME = :B1 AND U.USER# = O.OWNER# AND O.OBJ# = I.OBJ# AND O.OBJ# = IC.OBJ# AND IC.BO# = C.OBJ# AND IC.INTCOL# = C.INTCOL#SELECT /* OPT_DYN_SAMP */ /*+ ALL_ROWS IGNORE_WHERE_CLAUSE NO_PARALLEL(SAMPLESUB) opt_param('parallel_execution_enabled', 'false') NO_PARALLEL_INDEX(SAMPLESUB) NO_SQL_TUNE */ NVL(SUM(C1),0), NVL(SUM(C2),0) FROM (SELECT /*+ IGNORE_WHERE_CLAUSE NO_PARALLEL("T") FULL("T") NO_PARALLEL_INDEX("T") */ 1 AS C1, CASE WHEN BITAND("T"."TRIGFLAG",67108864)<>67108864 AND BITAND("T"."PROPERTY",576)=0 AND BITAND("T"."FLAGS",536870912)<>536870912 AND BITAND("T"."FLAGS",2097152)<>2097152 AND BITAND("T"."PROPERTY",4194304)<>4194304 AND BITAND("T"."PROPERTY",8388608)<>8388608 THEN 1 ELSE 0 END AS C2 FROM "SYS"."TAB$" SAMPLE BLOCK (3.039216 , 1) SEED (1) "T") SAMPLESUBselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"INSTANCE_NUMBER" val,count(*) cnt  from "SYS"."WRM$_SNAPSHOT" t  where "INSTANCE_NUMBER" is not null  group by "INSTANCE_NUMBER") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"INSTANCE_NUMBER" val,count(*) cnt  from "SYS"."WRM$_SNAPSHOT" t  where "INSTANCE_NUMBER" is not null  group by "INSTANCE_NUMBER") order by valselect max(maxconcurrency) from sys.wrh$_undostat where instance_number = :1 and dbid = :2 and snap_id in  (select snap_id from dba_hist_snapshot where end_interval_time >     (select max(end_interval_time)-7 from dba_hist_snapshot))select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"OPERATION_ID" val,count(*) cnt  from "SYS"."KET$_CLIENT_TASKS" t  where "OPERATION_ID" is not null  group by "OPERATION_ID") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"OPERATION_ID" val,count(*) cnt  from "SYS"."KET$_CLIENT_TASKS" t  where "OPERATION_ID" is not null  group by "OPERATION_ID") order by valselect 1 from dual where exists (select 1 from system.repcat$_repprop prop  where prop.type in (-1,2,9,-4) and prop.how in (1,3))select  NUM , NAME , TYPE , VALUE , DISPLAY_VALUE, ISDEFAULT , ISSES_MODIFIABLE , ISSYS_MODIFIABLE , ISINSTANCE_MODIFIABLE, ISMODIFIED , ISADJUSTED , ISDEPRECATED, ISBASIC, DESCRIPTION, UPDATE_COMMENT, HASH  from GV$PARAMETER where inst_id = USERENV('Instance')delete lob$ where obj#=:1select unique name from resource_consumer_group$ where status='ACTIVE'select cachedblk, cachehit, logicalread from ind_stats$ where obj#=:1insert into wrh$_sysmetric_history     (snap_id, dbid, instance_number,      begin_time, end_time, intsize, group_id, metric_id, value)  select      :snap_id, :dbid, :instance_number,      begtime, endtime, intsize_csec,      groupid, metricid, value  from x$kewmdrmv  order by groupid, metricid, begtimeinsert into wrh$_sysmetric_history     (snap_id, dbid, instance_number,      begin_time, end_time, intsize, group_id, metric_id, value)  select      :snap_id, :dbid, :instance_number,      begtime, endtime, intsize_csec,      groupid, metricid, value  from x$kewmdrmv  order by groupid, metricid, begtimedelete from WRH$_RESOURCE_LIMIT tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from access$ where d_obj#=:1insert into "SYS"."ALERT_QT"  (q_name, msgid, corrid, priority, state, delay, expiration,   time_manager_info, local_order_no, chain_no, enq_time, step_no, enq_uid,   enq_tid, retry_count, exception_qschema, exception_queue, recipient_key,   dequeue_msgid, user_data, sender_name, sender_address, sender_protocol,   user_prop, cscn, dscn)   values (:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12, :13, :14, 0, :15,         :16, :17, :18, :19, :20, :21, :22, :23, :24, :25)/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("RESOURCE_TYPE")),to_char(substrb(dump(min("RESOURCE_TYPE"),16,0,32),1,120)),to_char(substrb(dump(max("RESOURCE_TYPE"),16,0,32),1,120)),to_char(count("RESOURCE_ID")),to_char(substrb(dump(min("RESOURCE_ID"),16,0,32),1,120)),to_char(substrb(dump(max("RESOURCE_ID"),16,0,32),1,120)),to_char(count("RESOURCE_NAME")),to_char(substrb(dump(min("RESOURCE_NAME"),16,0,32),1,120)),to_char(substrb(dump(max("RESOURCE_NAME"),16,0,32),1,120)),to_char(count("DB_UNIQUE_NAME")),to_char(substrb(dump(min("DB_UNIQUE_NAME"),16,0,32),1,120)),to_char(substrb(dump(max("DB_UNIQUE_NAME"),16,0,32),1,120)),to_char(count("DB_DOMAIN")),to_char(substrb(dump(min("DB_DOMAIN"),16,0,32),1,120)),to_char(substrb(dump(max("DB_DOMAIN"),16,0,32),1,120)),to_char(count("INSTANCE_NAME")),to_char(substrb(dump(min("INSTANCE_NAME"),16,0,32)select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"TABLE_SCANS_DELTA" val,count(*) cnt  from "SYS"."WRH$_SEG_STAT" t  where "TABLE_SCANS_DELTA" is not null  group by "TABLE_SCANS_DELTA") order by valupdate wrh$_seg_stat_obj sso    set (index_type, base_obj#, base_object_name, base_object_owner)         =        (select decode(ind.type#,                       1, 'NORMAL'||                          decode(bitand(ind.property, 4), 0, '', 4, '/REV'),                      2, 'BITMAP', 3, 'CLUSTER', 4, 'IOT - TOP',                       5, 'IOT - NESTED', 6, 'SECONDARY', 7, 'ANSI',                       8, 'LOB', 9, 'DOMAIN') as index_type,                base_obj.obj# as base_obj#,                base_obj.name as base_object_name,                base_owner.name as base_object_owner         from   sys.ind$  ind,                sys.user$ base_owner,                sys.obj$  base_obj         where  ind.obj#     = sso.obj#           and  ind.dataobj# = sso.dataobj#           and  ind.bo#      = base_obj.obj#           and  base_obj.owner# = base_owner.user#)  where  sso.dbid        = :dbid    and  (ts#, obj#, dataobj#)         in (select tsn_kewrseg, objn_kewrseg, objd_kewrseg             update wrh$_seg_stat_obj sso    set (index_type, base_obj#, base_object_name, base_object_owner)         =        (select decode(ind.type#,                       1, 'NORMAL'||                          decode(bitand(ind.property, 4), 0, '', 4, '/REV'),                      2, 'BITMAP', 3, 'CLUSTER', 4, 'IOT - TOP',                       5, 'IOT - NESTED', 6, 'SECONDARY', 7, 'ANSI',                       8, 'LOB', 9, 'DOMAIN') as index_type,                base_obj.obj# as base_obj#,                base_obj.name as base_object_name,                base_owner.name as base_object_owner         from   sys.ind$  ind,                sys.user$ base_owner,                sys.obj$  base_obj         where  ind.obj#     = sso.obj#           and  ind.dataobj# = sso.dataobj#           and  ind.bo#      = base_obj.obj#           and  base_obj.owner# = base_owner.user#)  where  sso.dbid        = :dbid    and  (ts#, obj#, dataobj#)         in (select tsn_kewrseg, objn_kewrseg, objd_kewrseg             select dbid from wrm$_database_instance group by dbidSELECT COUNT(UNQ) UNQ, COUNT(PFX) PFX FROM (SELECT /*+ first_rows(1) leading(cc) */ CD.TYPE# UNQ, NULL PFX FROM SYS.CCOL$ CC, SYS.CDEF$ CD WHERE CC.OBJ# = :B2 AND CC.INTCOL# = :B1 AND CD.CON# = CC.CON# AND CD.OBJ# = CC.OBJ# AND CD.ENABLED IS NOT NULL AND CD.INTCOLS = 1 AND CD.TYPE# IN (2,3) AND BITAND(CD.DEFER, 2+4) = 4 AND ROWNUM < 2 UNION ALL SELECT /*+ first_rows(1) leading(i) */ CASE WHEN I.INTCOLS = 1 AND BITAND(I.PROPERTY,1) = 1 THEN 3 ELSE NULL END UNQ, CASE WHEN IC.POS# = 1 THEN 1 ELSE NULL END PFX FROM SYS.IND$ I, SYS.ICOL$ IC WHERE I.BO# = :B2 AND I.BO# = IC.BO# AND IC.INTCOL# = :B1 AND I.OBJ# = IC.OBJ# AND BITAND(I.FLAGS,1025) = 0 AND ROWNUM < 2 )select SUM(column_length) from all_ind_columns where table_name = 'INTEL'SELECT count(*), sum(blocks) FROM dba_segments where    OWNER = 'SYS' and TABLESPACE_NAME = 'SYSAUX' and        SEGMENT_NAME like '%PLSCOPE%'select last_sample_date_num, last_sample_date, total_samples from WRI$_DBU_CPU_USAGE_SAMPLE where dbid     = :dbid and version  = :versionselect last_sample_date_num, last_sample_date, total_samples from WRI$_DBU_CPU_USAGE_SAMPLE where dbid     = :dbid and version  = :versionselect last_sample_date_num, last_sample_date, total_samples from WRI$_DBU_CPU_USAGE_SAMPLE where dbid     = :dbid and version  = :versioncall WWV_FLOW_MAIL.PUSH_QUEUE (  )select /*+  no_parallel_index(t, "WRH$_SYSMETRIC_SUMMARY_INDEX")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"WRH$_SYSMETRIC_SUMMARY_INDEX") */ count(*) as nrw,count(distinct sys_op_lbid(6477,'L',t.rowid)) as nlb,count(distinct hextoraw(sys_op_descend("DBID")||sys_op_descend("SNAP_ID")||sys_op_descend("INSTANCE_NUMBER")||sys_op_descend("GROUP_ID")||sys_op_descend("METRIC_ID"))) as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."WRH$_SYSMETRIC_SUMMARY" t where "DBID" is not null or "SNAP_ID" is not null or "INSTANCE_NUMBER" is not null or "GROUP_ID" is not null or "METRIC_ID" is not nullINSERT INTO RECENT_RESOURCE_INCARNATIONS$ ( RESOURCE_TYPE, RESOURCE_ID, RESOURCE_NAME, DB_UNIQUE_NAME, DB_DOMAIN, INSTANCE_NAME, HOST_NAME, STARTUP_TIME, LOCATION, INCARNATION ) SELECT 'INSTANCE', INSTANCE_NUMBER, INSTANCE_NAME, :B2 , :B1 , INSTANCE_NAME, HOST_NAME, SYS_EXTRACT_UTC( DBMS_HA_ALERTS_PRVT.INSTANCE_STARTUP_TIMESTAMP_TZ(VI.STARTUP_TIME)), HOST_NAME, '==N/A==' FROM V$INSTANCE VIupdate sys.scheduler$_job set  next_run_date = :1, last_end_date = :2, retry_count = :3, run_count = :4, running_instance = :5, running_slave = :6, job_status = :7 where  obj# = :8update sys.scheduler$_job set  next_run_date = :1, last_end_date = :2, retry_count = :3, run_count = :4, running_instance = :5, running_slave = :6, job_status = :7 where  obj# = :8update sys.scheduler$_job set  next_run_date = :1, last_end_date = :2, retry_count = :3, run_count = :4, running_instance = :5, running_slave = :6, job_status = :7 where  obj# = :8update sys.scheduler$_job set  next_run_date = :1, last_end_date = :2, retry_count = :3, run_count = :4, running_instance = :5, running_slave = :6, job_status = :7 where  obj# = :8select inst_id,fnfno,fnnam from x$kccfn where fnnam is not null and bitand(fnflg, 4) != 4 and fntyp=4insert into sys.wri$_optstat_histhead_history  (obj#,intcol#,flags,expression,colname,savtime)  values (:1, :2, :3, :4, :5, :6)insert into sys.col_usage$ (obj#, intcol#, equality_preds, equijoin_preds, nonequijoin_preds, range_preds, like_preds, null_preds, timestamp) values (   :objn, :coln,   decode(bitand(:flag,1),0,0,1),   decode(bitand(:flag,2),0,0,1),   decode(bitand(:flag,4),0,0,1),   decode(bitand(:flag,8),0,0,1),   decode(bitand(:flag,16),0,0,1),   decode(bitand(:flag,32),0,0,1),   :time)insert into sys.col_usage$ (obj#, intcol#, equality_preds, equijoin_preds, nonequijoin_preds, range_preds, like_preds, null_preds, timestamp) values (   :objn, :coln,   decode(bitand(:flag,1),0,0,1),   decode(bitand(:flag,2),0,0,1),   decode(bitand(:flag,4),0,0,1),   decode(bitand(:flag,8),0,0,1),   decode(bitand(:flag,16),0,0,1),   decode(bitand(:flag,32),0,0,1),   :time)insert into sys.col_usage$ (obj#, intcol#, equality_preds, equijoin_preds, nonequijoin_preds, range_preds, like_preds, null_preds, timestamp) values (   :objn, :coln,   decode(bitand(:flag,1),0,0,1),   decode(bitand(:flag,2),0,0,1),   decode(bitand(:flag,4),0,0,1),   decode(bitand(:flag,8),0,0,1),   decode(bitand(:flag,16),0,0,1),   decode(bitand(:flag,32),0,0,1),   :time)insert into sys.col_usage$ (obj#, intcol#, equality_preds, equijoin_preds, nonequijoin_preds, range_preds, like_preds, null_preds, timestamp) values (   :objn, :coln,   decode(bitand(:flag,1),0,0,1),   decode(bitand(:flag,2),0,0,1),   decode(bitand(:flag,4),0,0,1),   decode(bitand(:flag,8),0,0,1),   decode(bitand(:flag,16),0,0,1),   decode(bitand(:flag,32),0,0,1),   :time)insert into sys.col_usage$ (obj#, intcol#, equality_preds, equijoin_preds, nonequijoin_preds, range_preds, like_preds, null_preds, timestamp) values (   :objn, :coln,   decode(bitand(:flag,1),0,0,1),   decode(bitand(:flag,2),0,0,1),   decode(bitand(:flag,4),0,0,1),   decode(bitand(:flag,8),0,0,1),   decode(bitand(:flag,16),0,0,1),   decode(bitand(:flag,32),0,0,1),   :time)insert into sys.col_usage$ (obj#, intcol#, equality_preds, equijoin_preds, nonequijoin_preds, range_preds, like_preds, null_preds, timestamp) values (   :objn, :coln,   decode(bitand(:flag,1),0,0,1),   decode(bitand(:flag,2),0,0,1),   decode(bitand(:flag,4),0,0,1),   decode(bitand(:flag,8),0,0,1),   decode(bitand(:flag,16),0,0,1),   decode(bitand(:flag,32),0,0,1),   :time)insert into sys.col_usage$ (obj#, intcol#, equality_preds, equijoin_preds, nonequijoin_preds, range_preds, like_preds, null_preds, timestamp) values (   :objn, :coln,   decode(bitand(:flag,1),0,0,1),   decode(bitand(:flag,2),0,0,1),   decode(bitand(:flag,4),0,0,1),   decode(bitand(:flag,8),0,0,1),   decode(bitand(:flag,16),0,0,1),   decode(bitand(:flag,32),0,0,1),   :time)delete from WRH$_TABLESPACE_SPACE_USAGE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id))       declare          policy        varchar2(512);          alldest       number  := dbms_rcvman.FALSE#;          rlgscn        number;        begin          if (:alldest > 0) then             alldest := dbms_rcvman.TRUE#;          end if;          dbms_rcvman.getRedoLogDeletionPolicy(policy  => policy);          dbms_rcvman.setRedoLogDeletionPolicy(policy  =>  policy,                                               alldest =>  alldest);          if ((policy like '%APPLIED%' OR                policy like '%SHIPPED%') AND               policy not like '%BACKED UP%') then             dbms_rcvman.getSCNForAppliedPolicy(                minscn     => :applied_scn               ,rlgscn     => rlgscn);          else             :applied_scn := 0;          end if;       end;BEGIN :success := dbms_ha_alerts_prvt.post_instance_up; END;select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */max("RESOURCE_TYPE") val,count(*) cnt  from "SYS"."RECENT_RESOURCE_INCARNATIONS$" t  where "RESOURCE_TYPE" is not null  group by nlssort("RESOURCE_TYPE", 'NLS_SORT = binary')) order by nlssort(val,'NLS_SORT = binary')select value$ from sys.props$ where name = 'DEFAULT_TBS_TYPE'delete from WRH$_IC_CLIENT_STATS tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select  INST_ID,        SID_QKSBGSEROW,        BUGNO_QKSBGSEROW,        VALUE_QKSBGSEROW,        FID_QKSBGSEROW,        DESC_QKSBGSEROW,        OFE_QKSBGSEROW,        EVENT_QKSBGSEROW,        ISDEFAULT_QKSBGSEROW from x$qksbgsesselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"JOB_STATUS" val,count(*) cnt  from "SYS"."SCHEDULER$_JOB" t  where "JOB_STATUS" is not null  group by "JOB_STATUS") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"JOB_STATUS" val,count(*) cnt  from "SYS"."SCHEDULER$_JOB" t  where "JOB_STATUS" is not null  group by "JOB_STATUS") order by valSELECT ITU.NAME OWNNAME, ITO.NAME TABNAME FROM SYS.USER$ U, SYS.OBJ$ IO, SYS.IND$ I, SYS.OBJ$ ITO, SYS.USER$ ITU WHERE U.NAME = :B2 AND IO.NAME = :B1 AND IO.OWNER# = U.USER# AND IO.TYPE# = 1 AND IO.OBJ# = I.OBJ# AND ITO.OBJ# = I.BO# AND ITO.OWNER#= ITU.USER#SELECT ITU.NAME OWNNAME, ITO.NAME TABNAME FROM SYS.USER$ U, SYS.OBJ$ IO, SYS.IND$ I, SYS.OBJ$ ITO, SYS.USER$ ITU WHERE U.NAME = :B2 AND IO.NAME = :B1 AND IO.OWNER# = U.USER# AND IO.TYPE# = 1 AND IO.OBJ# = I.OBJ# AND ITO.OBJ# = I.BO# AND ITO.OWNER#= ITU.USER#update sys.scheduler$_window set  flags = :1, actual_start_date = :2 where  obj# = :3delete from WRH$_SHARED_SERVER_SUMMARY tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select x.inst_id,x.indx+1,ksppinm,ksppity,ksppstvl, ksppstdvl, ksppstdf,  decode(bitand(ksppiflg/256,1),1,'TRUE','FALSE'),  decode(bitand(ksppiflg/65536,3),1,'IMMEDIATE',2,'DEFERRED',                                  3,'IMMEDIATE','FALSE'),  decode(bitand(ksppiflg,4),4,'FALSE',                                     decode(bitand(ksppiflg/65536,3), 0, 'FALSE', 'TRUE')),     decode(bitand(ksppstvf,7),1,'MODIFIED',4,'SYSTEM_MOD','FALSE'),  decode(bitand(ksppstvf,2),2,'TRUE','FALSE'),  decode(bitand(ksppilrmflg/64, 1), 1, 'TRUE', 'FALSE'),  decode(bitand(ksppilrmflg/268435456, 1), 1, 'TRUE', 'FALSE'),  ksppdesc, ksppstcmnt, ksppihash  from x$ksppi x, x$ksppcv y where (x.indx = y.indx) and  bitand(ksppiflg,268435456) = 0 and  ((translate(ksppinm,'_','#') not like '##%') and    ((translate(ksppinm,'_','#') not like '#%')      or (ksppstdf = 'FALSE') or      (bitand(ksppstvf,5) > 0)))SELECT TO_NUMBER(1) FROM DUAL      select decode(open_mode, 'MOUNTED', 0,                                'READ WRITE', 1,                                'READ ONLY', 1,                                'READ ONLY WITH APPLY', 1,                                2) dbstate       into :dbstate       from v$databaseselect count(*) from association$ where obj# = :1insert into ccol$(con#,obj#,intcol#,pos#,col#,spare1) values(:1,:2,:3,decode(:4,0,null,:4),:5, :6)delete from WRI$_SEGADV_OBJLIST where creation_time < :1select count(OBJ#) from SYS_FBA_TRACKEDTABLES where bitand(FLAGS,1)!=0delete from WRH$_TEMPFILE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */max(substrb("DB_DOMAIN",1,32)) val,count(*) cnt  from "SYS"."RECENT_RESOURCE_INCARNATIONS$" t  where substrb("DB_DOMAIN",1,32) is not null  group by nlssort(substrb("DB_DOMAIN",1,32), 'NLS_SORT = binary')) order by nlssort(val,'NLS_SORT = binary')select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"CLASS_OID" val,count(*) cnt  from "SYS"."SCHEDULER$_JOB" t  where "CLASS_OID" is not null  group by "CLASS_OID") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"CLASS_OID" val,count(*) cnt  from "SYS"."SCHEDULER$_JOB" t  where "CLASS_OID" is not null  group by "CLASS_OID") order by valselect SUM(data_length) from all_tab_columns where table_name = 'X'insert into tab$(obj#,ts#,file#,block#,bobj#,tab#,intcols,kernelcols,clucols,audit$,flags,pctfree$,pctused$,initrans,maxtrans,rowcnt,blkcnt,empcnt,avgspc,chncnt,avgrln,analyzetime,samplesize,cols,property,degree,instances,dataobj#,avgspc_flb,flbcnt,trigflag,spare1,spare6)values(:1,:2,:3,:4,decode(:5,0,null,:5),decode(:6,0,null,:6),:7,:8,decode(:9,0,null,:9),:10,:11,:12,:13,:14,:15,:16,:17,:18,:19,:20,:21,:22,:23,:24,:25,decode(:26,1,null,:26),decode(:27,1,null,:27),:28,:29,:30,:31,:32,:33)create global temporary table sys.ora_temp_1_ds_170009 on commit preserve rows cache noparallel as select /*+  no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"SNAP_ID","DBID", rowid SYS_DS_ALIAS_0  from "SYS"."WRH$_SYSMETRIC_HISTORY" sample (  6.9992364469)  t  WHERE  1 = 2 DELETE FROM xs$session_appnsselect SUM(data_length) from all_tab_columns where table_name = 'GRAFICO'SELECT INSTANCE_NAME, HOST_NAME, NVL(GVI_STARTUP_TIME, SYSTIMESTAMP) - INTERVAL '1' SECOND AS SHUTDOWN_TIME FROM (SELECT RRI.INSTANCE_NAME AS INSTANCE_NAME, RRI.HOST_NAME AS HOST_NAME, FROM_TZ(RRI.STARTUP_TIME, '+00:00') AS RRI_STARTUP_TIME, DBMS_HA_ALERTS_PRVT.INSTANCE_STARTUP_TIMESTAMP_TZ(GVI.STARTUP_TIME) AS GVI_STARTUP_TIME FROM RECENT_RESOURCE_INCARNATIONS$ RRI LEFT OUTER JOIN GV$INSTANCE GVI ON GVI.INSTANCE_NAME = RRI.RESOURCE_NAME WHERE RRI.RESOURCE_TYPE = 'INSTANCE' AND :B2 = RRI.DB_UNIQUE_NAME AND :B1 = RRI.DB_DOMAIN) WHERE GVI_STARTUP_TIME IS NULL OR GVI_STARTUP_TIME > RRI_STARTUP_TIME GROUP BY INSTANCE_NAME, HOST_NAME, GVI_STARTUP_TIMESELECT o.obj# from obj$ o, tab$ t, user$ u where  u.name = :1 and o.name = :2 and u.user# = o.owner# and  t.obj# = o.obj# and o.type# = 2 and bitand(t.property, 131072) = 131072 update obj$ set obj#=:4, type#=:5,ctime=:6,mtime=:7,stime=:8,status=:9,dataobj#=:10,flags=:11,oid$=:12,spare1=:13, spare2=:14 where owner#=:1 and name=:2 and namespace=:3 and remoteowner is null and linkname is null and subname is nullselect min(minbkt),maxbkt,substrb(dump(min(val),16,0,32),1,120) minval,substrb(dump(max(val),16,0,32),1,120) maxval,sum(rep) sumrep, sum(repsq) sumrepsq, max(rep) maxrep, count(*) bktndv, sum(case when rep=1 then 1 else 0 end) unqrep from (select val,min(bkt) minbkt, max(bkt) maxbkt, count(val) rep, count(val)*count(val) repsq from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"OBJ#" val, ntile(254) over (order by "OBJ#") bkt  from "SYS"."WRH$_SEG_STAT" t  where "OBJ#" is not null) group by val) group by maxbkt order by maxbktSELECT TYPE# FROM SYS.OBJ$ WHERE OBJ# = :B1 SELECT /* OPT_DYN_SAMP */ /*+ ALL_ROWS IGNORE_WHERE_CLAUSE NO_PARALLEL(SAMPLESUB) opt_param('parallel_execution_enabled', 'false') NO_PARALLEL_INDEX(SAMPLESUB) NO_SQL_TUNE */ NVL(SUM(C1),0), NVL(SUM(C2),0) FROM (SELECT /*+ NO_PARALLEL("M") FULL("M") NO_PARALLEL_INDEX("M") */ 1 AS C1, 1 AS C2 FROM "SYS"."MON_MODS$" "M") SAMPLESUBselect /*+  no_parallel_index(t, "KETSTATUS_UQ")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"KETSTATUS_UQ") */ count(*) as nrw,count(distinct sys_op_lbid(6162,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."KET$_AUTOTASK_STATUS" t where "DUMMY_KEY" is not nullselect /*+  no_parallel_index(t, "KETSTATUS_UQ")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"KETSTATUS_UQ") */ count(*) as nrw,count(distinct sys_op_lbid(6162,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."KET$_AUTOTASK_STATUS" t where "DUMMY_KEY" is not nullUPDATE KET$_CLIENT_TASKS     SET ATTRIBUTES = :atr,         TASK_PRIORITY = :pri,         CURR_JOB_NAME = :job,         WINDOW_NAME = NULL,        CURR_WIN_START = :wst,         EST_TYPE = 0,         EST_DURATION = 0,         STATUS = 2   WHERE CLIENT_ID = :cid     AND OPERATION_ID = :oid     AND TARGET_TYPE = :tgt     AND TARGET_NAME = :tgnUPDATE KET$_CLIENT_TASKS     SET ATTRIBUTES = :atr,         TASK_PRIORITY = :pri,         CURR_JOB_NAME = :job,         WINDOW_NAME = NULL,        CURR_WIN_START = :wst,         EST_TYPE = 0,         EST_DURATION = 0,         STATUS = 2   WHERE CLIENT_ID = :cid     AND OPERATION_ID = :oid     AND TARGET_TYPE = :tgt     AND TARGET_NAME = :tgnselect num_rows FROM dba_tables where table_name = 'PERRO'delete from idl_ub2$ where obj#=:1 and part=:2select /*+  no_parallel_index(t, "I_SCHEDULER_JOB_RUN_DETAILS")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_SCHEDULER_JOB_RUN_DETAILS") */ count(*) as nrw,count(distinct sys_op_lbid(5964,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."SCHEDULER$_JOB_RUN_DETAILS" t where "LOG_ID" is not nullselect privilege#,level from sysauth$ connect by grantee#=prior privilege# and privilege#>0 start with (grantee#=:1 or grantee#=1) and privilege#>0select SUM(column_length) from all_ind_columns where table_name = 'TESTING'select count(aft.table_objno) from system.aq$_queue_tables t,  sys.aq$_queue_table_affinities aft where  aft.table_objno = t.objno and aft.owner_instance = :1 and  bitand(t.flags, 4+16+32+64+128+256) = 0 and NOT  ( t.name in ('DEF$_AQCALL' , 'DEF$_AQERROR') and t.schema = 'SYSTEM')select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */max("DB_UNIQUE_NAME") val,count(*) cnt  from "SYS"."RECENT_RESOURCE_INCARNATIONS$" t  where "DB_UNIQUE_NAME" is not null  group by nlssort("DB_UNIQUE_NAME", 'NLS_SORT = binary')) order by nlssort(val,'NLS_SORT = binary')BEGIN   aw_trunc_proc(ora_dict_obj_type, ora_dict_obj_name, ora_dict_obj_owner); END;delete from WRH$_STREAMS_APPLY_SUM tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */max("OPERATION") val,count(*) cnt  from "SYS"."SCHEDULER$_EVENT_LOG" t  where "OPERATION" is not null  group by nlssort("OPERATION", 'NLS_SORT = binary')) order by nlssort(val,'NLS_SORT = binary')select priority from resource_mapping_priority$ where attribute = :1 and status = 'ACTIVE'delete from cdef$ where obj#=:1SELECT AUTOTASK_STATUS,           ABA_STATE,           NVL(ABA_STATE_TIME, TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),           NVL(ABA_START_TIME, TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),           MW_NAME,            NVL(MW_START_TIME, TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),           NVL(RECONCILE_TIME, TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),           INSTANCE_NAME      FROM KET$_AUTOTASK_STATUS     WHERE DUMMY_KEY=99999    FOR UPDATESELECT AUTOTASK_STATUS,           ABA_STATE,           NVL(ABA_STATE_TIME, TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),           NVL(ABA_START_TIME, TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),           MW_NAME,            NVL(MW_START_TIME, TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),           NVL(RECONCILE_TIME, TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),           INSTANCE_NAME      FROM KET$_AUTOTASK_STATUS     WHERE DUMMY_KEY=99999    FOR UPDATESELECT AUTOTASK_STATUS,           ABA_STATE,           NVL(ABA_STATE_TIME, TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),           NVL(ABA_START_TIME, TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),           MW_NAME,            NVL(MW_START_TIME, TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),           NVL(RECONCILE_TIME, TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),           INSTANCE_NAME      FROM KET$_AUTOTASK_STATUS     WHERE DUMMY_KEY=99999    FOR UPDATESELECT AUTOTASK_STATUS,           ABA_STATE,           NVL(ABA_STATE_TIME, TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),           NVL(ABA_START_TIME, TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),           MW_NAME,            NVL(MW_START_TIME, TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),           NVL(RECONCILE_TIME, TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),           INSTANCE_NAME      FROM KET$_AUTOTASK_STATUS     WHERE DUMMY_KEY=99999    FOR UPDATEselect max(last_number) into :bind1 from dba_sequences where sequence_owner='SYS' and sequence_name='WRM$_DEEP_PURGE_INTERVAL'delete from WRH$_JAVA_POOL_ADVICE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select /*+  no_parallel_index(t, "WRM$_DATABASE_INSTANCE_PK")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"WRM$_DATABASE_INSTANCE_PK") */ count(*) as nrw,count(distinct sys_op_lbid(6620,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."WRM$_DATABASE_INSTANCE" t where "DBID" is not null or "INSTANCE_NUMBER" is not null or "STARTUP_TIME" is not nullcall WWV_FLOW_CACHE.PURGE_SESSIONS (  )select table_objno, primary_instance, secondary_instance, owner_instance from sys.aq$_queue_table_affinities a  where  a.owner_instance <> :1 and dbms_aqadm_syscalls.get_owner_instance(a.primary_instance,       a.secondary_instance,       a.owner_instance) = :2  order by a.owner_instance, table_objno for update of a.owner_instanceselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"SNAP_ID" val,count(*) cnt  from "SYS"."WRH$_SEG_STAT" t  where "SNAP_ID" is not null  group by "SNAP_ID") order by valselect high, bit from (select snap_id - 1 high, min(begin_interval_time) bit from wrm$_snapshot where dbid = :dbid and snap_id = (select min(snap_id) from wrm$_snapshot s where dbid = :dbid and snap_id > :snap_id and status in (0,1) and not exists (select 1 from WRM$_BASELINE b where b.dbid = s.dbid and s.snap_id >= b.start_snap_id and s.snap_id <= b.end_snap_id)) group by snap_id union all select 2147483647, systimestamp from  v$database where dbid <> :dbid order by 1 asc nulls last) where rownum = 1 select u.name, o.name,         decode(i.agt_name, NULL, 'SCHEDULER$_EVENT_AGENT', i.agt_name)  from   sys.user$ u, sys.obj$ o,       (select si.obj# obj#, sm.rule_name agt_name from        sys.scheduler$_srcq_info si left outer join sys.scheduler$_srcq_map sm        on (sm.oid = si.obj# and bitand(sm.flags, 2) <> 0)) i  where  i.obj# = o.obj# and o.owner# = u.user#select /*+  no_parallel_index(t, "I_SCHEDULER_JOB2")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_SCHEDULER_JOB2") */ count(*) as nrw,count(distinct sys_op_lbid(5926,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."SCHEDULER$_JOB" t where "CLASS_OID" is not nullselect /*+  no_parallel_index(t, "I_SCHEDULER_JOB2")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_SCHEDULER_JOB2") */ count(*) as nrw,count(distinct sys_op_lbid(5926,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."SCHEDULER$_JOB" t where "CLASS_OID" is not nullinsert into WRM$_SNAPSHOT   (snap_id, dbid, instance_number, startup_time,    begin_interval_time, end_interval_time, snap_level,    status, error_count, bl_moved, snap_flag, snap_timezone)  values   (:snap_id, :dbid, :instance_number, :startup_time,    :begin_interval_time, :end_interval_time, :snap_level,    :status, 0, 0, :bind1, :bind2)insert into WRM$_SNAPSHOT   (snap_id, dbid, instance_number, startup_time,    begin_interval_time, end_interval_time, snap_level,    status, error_count, bl_moved, snap_flag, snap_timezone)  values   (:snap_id, :dbid, :instance_number, :startup_time,    :begin_interval_time, :end_interval_time, :snap_level,    :status, 0, 0, :bind1, :bind2)insert into WRM$_SNAPSHOT   (snap_id, dbid, instance_number, startup_time,    begin_interval_time, end_interval_time, snap_level,    status, error_count, bl_moved, snap_flag, snap_timezone)  values   (:snap_id, :dbid, :instance_number, :startup_time,    :begin_interval_time, :end_interval_time, :snap_level,    :status, 0, 0, :bind1, :bind2)insert into WRM$_SNAPSHOT   (snap_id, dbid, instance_number, startup_time,    begin_interval_time, end_interval_time, snap_level,    status, error_count, bl_moved, snap_flag, snap_timezone)  values   (:snap_id, :dbid, :instance_number, :startup_time,    :begin_interval_time, :end_interval_time, :snap_level,    :status, 0, 0, :bind1, :bind2)DELETE FROM WWV_FLOW_FILE_OBJECTS$ WHERE SECURITY_GROUP_ID = 0select SUM(data_length) from all_tab_columns where table_name = 'DEPARTMENTS'select trace_type, primary_id, qualifier_id1,  qualifier_id2, instance_name, flags from wri$_tracing_enabled  where instance_name is null or instance_name = :1select SUM(column_length) from all_ind_columns where table_name = 'Y'delete from WRH$_SEG_STAT_OBJ tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) /* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("SNAP_ID")),to_char(substrb(dump(min("SNAP_ID"),16,0,32),1,120)),to_char(substrb(dump(max("SNAP_ID"),16,0,32),1,120)),to_char(count("DBID")),to_char(substrb(dump(min("DBID"),16,0,32),1,120)),to_char(substrb(dump(max("DBID"),16,0,32),1,120)),to_char(count("INSTANCE_NUMBER")),to_char(substrb(dump(min("INSTANCE_NUMBER"),16,0,32),1,120)),to_char(substrb(dump(max("INSTANCE_NUMBER"),16,0,32),1,120)),to_char(count("TABLE_ID")),to_char(substrb(dump(min("TABLE_ID"),16,0,32),1,120)),to_char(substrb(dump(max("TABLE_ID"),16,0,32),1,120)),to_char(count("BEGIN_TIME")),to_char(substrb(dump(min("BEGIN_TIME"),16,0,32),1,120)),to_char(substrb(dump(max("BEGIN_TIME"),16,0,32),1,120)),to_char(count("END_TIME")),to_char(substrb(dump(min("END_TIME"),16,0,32),1,120)),to_char(substrb(dump(max("END_TIME"),16,0,32),1,1select pval2 from sys.aux_stats$ where sname = 'SYSSTATS_INFO' and pname = 'STATUS'select inst_id,bprid,bpstm,bpbss,bpbsc,bpnum,bitand(bpflg, 12)/4 + (bitand(bpext, 64-1) * 4) + 1,bpdev,bphdl,bpcmt,bpmdh,bitand(bpflg, 4080) / 16,decode(bitand(bpflg,2),1,'YES','NO'),bptag,decode(bitand(bpflg, 1+4096+8192),0,'A',1,'D',4096,'X',8192,'U','?'),decode(bitand(bpflg,1),1,'YES','NO'),to_date(bptsm,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'),to_date(bptim,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'),abs((to_date(bptim,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian')- to_date(bptsm,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'))*86400),((floor(bpext/512) * 4294967296) + bpsz1) * 512, decode(bitand(bpflg, 16384),0,'NO','YES'), bprsi,bprst,decode(bitand(bpext, 64),64,'YES','NO'), decode(bitand(bpflg, 16384),0,'NO',decode(bitand(bpext, 256),0,'NO','YES')), decode(bitand(bpext, 128),128,'YES','NO'), decode(bitand(bpflg, 16384),16384,'NO',decode(bitand(bpext,256),0,'NO','YES')) from x$kccbpSELECT NVL(SUM(D.BLOCKS), 0) FROM X$KEWX_SEGMENTS D, (SELECT DISTINCT O1.SEGMENT_NAME NAME FROM X$KEWX_SEGMENTS O1 WHERE O1.SEGMENT_NAME LIKE 'LOGMNR%' AND O1.SEGMENT_NAME NOT LIKE 'LOGMNRT%' UNION ALL SELECT DISTINCT O2.LOB_NAME NAME FROM X$KEWX_LOBS O2 WHERE O2.TABLE_NAME LIKE 'LOGMNR%' AND O2.TABLE_NAME NOT LIKE 'LOGMNRT%' ) S WHERE (D.OWNER = 'SYS' OR D.OWNER = 'SYSTEM') AND (D.SEGMENT_NAME = S.NAME )insert into sys.scheduler$_job (program_oid, schedule_expr, schedule_id, queue_owner, queue_name, queue_agent, event_rule, mxdur_msgid, last_enabled_time, class_oid, next_run_date, last_start_date, last_end_date, retry_count, run_count, failure_count, running_instance, running_slave, flags, job_status, creator, client_id, guid, char_env, start_date, end_date, instance_id, fw_name, fw_oid, destination, credential_name, credential_owner, credential_oid, dest_oid, job_dest_id, run_invoker, program_action, schedule_limit, priority, job_weight, number_of_args, max_runs, max_failures, max_run_duration, comments, user_callback, user_callback_ctx, nls_env, source, env, database_role, owner_udn, dist_flags, obj#) values (:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12, :13, :14, :15, :16, :17, :18, :19, :20, :21, :22, :23, :24, :25, :26, :27, :28, :29, :30, :31, :32, :33, :34, :35, :36, :37, :38, :39, :40, :41, :42, :43, :44, :45, :46, :47, :48, :49, :50, :51, :52, :53, :54)insert into sys.scheduler$_job (program_oid, schedule_expr, schedule_id, queue_owner, queue_name, queue_agent, event_rule, mxdur_msgid, last_enabled_time, class_oid, next_run_date, last_start_date, last_end_date, retry_count, run_count, failure_count, running_instance, running_slave, flags, job_status, creator, client_id, guid, char_env, start_date, end_date, instance_id, fw_name, fw_oid, destination, credential_name, credential_owner, credential_oid, dest_oid, job_dest_id, run_invoker, program_action, schedule_limit, priority, job_weight, number_of_args, max_runs, max_failures, max_run_duration, comments, user_callback, user_callback_ctx, nls_env, source, env, database_role, owner_udn, dist_flags, obj#) values (:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12, :13, :14, :15, :16, :17, :18, :19, :20, :21, :22, :23, :24, :25, :26, :27, :28, :29, :30, :31, :32, :33, :34, :35, :36, :37, :38, :39, :40, :41, :42, :43, :44, :45, :46, :47, :48, :49, :50, :51, :52, :53, :54)select col#,intcol#,charsetid,charsetform from col$ where obj#=:1 order by intcol# ascselect col#,intcol#,charsetid,charsetform from col$ where obj#=:1 order by intcol# ascselect /*+  no_parallel_index(t, "I_INDPART_OBJ$")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_INDPART_OBJ$") */ count(*) as nrw,count(distinct sys_op_lbid(577,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."INDPART$" t where "OBJ#" is not nullupdate sys.scheduler$_job set  user_callback = :1, dist_flags = :2 where  obj# = :3update sys.scheduler$_job set  user_callback = :1, dist_flags = :2 where  obj# = :3SELECT ORA_TQ_BASE$.NEXTVAL FROM DUALselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"SYS_NC00012$" val,count(*) cnt  from "SYS"."WRI$_OPTSTAT_OPR" t  where "SYS_NC00012$" is not null  group by "SYS_NC00012$") order by valdelete /*+ index(m) */ from sys.mon_mods$ m where obj# = :1delete /*+ index(m) */ from sys.mon_mods$ m where obj# = :1/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("US#")),to_char(substrb(dump(min("US#"),16,0,32),1,120)),to_char(substrb(dump(max("US#"),16,0,32),1,120)),to_char(count("NAME")),to_char(substrb(dump(min("NAME"),16,0,32),1,120)),to_char(substrb(dump(max("NAME"),16,0,32),1,120)),to_char(count("USER#")),to_char(substrb(dump(min("USER#"),16,0,32),1,120)),to_char(substrb(dump(max("USER#"),16,0,32),1,120)),to_char(count("FILE#")),to_char(substrb(dump(min("FILE#"),16,0,32),1,120)),to_char(substrb(dump(max("FILE#"),16,0,32),1,120)),to_char(count("BLOCK#")),to_char(substrb(dump(min("BLOCK#"),16,0,32),1,120)),to_char(substrb(dump(max("BLOCK#"),16,0,32),1,120)),to_char(count("SCNBAS")),to_char(substrb(dump(min("SCNBAS"),16,0,32),1,120)),to_char(substrb(dump(max("SCNBAS"),16,0,32),1,120)),to_char(count("SCNWRP")),to_char(substrb(dump(min("SCNWRP"),16,0SELECT c.capture#, c.capture_name, c.flags FROM sys.streams$_capture_process c, dba_queues q, dba_queue_tables qt  ,v$instance i WHERE c.queue_owner  = q.owner   and c.queue_name   = q.name   and qt.queue_table = q.queue_table   and qt.owner       = q.owner   and qt.owner_instance = i.instance_number   and bitand(c.flags, 512) != 512   and c.status       = :1 ORDER BY c.capture# select SUM(data_length) from all_tab_columns where table_name = 'T2'delete from WRH$_IOSTAT_FUNCTION tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select intcol#,nvl(pos#,0),col#,nvl(spare1,0) from ccol$ where con#=:1select intcol#,nvl(pos#,0),col#,nvl(spare1,0) from ccol$ where con#=:1select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"PART#" val,count(*) cnt  from "SYS"."TABPART$" t  where "PART#" is not null  group by "PART#") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"BLOCK#" val,count(*) cnt  from "SYS"."TABPART$" t  where "BLOCK#" is not null  group by "BLOCK#") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"SYS_NC00022$" val,count(*) cnt  from "SYS"."SCHEDULER$_WINDOW" t  where "SYS_NC00022$" is not null  group by "SYS_NC00022$") order by valcall dbms_scheduler.auto_purge (  )delete from WRH$_LATCH_CHILDREN_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select CONNECTION_POOL_NAME, STATUS, MINSIZE, MAXSIZE,           INCRSIZE, SESSION_CACHED_CURSORS, INACTIVITY_TIMEOUT,           MAX_THINK_TIME, MAX_USE_SESSION, MAX_LIFETIME_SESSION,           NUM_CBROK, MAXCONN_CBROK    from cpool$ where STATUS = :1select nvl(sum(d.blocks),0)        from x$kewx_segments d,            (select distinct o1.segment_name name from x$kewx_segments o1             where o1.segment_name like '%AW%$%'             union all             select distinct o2.lob_name name from x$kewx_lobs o2             where o2.table_name like '%AW%$%'            ) s       where (d.owner = 'SYS' or d.owner = 'SYSTEM') and             (d.segment_name = s.name )/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("SEQUENCE_ID")),to_char(count("OBJECT_TYPE")),to_char(count("OBJECT_NAME")),to_char(count("OBJECT_ID")),to_char(count("OPCODE")) from "SYS"."WRI$_ALERT_THRESHOLD_LOG" t  /* ACL,ACL,ACL,ACL,ACL*/select intcol#, toid, version#, intcols, intcol#s, flags, synobj# from subcoltype$ where obj#=:1 order by intcol# ascselect intcol#, toid, version#, intcols, intcol#s, flags, synobj# from subcoltype$ where obj#=:1 order by intcol# ascselect i.obj#,i.ts#,i.file#,i.block#,i.intcols,i.type#,i.flags,i.property,i.pctfree$,i.initrans,i.maxtrans,i.blevel,i.leafcnt,i.distkey,i.lblkkey,i.dblkkey,i.clufac,i.cols,i.analyzetime,i.samplesize,i.dataobj#,nvl(i.degree,1),nvl(i.instances,1),i.rowcnt,mod(i.pctthres$,256),i.indmethod#,i.trunccnt,nvl(c.unicols,0),nvl(c.deferrable#+c.valid#,0),nvl(i.spare1,i.intcols),i.spare4,i.spare2,i.spare6,decode(i.pctthres$,null,null,mod(trunc(i.pctthres$/256),256)),ist.cachedblk,ist.cachehit,ist.logicalread from ind$ i, ind_stats$ ist, (select enabled, min(cols) unicols,min(to_number(bitand(defer,1))) deferrable#,min(to_number(bitand(defer,4))) valid# from cdef$ where obj#=:1 and enabled > 1 group by enabled) c where i.obj#=c.enabled(+) and i.obj# = ist.obj#(+) and i.bo#=:1 order by i.obj#select i.obj#,i.ts#,i.file#,i.block#,i.intcols,i.type#,i.flags,i.property,i.pctfree$,i.initrans,i.maxtrans,i.blevel,i.leafcnt,i.distkey,i.lblkkey,i.dblkkey,i.clufac,i.cols,i.analyzetime,i.samplesize,i.dataobj#,nvl(i.degree,1),nvl(i.instances,1),i.rowcnt,mod(i.pctthres$,256),i.indmethod#,i.trunccnt,nvl(c.unicols,0),nvl(c.deferrable#+c.valid#,0),nvl(i.spare1,i.intcols),i.spare4,i.spare2,i.spare6,decode(i.pctthres$,null,null,mod(trunc(i.pctthres$/256),256)),ist.cachedblk,ist.cachehit,ist.logicalread from ind$ i, ind_stats$ ist, (select enabled, min(cols) unicols,min(to_number(bitand(defer,1))) deferrable#,min(to_number(bitand(defer,4))) valid# from cdef$ where obj#=:1 and enabled > 1 group by enabled) c where i.obj#=c.enabled(+) and i.obj# = ist.obj#(+) and i.bo#=:1 order by i.obj#select i.obj#,i.ts#,i.file#,i.block#,i.intcols,i.type#,i.flags,i.property,i.pctfree$,i.initrans,i.maxtrans,i.blevel,i.leafcnt,i.distkey,i.lblkkey,i.dblkkey,i.clufac,i.cols,i.analyzetime,i.samplesize,i.dataobj#,nvl(i.degree,1),nvl(i.instances,1),i.rowcnt,mod(i.pctthres$,256),i.indmethod#,i.trunccnt,nvl(c.unicols,0),nvl(c.deferrable#+c.valid#,0),nvl(i.spare1,i.intcols),i.spare4,i.spare2,i.spare6,decode(i.pctthres$,null,null,mod(trunc(i.pctthres$/256),256)),ist.cachedblk,ist.cachehit,ist.logicalread from ind$ i, ind_stats$ ist, (select enabled, min(cols) unicols,min(to_number(bitand(defer,1))) deferrable#,min(to_number(bitand(defer,4))) valid# from cdef$ where obj#=:1 and enabled > 1 group by enabled) c where i.obj#=c.enabled(+) and i.obj# = ist.obj#(+) and i.bo#=:1 order by i.obj#select i.obj#,i.ts#,i.file#,i.block#,i.intcols,i.type#,i.flags,i.property,i.pctfree$,i.initrans,i.maxtrans,i.blevel,i.leafcnt,i.distkey,i.lblkkey,i.dblkkey,i.clufac,i.cols,i.analyzetime,i.samplesize,i.dataobj#,nvl(i.degree,1),nvl(i.instances,1),i.rowcnt,mod(i.pctthres$,256),i.indmethod#,i.trunccnt,nvl(c.unicols,0),nvl(c.deferrable#+c.valid#,0),nvl(i.spare1,i.intcols),i.spare4,i.spare2,i.spare6,decode(i.pctthres$,null,null,mod(trunc(i.pctthres$/256),256)),ist.cachedblk,ist.cachehit,ist.logicalread from ind$ i, ind_stats$ ist, (select enabled, min(cols) unicols,min(to_number(bitand(defer,1))) deferrable#,min(to_number(bitand(defer,4))) valid# from cdef$ where obj#=:1 and enabled > 1 group by enabled) c where i.obj#=c.enabled(+) and i.obj# = ist.obj#(+) and i.bo#=:1 order by i.obj#select col#,intcol#,toid,version#,packed,intcols,intcol#s,flags, synobj#, nvl(typidcol#, 0) from coltype$ where obj#=:1 order by intcol# descselect col#,intcol#,toid,version#,packed,intcols,intcol#s,flags, synobj#, nvl(typidcol#, 0) from coltype$ where obj#=:1 order by intcol# descdelete from sys.mon_mods$delete from sys.mon_mods$delete from sys.mon_mods$select count(*) from obj$ o, user$ u where o.name='XDB$SCHEMA' and o.owner#=u.user# and u.name='XDB'SELECT space_usage_kbytes  FROM  v$sysaux_occupants  WHERE occupant_name = 'SQL_MANAGEMENT_BASE'select ROWID from SYS_FBA_USERS where ROWNUM = 1UPDATE SYS.WRI$_SEGADV_CNTRLTAB SET END_TIME = CURRENT_TIMESTAMP WHERE AUTO_TASKID = :B1 UPDATE SYS.WRI$_SEGADV_CNTRLTAB SET END_TIME = CURRENT_TIMESTAMP WHERE AUTO_TASKID = :B1 SELECT ro.obj#, '"'||ru.name||'"' || '.' || '"'||ro.name||'"',  decode(rl.ectx#, 0, decode(rm.ectx#, 0, rs.ectx#, rm.ectx#), rl.ectx#),  decode (rl.ectx#, 0, decode(rm.ectx#, 0,    (select '"'||u1.name||'"' || '.' || '"'||o1.name||'"' from user$ u1,    obj$ o1 where o1.obj# = rs.ectx# and o1.owner# = u1.user#),   (select '"'||u2.name||'"' || '.' || '"'||o2.name||'"' from user$ u2,    obj$ o2 where o2.obj# = rm.ectx# and o2.owner# = u2.user#)),   (select '"'||u3.name||'"' || '.' || '"'||o3.name||'"' from user$ u3,    obj$ o3 where o3.obj# = rl.ectx# and o3.owner# = u3.user#))   from obj$ so, user$ su, rule_map$ rm, obj$ ro, user$ ru, rule$ rl,   rule_set$ rs   where su.name = :1 and so.name = :2 and so.owner# = su.user# and   so.obj# = rm.rs_obj# and rm.r_obj# = ro.obj# and ro.owner# = ru.user#   and rl.obj# = rm.r_obj# and rs.obj# = rm.rs_obj#select min(next_date) from "SYS"."AQ$_AQ_PROP_TABLE_T"select /*+  no_parallel_index(t, "KET$_TSK_PK")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"KET$_TSK_PK") */ count(*) as nrw,count(distinct sys_op_lbid(6168,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."KET$_CLIENT_TASKS" t where "CLIENT_ID" is not null or "OPERATION_ID" is not null or "TARGET_TYPE" is not null or "TARGET_NAME" is not nullselect /*+  no_parallel_index(t, "KET$_TSK_PK")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"KET$_TSK_PK") */ count(*) as nrw,count(distinct sys_op_lbid(6168,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."KET$_CLIENT_TASKS" t where "CLIENT_ID" is not null or "OPERATION_ID" is not null or "TARGET_TYPE" is not null or "TARGET_NAME" is not nullselect rule_id, rule_or_piece from rule_set_iot$ where rs_obj# = :1 and  ec_obj# = :2 and box_id = :3INSERT INTO SYS.WRI$_SEGADV_CNTRLTAB VALUES(:B2 , :B1 , 0, 0, 0, 0, 0, CURRENT_TIMESTAMP, NULL)INSERT INTO SYS.WRI$_SEGADV_CNTRLTAB VALUES(:B2 , :B1 , 0, 0, 0, 0, 0, CURRENT_TIMESTAMP, NULL)select pos#,intcol#,col#,spare1,bo#,spare2,spare3 from icol$ where obj#=:1select pos#,intcol#,col#,spare1,bo#,spare2,spare3 from icol$ where obj#=:1select pos#,intcol#,col#,spare1,bo#,spare2,spare3 from icol$ where obj#=:1SELECT DECODE(SUM(BITAND(TRIGFLAG, 67108864)), 67108864, 67108864, 0) + DECODE(SUM(BITAND(TRIGFLAG, 134217728)), 134217728, 134217728, 0) FROM ( SELECT /*+ ordered index(i) use_nl_with_index(t) */ T.TRIGFLAG FROM SYS.IND$ I, SYS.TAB$ T WHERE I.OBJ# = :B1 AND I.TYPE# != 3 AND I.BO# = T.OBJ# UNION ALL SELECT /*+ ordered index(i)  use_nl_with_index(t) */ T.TRIGFLAG FROM SYS.IND$ I, SYS.TAB$ T WHERE I.OBJ# = :B1 AND I.TYPE# = 3 AND I.BO# = T.BOBJ# )SELECT DECODE(SUM(BITAND(TRIGFLAG, 67108864)), 67108864, 67108864, 0) + DECODE(SUM(BITAND(TRIGFLAG, 134217728)), 134217728, 134217728, 0) FROM ( SELECT /*+ ordered index(i) use_nl_with_index(t) */ T.TRIGFLAG FROM SYS.IND$ I, SYS.TAB$ T WHERE I.OBJ# = :B1 AND I.TYPE# != 3 AND I.BO# = T.OBJ# UNION ALL SELECT /*+ ordered index(i)  use_nl_with_index(t) */ T.TRIGFLAG FROM SYS.IND$ I, SYS.TAB$ T WHERE I.OBJ# = :B1 AND I.TYPE# = 3 AND I.BO# = T.BOBJ# )delete from WRH$_SEG_STAT_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) SELECT KSPPCV.KSPPSTVL FROM X$KSPPCV KSPPCV, X$KSPPI KSPPI WHERE KSPPI.INDX = KSPPCV.INDX AND KSPPI.KSPPINM = '_optimizer_autostats_job'select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"INTCOLS" val,count(*) cnt  from "SYS"."IND$" t  where "INTCOLS" is not null  group by "INTCOLS") order by valselect o.name,o.namespace,d.d_timestamp,o.owner# from dependency$ d,obj$ o, user$ u where d.p_obj#=:2 and d.p_timestamp=:3 and d.d_obj#=o.obj# and o.owner#=u.user# and (u.name=:1 or u.ext_username=:1) and o.status in (2,3)delete from WRH$_DLM_MISC_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select SUM(column_length) from all_ind_columns where table_name = 'YY'select min(next_date) from "SYS"."AQ$_SCHEDULER$_EVENT_QTAB_T"insert into cdef$(obj#,con#,type#,intcols,condlength,condition,robj#,rcon#,match#,refact,enabled,cols,defer,mtime,spare1,spare2,spare3)values(:1,:2,:3,decode(:4,0,null,:4),decode(:5,0,null,:5),:6,decode(:7,0,null,:7),decode(:8,0,null,:8),decode(:9,0,null,:9),decode(:10,0,null,:10), decode(:11,0,null,:11),:12, decode(:13,0,null,:13),:14,:15,:16,:17)select privilege#,nvl(col#,0),max(mod(nvl(option$,0),2))from objauth$ where obj#=:1 and grantee#=:2 group by privilege#,nvl(col#,0)select ftp_port, ftp_protocol, http_port, http_protocol, http2_port,         http2_protocol, nfs_port, nfs_protocol, http_host, http2_host  from xdb.xdb$root_infodelete from WRH$_LATCH_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"DBID" val,count(*) cnt  from "SYS"."WRI$_DBU_CPU_USAGE_SAMPLE" t  where "DBID" is not null  group by "DBID") order by valselect t_object_type, t_object_name, t_metrics_id, lower(t_instance_name), t_flags, t_warning_operator, t_warning_value, t_critical_operator, t_critical_value, t_observation_period, t_consecutive_occurrences, t_object_id from WRI$_ALERT_THRESHOLD where t_flags = 1delete from ccol$ where obj#=:1select /*+  no_parallel_index(t, "SMON_SCN_TIME_SCN_IDX")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"SMON_SCN_TIME_SCN_IDX") */ count(*) as nrw,count(distinct sys_op_lbid(272,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."SMON_SCN_TIME" t where "SCN" is not nullSELECT snap_id , OBJ#, DATAOBJ# FROM   (SELECT /*+ ordered use_nl(t2) index(t2) */ t2.snap_id , t1.OBJN_KEWRSEG  OBJ#, t1.OBJD_KEWRSEG  DATAOBJ# FROM X$KEWRTSEGSTAT t1, WRH$_SEG_STAT_OBJ t2      WHERE t2.dbid(+)  = :dbid  AND t2.OBJ#(+) = t1.OBJN_KEWRSEG AND t2.DATAOBJ#(+) = t1.OBJD_KEWRSEG) WHERE nvl(snap_id, 0) < :snap_idselect 1 from sys.aq$_queue_table_affinitiesselect migrated from MIGRATE$SELECT /*+ use_nl(u,o,t) */ NVL(T.DEGREE,1) FROM USER$ U,OBJ$ O,TAB$ T WHERE U.NAME=:B2 AND O.NAME=:B1 AND O.OBJ#=T.OBJ# AND U.USER#=O.OWNER#select num_rows FROM dba_tables where table_name = 'LOCATIONS'select a.schema, a.name, b.name, b.eventid, a.flags, a.sort_cols  from system.aq$_queues b, system.aq$_queue_tables a, sys.aq$_queue_table_affinities t  where a.objno = b.table_objno and t.table_objno = b.table_objno and bitand(b.properties, 512) = 512 and t.owner_instance = :1 for update of t.owner_instanceselect max(RETENTION) from SYS_FBA_FA/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("OBJ#")),to_char(substrb(dump(min("OBJ#"),16,0,32),1,120)),to_char(substrb(dump(max("OBJ#"),16,0,32),1,120)),to_char(count("INSERTS")),to_char(substrb(dump(min("INSERTS"),16,0,32),1,120)),to_char(substrb(dump(max("INSERTS"),16,0,32),1,120)),to_char(count("UPDATES")),to_char(substrb(dump(min("UPDATES"),16,0,32),1,120)),to_char(substrb(dump(max("UPDATES"),16,0,32),1,120)),to_char(count("DELETES")),to_char(substrb(dump(min("DELETES"),16,0,32),1,120)),to_char(substrb(dump(max("DELETES"),16,0,32),1,120)),to_char(count("TIMESTAMP")),to_char(substrb(dump(min("TIMESTAMP"),16,0,32),1,120)),to_char(substrb(dump(max("TIMESTAMP"),16,0,32),1,120)),to_char(count("FLAGS")),to_char(substrb(dump(min("FLAGS"),16,0,32),1,120)),to_char(substrb(dump(max("FLAGS"),16,0,32),1,120)),to_char(count("DROP_SEGMENTS")),to/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("OBJ#")),to_char(substrb(dump(min("OBJ#"),16,0,32),1,120)),to_char(substrb(dump(max("OBJ#"),16,0,32),1,120)),to_char(count("INSERTS")),to_char(substrb(dump(min("INSERTS"),16,0,32),1,120)),to_char(substrb(dump(max("INSERTS"),16,0,32),1,120)),to_char(count("UPDATES")),to_char(substrb(dump(min("UPDATES"),16,0,32),1,120)),to_char(substrb(dump(max("UPDATES"),16,0,32),1,120)),to_char(count("DELETES")),to_char(substrb(dump(min("DELETES"),16,0,32),1,120)),to_char(substrb(dump(max("DELETES"),16,0,32),1,120)),to_char(count("TIMESTAMP")),to_char(substrb(dump(min("TIMESTAMP"),16,0,32),1,120)),to_char(substrb(dump(max("TIMESTAMP"),16,0,32),1,120)),to_char(count("FLAGS")),to_char(substrb(dump(min("FLAGS"),16,0,32),1,120)),to_char(substrb(dump(max("FLAGS"),16,0,32),1,120)),to_char(count("DROP_SEGMENTS")),todelete /*+ dynamic_sampling(4) */ from sys.wri$_optstat_histhead_history     where savtime < :1 and rownum <= NVL(:2, rownum)MERGE /*+ dynamic_sampling(ST 4) dynamic_sampling_est_cdn(ST) */ INTO STATS_TARGET$ ST USING (SELECT STALENESS, OSIZE, OBJ#, TYPE#, CASE WHEN STALENESS > LOG(0.01, NVL(LOC_STALE_PCT, :B1 )/100) THEN 128 ELSE 0 END + AFLAGS AFLAGS, STATUS, SID, SERIAL#, PART#, BO# FROM ( SELECT /*+ no_expand dynamic_sampling(4) dynamic_sampling_est_cdn */ DECODE(BITAND(T.FLAGS,16), 16, ROUND( LOG(0.01, NVL( LEAST( 100, GREATEST( 0.01, (DECODE(BITAND(M.FLAGS, 1), 1, GREATEST(T.ROWCNT, M.INSERTS), LEAST((M.INSERTS + M.DELETES + M.UPDATES), GREATEST(T.ROWCNT, (T.ROWCNT + M.INSERTS - M.DELETES)))) / (T.ROWCNT + 0.01)))), 0.01)), 1), -100.0) STALENESS, CASE WHEN T.FILE# = 0 THEN DBMS_STATS_INTERNAL.GET_TABLE_BLOCK_COUNT(U.NAME, O.NAME, NULL, NULL, 'TRUE') WHEN S.TYPE# = 5 THEN DBMS_STATS_INTERNAL.SEGMENT_NUMBER_BLOCKS(T.TS#, T.FILE#, T.BLOCK#, S.TYPE#, S.CACHEHINT, NVL(S.SPARE1,0), O.DATAOBJ#, S.BLOCKS, 'TRUE') ELSE NULL END * NVL(TS.BLOCKSIZE, :B6 ) OSIZE, O.OBJ# OBJ#, O.TYPE# TYPE#, 32 AFLAGS, 0 STATUS, :BMERGE /*+ dynamic_sampling(ST 4) dynamic_sampling_est_cdn(ST) */ INTO STATS_TARGET$ ST USING (SELECT STALENESS, OSIZE, OBJ#, TYPE#, CASE WHEN STALENESS > LOG(0.01, NVL(LOC_STALE_PCT, :B1 )/100) THEN 128 ELSE 0 END + AFLAGS AFLAGS, STATUS, SID, SERIAL#, PART#, BO# FROM ( SELECT /*+ no_expand dynamic_sampling(4) dynamic_sampling_est_cdn */ DECODE(BITAND(T.FLAGS,16), 16, ROUND( LOG(0.01, NVL( LEAST( 100, GREATEST( 0.01, (DECODE(BITAND(M.FLAGS, 1), 1, GREATEST(T.ROWCNT, M.INSERTS), LEAST((M.INSERTS + M.DELETES + M.UPDATES), GREATEST(T.ROWCNT, (T.ROWCNT + M.INSERTS - M.DELETES)))) / (T.ROWCNT + 0.01)))), 0.01)), 1), -100.0) STALENESS, CASE WHEN T.FILE# = 0 THEN DBMS_STATS_INTERNAL.GET_TABLE_BLOCK_COUNT(U.NAME, O.NAME, NULL, NULL, 'TRUE') WHEN S.TYPE# = 5 THEN DBMS_STATS_INTERNAL.SEGMENT_NUMBER_BLOCKS(T.TS#, T.FILE#, T.BLOCK#, S.TYPE#, S.CACHEHINT, NVL(S.SPARE1,0), O.DATAOBJ#, S.BLOCKS, 'TRUE') ELSE NULL END * NVL(TS.BLOCKSIZE, :B6 ) OSIZE, O.OBJ# OBJ#, O.TYPE# TYPE#, 32 AFLAGS, 0 STATUS, :BLOCK TABLE SYS.MON_MODS_ALL$ IN EXCLUSIVE MODE LOCK TABLE SYS.MON_MODS_ALL$ IN EXCLUSIVE MODE insert into WRI$_ALERT_THRESHOLD_LOG (sequence_id, object_type, object_name, object_id, opcode) values (:1, :2, :3, :4, :5)delete from WRH$_INST_CACHE_TRANSFER_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select di.inst_id,di.didbi,di.didbn,to_date(di.dicts,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'),to_number(di.dirls),to_date(di.dirlc,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'),to_number(di.diprs),to_date(di.diprc,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'),decode(di.dimla,0,'NOARCHIVELOG',1,'ARCHIVELOG','MANUAL'),to_number(di.discn),to_number(di.difas),decode(bitand(di.diflg,256),256,'CREATED',decode(bitand(di.diflg,1024),1024,'STANDBY',decode(bitand(di.diflg,32768),32768,'CLONE',decode(bitand(di.diflg,4096),4096,'BACKUP','CURRENT')))),to_date(di.dicct,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'),di.dicsq,to_number(di.dickp_scn),to_date(di.dickp_tim,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'),decode(bitand(di.diflg,4),4,'REQUIRED',decode(di.diirs,0,'NOT ALLOWED','ALLOWED')),to_date(di.divts,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'),decode(di.didor,0,'MOUNTED',decode(di.didor,1,'READ WRITE',decode(di.didor,2,'READ ONLY', 'READ ONLY WITH APPLY'))),decode(bitandselect INST_ID, RMRNO, RMNAM, RMVAL from X$KCCRM where RMNAM is not nullupdate smon_scn_time set time_mp=:1, time_dp=:2, scn=:3, scn_wrp=:4,  scn_bas=:5, num_mappings=:6, tim_scn_map=:7 where scn =  (select min(scn) from smon_scn_time)update smon_scn_time set time_mp=:1, time_dp=:2, scn=:3, scn_wrp=:4,  scn_bas=:5, num_mappings=:6, tim_scn_map=:7 where scn =  (select min(scn) from smon_scn_time)select SUM(column_length) from all_ind_columns where table_name = 'GATO'SELECT T.CLIENT_ID,         T.OPERATION_ID,         T.TARGET_TYPE,         T.TARGET_NAME,         T.CURR_JOB_NAME,         TO_NUMBER(BITAND(T.ATTRIBUTES, 131072)),         CASE NVL((SELECT J.STATE                     FROM DBA_SCHEDULER_JOBS J                    WHERE T.CURR_JOB_NAME = J.JOB_NAME), 'MISSING')           WHEN 'MISSING' THEN 4           WHEN 'RUNNING' THEN 1           WHEN 'DISABLED' THEN 2           WHEN 'SCHEDULED' THEN 3           WHEN 'RETRY SCHEDULED' THEN 99           WHEN 'COMPLETED' THEN 99           WHEN 'BROKEN' THEN 99           WHEN 'FAILED' THEN 99           WHEN 'REMOTE' THEN 99           WHEN 'SUCCEEDED' THEN 99           WHEN 'STOPPED' THEN 99           WHEN 'CHAIN_STALLED' THEN 99           ELSE 99         END AS CONSOLIDATED_STATE,         CASE NVL(JRD.STATUS,'MISSING')           WHEN 'MISSING' THEN 4           WHEN 'SUCCEEDED' THEN 10           WHEN 'FAILED' THEN 11           WHEN 'STOPPED' THEN             CASE             WHEN JRD.ADDITIONAL_INFO LIKE SELECT T.CLIENT_ID,         T.OPERATION_ID,         T.TARGET_TYPE,         T.TARGET_NAME,         T.CURR_JOB_NAME,         TO_NUMBER(BITAND(T.ATTRIBUTES, 131072)),         CASE NVL((SELECT J.STATE                     FROM DBA_SCHEDULER_JOBS J                    WHERE T.CURR_JOB_NAME = J.JOB_NAME), 'MISSING')           WHEN 'MISSING' THEN 4           WHEN 'RUNNING' THEN 1           WHEN 'DISABLED' THEN 2           WHEN 'SCHEDULED' THEN 3           WHEN 'RETRY SCHEDULED' THEN 99           WHEN 'COMPLETED' THEN 99           WHEN 'BROKEN' THEN 99           WHEN 'FAILED' THEN 99           WHEN 'REMOTE' THEN 99           WHEN 'SUCCEEDED' THEN 99           WHEN 'STOPPED' THEN 99           WHEN 'CHAIN_STALLED' THEN 99           ELSE 99         END AS CONSOLIDATED_STATE,         CASE NVL(JRD.STATUS,'MISSING')           WHEN 'MISSING' THEN 4           WHEN 'SUCCEEDED' THEN 10           WHEN 'FAILED' THEN 11           WHEN 'STOPPED' THEN             CASE             WHEN JRD.ADDITIONAL_INFO LIKE select col#, grantee#, privilege#,max(mod(nvl(option$,0),2)) from objauth$ where obj#=:1 and col# is not null group by privilege#, col#, grantee# order by col#, grantee#select col#, grantee#, privilege#,max(mod(nvl(option$,0),2)) from objauth$ where obj#=:1 and col# is not null group by privilege#, col#, grantee# order by col#, grantee#select  decode(u.type#, 2, u.ext_username, u.name), o.name, trigger$.sys_evts, trigger$.type#  from   obj$ o, user$ u, trigger$  where o.type# = 12 and (bitand(trigger$.property, 8) = 8)  and   (bitand(trigger$.property, 16) != 16)  and   trigger$.obj# = o.obj# and o.owner# = u.user# order by o.obj#select num_rows FROM dba_tables where table_name = 'ACER'select name, attr_id, toid, version from rule_set_nl$ where rs_obj# = :1  and ec_obj# = :2 and box_id = :3 order by ne_idSELECT /*+ leading(ST o u) */ ST.OBJ# OBJNUM, U.NAME OWNER, O.NAME OBJNAME, O.SUBNAME SUBNAME, ST.TYPE# TYPE#, ST.BO# BO#, ST.FLAGS, ST.OSIZE FROM OBJ$ O, USER$ U, (SELECT /*+ no_merge */ * FROM (SELECT /*+ dynamic_sampling(s 4) dynamic_sampling_est_cdn(s) */ S.*, ROW_NUMBER() OVER (ORDER BY DECODE(TYPE#, 1,1,2,1, 19,2,20,2, 34,3,35,3), STALENESS,OSIZE,OBJ#) RN FROM STATS_TARGET$ S WHERE S.STATUS = :B1 ) WHERE RN <= :B2 ) ST WHERE ST.OBJ# = O.OBJ# AND O.OWNER# = U.USER# ORDER BY DECODE(ST.TYPE#, 1,1,2,1, 19,2,20,2, 34,3,35,3), ST.STALENESS, ST.OSIZE, ST.OBJ#SELECT /*+ leading(ST o u) */ ST.OBJ# OBJNUM, U.NAME OWNER, O.NAME OBJNAME, O.SUBNAME SUBNAME, ST.TYPE# TYPE#, ST.BO# BO#, ST.FLAGS, ST.OSIZE FROM OBJ$ O, USER$ U, (SELECT /*+ no_merge */ * FROM (SELECT /*+ dynamic_sampling(s 4) dynamic_sampling_est_cdn(s) */ S.*, ROW_NUMBER() OVER (ORDER BY DECODE(TYPE#, 1,1,2,1, 19,2,20,2, 34,3,35,3), STALENESS,OSIZE,OBJ#) RN FROM STATS_TARGET$ S WHERE S.STATUS = :B1 ) WHERE RN <= :B2 ) ST WHERE ST.OBJ# = O.OBJ# AND O.OWNER# = U.USER# ORDER BY DECODE(ST.TYPE#, 1,1,2,1, 19,2,20,2, 34,3,35,3), ST.STALENESS, ST.OSIZE, ST.OBJ#select vindex,itypetoid,imethod#,iflags,itypeowner,itypename from vtable$ where obj#=:1 order by vindexSELECT INCARNATION#, INCARNATION#, RESETLOGS_CHANGE#, RESETLOGS_TIME FROM V$DATABASE_INCARNATION WHERE STATUS = 'CURRENT'select order#,columns,types from access$ where d_obj#=:1select order#,columns,types from access$ where d_obj#=:1select order#,columns,types from access$ where d_obj#=:1DELETE FROM sys.snap_loadertime$ sd  WHERE sd.tableobj# = :1select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"SNAP_ID" val,count(*) cnt  from "SYS"."WRH$_SYSMETRIC_SUMMARY" t  where "SNAP_ID" is not null  group by "SNAP_ID") order by valSELECT CASE WHEN BITAND(FLAGS,2) = 0 THEN NULL ELSE ANALYZETIME END, BITAND(FLAGS,2048) FROM SYS.IND$ T WHERE T.OBJ# = :B1 select bo#, intcol# from icoldep$ where obj#=:1select bo#, intcol# from icoldep$ where obj#=:1select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */max(substrb("TARGET_NAME",1,32)) val,count(*) cnt  from "SYS"."KET$_CLIENT_TASKS" t  where substrb("TARGET_NAME",1,32) is not null  group by nlssort(substrb("TARGET_NAME",1,32), 'NLS_SORT = binary')) order by nlssort(val,'NLS_SORT = binary')select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */max(substrb("TARGET_NAME",1,32)) val,count(*) cnt  from "SYS"."KET$_CLIENT_TASKS" t  where substrb("TARGET_NAME",1,32) is not null  group by nlssort(substrb("TARGET_NAME",1,32), 'NLS_SORT = binary')) order by nlssort(val,'NLS_SORT = binary')select q.eventid, q.oid, t.schema, t.name, q.table_objno,         q.usage, t.udata_type,  q.enable_flag,         q.max_retries, q.retry_delay, q.properties, q.ret_time,         t.flags, t.sort_cols, q.memory_threshold, a.owner_instance,         q.service_name, q.network_name, t.timezone  from system.aq$_queues q, system.aq$_queue_tables t,       sys.aq$_queue_table_affinities a  where q.table_objno = t.objno and q.table_objno = a.table_objno  and t.schema= :1 and q.name= :2 lock table sys.mon_mods$ in exclusive modelock table sys.mon_mods$ in exclusive modelock table sys.mon_mods$ in exclusive modeselect file# from file$ where ts#=:1select decode(value$, 'CAPTURE', 1, 0) from props$ where name = 'WORKLOAD_CAPTURE_MODE'select name, address, protocol, trans_name, subscriber_type, subscriber_id  , scn_at_add from  "SYS"."AQ$_ALERT_QT_S"   where queue_name = :1 and rule_name IS NULL and ruleset_name IS NULL and  negative_ruleset_name IS NULL and bitand(subscriber_type, 1) = 1SELECT SCRIPT_ID FROM DBA_RECOVERABLE_SCRIPT_HIST WHERE (SYSDATE - CREATION_TIME) >= :B1 select instance_number, io_shares from resource_instance_capability$ where status = 'ACTIVE'DECLARE job BINARY_INTEGER := :job;  next_date TIMESTAMP WITH TIME ZONE := :mydate;  broken BOOLEAN := FALSE;  job_name VARCHAR2(30) := :job_name;  job_subname VARCHAR2(30) := :job_subname;  job_owner VARCHAR2(30) := :job_owner;  job_start TIMESTAMP WITH TIME ZONE := :job_start;  job_scheduled_start TIMESTAMP WITH TIME ZONE := :job_scheduled_start;  window_start TIMESTAMP WITH TIME ZONE := :window_start;  window_end TIMESTAMP WITH TIME ZONE := :window_end;  chain_id VARCHAR2(14) :=  :chainid;  credential_owner varchar2(30) := :credown;  credential_name  varchar2(30) := :crednam;  destination_owner varchar2(30) := :destown;  destination_name varchar2(30) := :destnam;  job_dest_id varchar2(14) := :jdestid;  log_id number := :log_id;  BEGIN  sys.dbms_streams_auto_int.clean_auto_split_merge;  :mydate := next_date; IF broken THEN :b := 1; ELSE :b := 0; END IF; END; select num_rows FROM dba_tables where table_name = 'JOB_HISTORY'SELECT group_id, group_name, metric_id,            metric_name, metric_unit          FROM   gv$metricname          WHERE  inst_id = USERENV('INSTANCE')/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("SPARE6")),to_char(substrb(dump(min("SPARE6"),16,0,32),1,120)),to_char(substrb(dump(max("SPARE6"),16,0,32),1,120)),to_char(count("OBJ#")),to_char(substrb(dump(min("OBJ#"),16,0,32),1,120)),to_char(substrb(dump(max("OBJ#"),16,0,32),1,120)),to_char(count("DATAOBJ#")),to_char(substrb(dump(min("DATAOBJ#"),16,0,32),1,120)),to_char(substrb(dump(max("DATAOBJ#"),16,0,32),1,120)),to_char(count("TS#")),to_char(substrb(dump(min("TS#"),16,0,32),1,120)),to_char(substrb(dump(max("TS#"),16,0,32),1,120)),to_char(count("FILE#")),to_char(substrb(dump(min("FILE#"),16,0,32),1,120)),to_char(substrb(dump(max("FILE#"),16,0,32),1,120)),to_char(count("BLOCK#")),to_char(substrb(dump(min("BLOCK#"),16,0,32),1,120)),to_char(substrb(dump(max("BLOCK#"),16,0,32),1,120)),to_char(count("BO#")),to_char(substrb(dump(min("BO#"),1select num_rows FROM dba_tables where table_name = 'LDA'select SUM(data_length) from all_tab_columns where table_name = 'LENTES'lock table sys.col_usage$ in exclusive mode nowaitlock table sys.col_usage$ in exclusive mode nowaitlock table sys.col_usage$ in exclusive mode nowaitlock table sys.col_usage$ in exclusive mode nowaitlock table sys.col_usage$ in exclusive mode nowaitlock table sys.col_usage$ in exclusive mode nowaitdelete /*+ index(mm) */ from sys.mon_mods_all$ mm where obj# = :1delete /*+ index(mm) */ from sys.mon_mods_all$ mm where obj# = :1delete /*+ index(mm) */ from sys.mon_mods_all$ mm where obj# = :1SELECT VALUE FROM V$PARAMETER WHERE NAME='compatible'SELECT OBJECT_ID, METRIC_VALUE, MESSAGE_LEVEL FROM SYS.WRI$_ALERT_OUTSTANDING , SYS.TS$ WHERE OBJECT_ID <> 0 AND SYS.TS$.TS# = OBJECT_ID AND SYS.TS$.CONTENTS$ = 0 AND (DECODE(BITAND(SYS.TS$.FLAGS, 16), 16, 1, 0) = 0)SELECT OBJECT_ID, METRIC_VALUE, MESSAGE_LEVEL FROM SYS.WRI$_ALERT_OUTSTANDING , SYS.TS$ WHERE OBJECT_ID <> 0 AND SYS.TS$.TS# = OBJECT_ID AND SYS.TS$.CONTENTS$ = 0 AND (DECODE(BITAND(SYS.TS$.FLAGS, 16), 16, 1, 0) = 0)SELECT T.SQL_HANDLE, O.NAME FROM SQL$TEXT T, SQLOBJ$ O WHERE SYSTIMESTAMP - O.LAST_EXECUTED >= :B3 AND O.OBJ_TYPE = :B2 AND O.SIGNATURE = T.SIGNATURE AND BITAND(O.FLAGS, :B1 ) = :B1 delete from WRH$_STREAMS_CAPTURE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from WRH$_OPTIMIZER_ENV tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"SID" val,count(*) cnt  from "SYS"."STATS_TARGET$" t  where "SID" is not null  group by "SID") order by valselect SUM(column_length) from all_ind_columns where table_name = 'X'SELECT RM.CONF#, RM.NAME, RM.VALUE FROM V$RMAN_CONFIGURATION RM WHERE ((:B2 IS NULL OR UPPER(:B2 ) = UPPER(RM.NAME)) AND (:B1 IS NULL OR UPPER(:B1 ) = UPPER(RM.VALUE)))SELECT id,name,property FROM sys.wri$_adv_definitions select nvl(sum(d.blocks),0) from x$kewx_segments d, (select distinct o1.segment_name name from x$kewx_segments o1 where o1.segment_name like  '%WRM$|_%' ESCAPE '|'    or o1.segment_name like  '%WRH$|_%' ESCAPE '|' union all select distinct o2.lob_name name from x$kewx_lobs o2 where o2.table_name like  '%WRM$|_%' ESCAPE '|'    or o2.table_name like  '%WRH$|_%' ESCAPE '|' ) s where (d.owner = 'SYS') and (d.segment_name = s.name)select next_run_date, obj#, run_job, sch_job from (select decode(bitand(a.flags, 16384), 0, a.next_run_date,                a.last_enabled_time) next_run_date,       a.obj# obj#, decode(bitand(a.flags, 16384), 0, 0, 1) run_job, a.sch_job  sch_job  from  (select p.obj# obj#, p.flags flags, p.next_run_date next_run_date,      p.job_status job_status, p.class_oid class_oid,      p.last_enabled_time last_enabled_time, p.instance_id instance_id,      1 sch_job   from sys.scheduler$_job p   where bitand(p.job_status, 3) = 1    and ((bitand(p.flags, 134217728 + 268435456) = 0) or         (bitand(p.job_status, 1024) <> 0))    and bitand(p.flags, 4096) = 0    and ((p.instance_id is not null    and (to_char(p.instance_id) = :1))    or (p.instance_id is null and p.class_oid is not null    and p.class_oid in (select b.obj# from sys.scheduler$_class b      where bitand(b.flags, :2) <> 0 and lower(b.affinity) = lower(:3))))   UNION ALL   select q.obj#, q.flags, q.next_run_date, q.job_status, q.classSELECT TS_ID, OBJN, OBJD, REASON_VALUE, REASON, CREATION_TIME, SEGMENT_OWNER, SEGMENT_NAME, PARTITION_NAME, SEGMENT_TYPE, TABLESPACE_NAME FROM SYS.WRI$_SEGADV_OBJLIST WHERE REASON IN ('COMPRESSION', 'SPACE_ALLOC', 'SPACE_USAGE', 'CHAINROWS', 'SCAN', 'ADDM', 'IOWAIT') AND STATUS IN ('NEW', 'BEING_PROCESSED') ORDER BY CREATION_TIME, REASON, REASON_VALUE DESCSELECT NVL(VALUE, 'NOTOPEN') FROM DBA_SCHEDULER_GLOBAL_ATTRIBUTE WHERE ATTRIBUTE_NAME = 'CURRENT_OPEN_WINDOW'SELECT NVL(VALUE, 'NOTOPEN') FROM DBA_SCHEDULER_GLOBAL_ATTRIBUTE WHERE ATTRIBUTE_NAME = 'CURRENT_OPEN_WINDOW'select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"STARTUP_TIME" val,count(*) cnt  from "SYS"."WRM$_DATABASE_INSTANCE" t  where "STARTUP_TIME" is not null  group by "STARTUP_TIME") order by valBEGIN :success := dbms_ha_alerts_prvt.check_ha_resources; END;select ts#,file#,block#,cols,nvl(size$,-1),pctfree$,pctused$,initrans,maxtrans,hashkeys,func,extind,avgchn,nvl(degree,1),nvl(instances,1),nvl(flags,0),nvl(spare1,0)from clu$ where obj#=:1SELECT DECODE(VALUE, 'NONE', 0, 1) FROM V$PARAMETER WHERE LOWER(NAME) = 'control_management_pack_access'select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"DBID" val,count(*) cnt  from sys.ora_temp_1_ds_170009 t where "DBID" is not null  group by "DBID") order by valselect lobtsn, lobrdba, lobobjid from x$lobstat   where lobspcdealloc > 0 and lobcurrtime >= :1   order by lobspcdealloc descselect /*+  no_parallel_index(t, "WRI$_SEGADV_CNTRLTAB_PK")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"WRI$_SEGADV_CNTRLTAB_PK") */ count(*) as nrw,count(distinct sys_op_lbid(4943,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."WRI$_SEGADV_CNTRLTAB" t where "AUTO_TASKID" is not nullselect distinct(-privilege#),nvl(option$,0) from sysauth$ where grantee#=:1 and privilege#<0select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"ROW#" val,count(*) cnt  from sys.ora_temp_1_ds_170008 t where "ROW#" is not null  group by "ROW#") order by valselect ROWID from SYS_FBA_TRACKEDTABLES where ROWNUM = 1insert into sys.wri$_optstat_tab_history(obj#,rowcnt,blkcnt,avgrln, analyzetime,samplesize,cachedblk,cachehit,logicalread,savtime,spare1,flags)  values  (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12)select value, consumer_group from resource_group_mapping$ where attribute = :1 and status = 'ACTIVE'select FLAGS from SYS_FBA_TRACKEDTABLES where OBJ# = 21702BEGIN    prvt_advisor.delete_expired_tasks;  END;select SYS_CONTEXT('USERENV', 'SERVER_HOST'), SYS_CONTEXT('USERENV', 'DB_UNIQUE_NAME'), SYS_CONTEXT('USERENV', 'INSTANCE_NAME'), SYS_CONTEXT('USERENV', 'SERVICE_NAME'), INSTANCE_NUMBER, STARTUP_TIME, SYS_CONTEXT('USERENV', 'DB_DOMAIN') from v$instance where INSTANCE_NAME=SYS_CONTEXT('USERENV', 'INSTANCE_NAME')select file#, block# from recyclebin$ where ts# = :1     and file# != 0 and block# != 0 and space = 0BEGIN    :c := dbms_spm_internal.auto_purge_sql_plan_baseline;  END;update sys.scheduler$_job set  last_start_date = :1, running_instance = :2, running_slave = :3, job_status = :4 where  obj# = :5update sys.scheduler$_job set  last_start_date = :1, running_instance = :2, running_slave = :3, job_status = :4 where  obj# = :5update sys.scheduler$_job set  last_start_date = :1, running_instance = :2, running_slave = :3, job_status = :4 where  obj# = :5update sys.scheduler$_job set  last_start_date = :1, running_instance = :2, running_slave = :3, job_status = :4 where  obj# = :5select 1 from "SYS"."AQ$_ALERT_QT_L"delete /*+ dynamic_sampling(4) */ from sys.wri$_optstat_histgrm_history      where savtime < :1 and rownum <= NVL(:2, rownum)select /*+  no_parallel_index(t, "I_SCHEDULER_JOB1")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_SCHEDULER_JOB1") */ count(*) as nrw,count(distinct sys_op_lbid(5925,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."SCHEDULER$_JOB" t where "SYS_NC00055$" is not nullselect /*+  no_parallel_index(t, "I_SCHEDULER_JOB1")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_SCHEDULER_JOB1") */ count(*) as nrw,count(distinct sys_op_lbid(5925,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."SCHEDULER$_JOB" t where "SYS_NC00055$" is not nullSELECT VALUE FROM V$PARAMETER WHERE UPPER(NAME) = '_QA_LRG_TYPE'DECLARE job BINARY_INTEGER := :job;  next_date TIMESTAMP WITH TIME ZONE := :mydate;  broken BOOLEAN := FALSE;  job_name VARCHAR2(30) := :job_name;  job_subname VARCHAR2(30) := :job_subname;  job_owner VARCHAR2(30) := :job_owner;  job_start TIMESTAMP WITH TIME ZONE := :job_start;  job_scheduled_start TIMESTAMP WITH TIME ZONE := :job_scheduled_start;  window_start TIMESTAMP WITH TIME ZONE := :window_start;  window_end TIMESTAMP WITH TIME ZONE := :window_end;  chain_id VARCHAR2(14) :=  :chainid;  credential_owner varchar2(30) := :credown;  credential_name  varchar2(30) := :crednam;  destination_owner varchar2(30) := :destown;  destination_name varchar2(30) := :destnam;  job_dest_id varchar2(14) := :jdestid;  log_id number := :log_id;  BEGIN  sys.dbms_streams_auto_int.clean_recoverable_script;  :mydate := next_date; IF broken THEN :b := 1; ELSE :b := 0; END IF; END; select rule_or_piece, num_rops, box_id, property from rule_set_ror$ where  rs_obj# = :1 and ec_obj# = :2 and rule_id = :3select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"FLAGS" val,count(*) cnt  from "SYS"."IND$" t  where "FLAGS" is not null  group by "FLAGS") order by valselect SUM(column_length) from all_ind_columns where table_name = 'PERRO'/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("OBJ#")),to_char(substrb(dump(min("OBJ#"),16,0,32),1,120)),to_char(substrb(dump(max("OBJ#"),16,0,32),1,120)),to_char(count("DATAOBJ#")),to_char(substrb(dump(min("DATAOBJ#"),16,0,32),1,120)),to_char(substrb(dump(max("DATAOBJ#"),16,0,32),1,120)),to_char(count("BO#")),to_char(substrb(dump(min("BO#"),16,0,32),1,120)),to_char(substrb(dump(max("BO#"),16,0,32),1,120)),to_char(count("PART#")),to_char(substrb(dump(min("PART#"),16,0,32),1,120)),to_char(substrb(dump(max("PART#"),16,0,32),1,120)),to_char(count("HIBOUNDLEN")),to_char(substrb(dump(min("HIBOUNDLEN"),16,0,32),1,120)),to_char(substrb(dump(max("HIBOUNDLEN"),16,0,32),1,120)),to_char(count("FLAGS")),to_char(substrb(dump(min("FLAGS"),16,0,32),1,120)),to_char(substrb(dump(max("FLAGS"),16,0,32),1,120)),to_char(count("TS#")),to_char(substrb(dump(minselect job, nvl2(last_date, 1, 0) from sys.job$ where next_date <= :1 and (field1 = :2 or (field1 = 0 and 'Y' = :3)) and ((dbms_logstdby.db_is_logstdby = 0 and job < 1000000000) or  (dbms_logstdby.db_is_logstdby = 1 and job >= 1000000000)) order by next_date, jobLOCK TABLE "SYS"."ORA_TEMP_1_DS_170008" IN EXCLUSIVE MODE  NOWAIT delete from obj$ where obj# = :1/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("NAME")),to_char(substrb(dump(min("NAME"),16,0,32),1,120)),to_char(substrb(dump(max("NAME"),16,0,32),1,120)),to_char(count("LOCKID")),to_char(substrb(dump(min("LOCKID"),16,0,32),1,120)),to_char(substrb(dump(max("LOCKID"),16,0,32),1,120)),to_char(count("EXPIRATION")),to_char(substrb(dump(min("EXPIRATION"),16,0,32),1,120)),to_char(substrb(dump(max("EXPIRATION"),16,0,32),1,120)) from "SYS"."DBMS_LOCK_ALLOCATED" t  /* ACL,NIL,NIL,NDV,NIL,NIL,NDV,NIL,NIL*//* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("NAME")),to_char(substrb(dump(min("NAME"),16,0,32),1,120)),to_char(substrb(dump(max("NAME"),16,0,32),1,120)),to_char(count("LOCKID")),to_char(substrb(dump(min("LOCKID"),16,0,32),1,120)),to_char(substrb(dump(max("LOCKID"),16,0,32),1,120)),to_char(count("EXPIRATION")),to_char(substrb(dump(min("EXPIRATION"),16,0,32),1,120)),to_char(substrb(dump(max("EXPIRATION"),16,0,32),1,120)) from "SYS"."DBMS_LOCK_ALLOCATED" t  /* ACL,NIL,NIL,NDV,NIL,NIL,NDV,NIL,NIL*/select procedure#,entrypoint# from procedurec$ where obj#=:1 order by procedure#update sys.scheduler$_job set  program_oid = :1, schedule_id = :2, last_enabled_time = :3, retry_count = :4, run_count = :5, failure_count = :6, flags = :7, job_status = :8 where  obj# = :9update sys.scheduler$_job set  program_oid = :1, schedule_id = :2, last_enabled_time = :3, retry_count = :4, run_count = :5, failure_count = :6, flags = :7, job_status = :8 where  obj# = :9delete from WRH$_SHARED_POOL_ADVICE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id))  DELETE FROM xs$session_rolesselect /*+  no_parallel_index(t, "I_INDPART_BOPART$")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_INDPART_BOPART$") */ count(*) as nrw,count(distinct sys_op_lbid(576,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."INDPART$" t where "BO#" is not null or "PART#" is not nullselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */max("OWNER") val,count(*) cnt  from "SYS"."SCHEDULER$_EVENT_LOG" t  where "OWNER" is not null  group by nlssort("OWNER", 'NLS_SORT = binary')) order by nlssort(val,'NLS_SORT = binary')select avgchn from clu$ where obj#=:1select name, address, protocol, subscriber_type, subscriber_id  from "SYS"."AQ$_ALERT_QT_S"  where queue_name = :1 and  ((bitand(subscriber_type, 1) = 1) OR   (bitand(subscriber_type, 4) = 4) OR   (bitand(subscriber_type, 8) = 8) OR   (bitand(subscriber_type, 4096) = 4096))  and rule_name IS NULL AND ruleset_name IS NULL AND  negative_ruleset_name IS NULLSELECT T.PROPERTY FROM SYS.USER$ U, SYS.OBJ$ O, SYS.TAB$ T WHERE U.NAME = :B2 AND U.USER# = O.OWNER# AND O.NAME = :B1 AND O.TYPE# = 2 AND O.OBJ# = T.OBJ#select /*+ index(idl_ub2$ i_idl_ub21) +*/ piece#,length,piece from idl_ub2$ where obj#=:1 and part=:2 and version=:3 order by piece#select /*+ index(idl_ub2$ i_idl_ub21) +*/ piece#,length,piece from idl_ub2$ where obj#=:1 and part=:2 and version=:3 order by piece#select /*+  no_parallel_index(t, "SCHEDULER$_INSTANCE_PK")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"SCHEDULER$_INSTANCE_PK") */ count(*) as nrw,count(distinct sys_op_lbid(5962,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."SCHEDULER$_EVENT_LOG" t where "LOG_ID" is not null or "DBID" is not nullSELECT /*+ rule */ U.NAME, OT.NAME, NULL, NULL, C.NAME, BITAND(H.SPARE2, 2), BITAND(H.SPARE2, 1), H.DISTCNT, H.DENSITY, H.SPARE1, H.SAMPLE_SIZE, H.NULL_CNT, H.TIMESTAMP#, H.AVGCLN, H.LOWVAL, H.HIVAL, H.MINIMUM, H.MAXIMUM, NULL, NULL, H.CACHE_CNT, HG.BUCKET, HG.ENDPOINT, HG.EPVALUE, BITAND(H.SPARE2, 4), NULL FROM SYS.USER$ U, SYS.OBJ$ OT, SYS.COL$ C, SYS.HIST_HEAD$ H, HISTGRM$ HG WHERE :B4 IS NULL AND U.NAME = :B3 AND OT.OWNER# = U.USER# AND OT.NAME = :B2 AND OT.TYPE# = 2 AND C.OBJ# = OT.OBJ# AND (:B1 IS NULL OR C.NAME = :B1 ) AND H.OBJ# = OT.OBJ# AND H.INTCOL# = C.INTCOL# AND HG.OBJ#(+) = H.OBJ# AND HG.INTCOL#(+) = H.INTCOL# UNION ALL SELECT U.NAME, OT.NAME, OP.SUBNAME, NULL, C.NAME, BITAND(H.SPARE2, 2), BITAND(H.SPARE2, 1), H.DISTCNT, H.DENSITY, H.SPARE1, H.SAMPLE_SIZE, H.NULL_CNT, H.TIMESTAMP#, H.AVGCLN, H.LOWVAL, H.HIVAL, H.MINIMUM, H.MAXIMUM, NULL, NULL, H.CACHE_CNT, HG.BUCKET, HG.ENDPOINT, HG.EPVALUE, BITAND(H.SPARE2, 4), NULL FROM SYS.USER$ U, SYS.OBJ$ OT, SYS.COL$ C, SYS.TABPARTSELECT /*+ rule */ U.NAME, OT.NAME, NULL, NULL, C.NAME, BITAND(H.SPARE2, 2), BITAND(H.SPARE2, 1), H.DISTCNT, H.DENSITY, H.SPARE1, H.SAMPLE_SIZE, H.NULL_CNT, H.TIMESTAMP#, H.AVGCLN, H.LOWVAL, H.HIVAL, H.MINIMUM, H.MAXIMUM, NULL, NULL, H.CACHE_CNT, HG.BUCKET, HG.ENDPOINT, HG.EPVALUE, BITAND(H.SPARE2, 4), NULL FROM SYS.USER$ U, SYS.OBJ$ OT, SYS.COL$ C, SYS.HIST_HEAD$ H, HISTGRM$ HG WHERE :B4 IS NULL AND U.NAME = :B3 AND OT.OWNER# = U.USER# AND OT.NAME = :B2 AND OT.TYPE# = 2 AND C.OBJ# = OT.OBJ# AND (:B1 IS NULL OR C.NAME = :B1 ) AND H.OBJ# = OT.OBJ# AND H.INTCOL# = C.INTCOL# AND HG.OBJ#(+) = H.OBJ# AND HG.INTCOL#(+) = H.INTCOL# UNION ALL SELECT U.NAME, OT.NAME, OP.SUBNAME, NULL, C.NAME, BITAND(H.SPARE2, 2), BITAND(H.SPARE2, 1), H.DISTCNT, H.DENSITY, H.SPARE1, H.SAMPLE_SIZE, H.NULL_CNT, H.TIMESTAMP#, H.AVGCLN, H.LOWVAL, H.HIVAL, H.MINIMUM, H.MAXIMUM, NULL, NULL, H.CACHE_CNT, HG.BUCKET, HG.ENDPOINT, HG.EPVALUE, BITAND(H.SPARE2, 4), NULL FROM SYS.USER$ U, SYS.OBJ$ OT, SYS.COL$ C, SYS.TABPARTSELECT /*+ rule */ U.NAME, OT.NAME, NULL, NULL, C.NAME, BITAND(H.SPARE2, 2), BITAND(H.SPARE2, 1), H.DISTCNT, H.DENSITY, H.SPARE1, H.SAMPLE_SIZE, H.NULL_CNT, H.TIMESTAMP#, H.AVGCLN, H.LOWVAL, H.HIVAL, H.MINIMUM, H.MAXIMUM, NULL, NULL, H.CACHE_CNT, HG.BUCKET, HG.ENDPOINT, HG.EPVALUE, BITAND(H.SPARE2, 4), NULL FROM SYS.USER$ U, SYS.OBJ$ OT, SYS.COL$ C, SYS.HIST_HEAD$ H, HISTGRM$ HG WHERE :B4 IS NULL AND U.NAME = :B3 AND OT.OWNER# = U.USER# AND OT.NAME = :B2 AND OT.TYPE# = 2 AND C.OBJ# = OT.OBJ# AND (:B1 IS NULL OR C.NAME = :B1 ) AND H.OBJ# = OT.OBJ# AND H.INTCOL# = C.INTCOL# AND HG.OBJ#(+) = H.OBJ# AND HG.INTCOL#(+) = H.INTCOL# UNION ALL SELECT U.NAME, OT.NAME, OP.SUBNAME, NULL, C.NAME, BITAND(H.SPARE2, 2), BITAND(H.SPARE2, 1), H.DISTCNT, H.DENSITY, H.SPARE1, H.SAMPLE_SIZE, H.NULL_CNT, H.TIMESTAMP#, H.AVGCLN, H.LOWVAL, H.HIVAL, H.MINIMUM, H.MAXIMUM, NULL, NULL, H.CACHE_CNT, HG.BUCKET, HG.ENDPOINT, HG.EPVALUE, BITAND(H.SPARE2, 4), NULL FROM SYS.USER$ U, SYS.OBJ$ OT, SYS.COL$ C, SYS.TABPARTDELETE FROM SYS.SCHEDULER$_WINDOW_DETAILS WHERE LOG_ID IN (SELECT E.LOG_ID FROM SYS.SCHEDULER$_EVENT_LOG E WHERE E.TYPE# = 69 AND E.LOG_DATE < :B2 - NUMTODSINTERVAL(:B1 , 'DAY'))SELECT USER FROM SYS.DUALdelete from WRI$_ALERT_OUTSTANDING where reason_id = :1 and object_id = :2 and subobject_id = :3 and internal_instance_number = :4 returning owner, object_name, subobject_name, sequence_id, error_instance_id, creation_time into :5, :6, :7, :8, :9, :10select i.obj#, i.flags, u.name, o.name, o.type#     from sys.obj$ o, sys.user$ u, sys.ind_online$ i    where  (bitand(i.flags, 256) = 256 or bitand(i.flags, 512) = 512) and           (not((i.type# = 9) and bitand(i.flags,8) = 8)) and           o.obj#=i.obj# and o.owner# = u.user#update tab$ set ts#=:2,file#=:3,block#=:4,bobj#=decode(:5,0,null,:5),tab#=decode(:6,0,null,:6),intcols=:7,kernelcols=:8,clucols=decode(:9,0,null,:9),audit$=:10,flags=:11,pctfree$=:12,pctused$=:13,initrans=:14,maxtrans=:15,rowcnt=:16,blkcnt=:17,empcnt=:18,avgspc=:19,chncnt=:20,avgrln=:21,analyzetime=:22,samplesize=:23,cols=:24,property=:25,degree=decode(:26,1,null,:26),instances=decode(:27,1,null,:27),dataobj#=:28,avgspc_flb=:29,flbcnt=:30,trigflag=:31,spare1=:32,spare2=decode(:33,0,null,:33),spare4=:34,spare6=:35 where obj#=:1update tab$ set ts#=:2,file#=:3,block#=:4,bobj#=decode(:5,0,null,:5),tab#=decode(:6,0,null,:6),intcols=:7,kernelcols=:8,clucols=decode(:9,0,null,:9),audit$=:10,flags=:11,pctfree$=:12,pctused$=:13,initrans=:14,maxtrans=:15,rowcnt=:16,blkcnt=:17,empcnt=:18,avgspc=:19,chncnt=:20,avgrln=:21,analyzetime=:22,samplesize=:23,cols=:24,property=:25,degree=decode(:26,1,null,:26),instances=decode(:27,1,null,:27),dataobj#=:28,avgspc_flb=:29,flbcnt=:30,trigflag=:31,spare1=:32,spare2=decode(:33,0,null,:33),spare4=:34,spare6=:35 where obj#=:1delete from WRH$_FILEMETRIC_HISTORY tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select metadata from kopm$  where name='DB_FDO'select metadata from kopm$  where name='DB_FDO'SELECT TS#, OBJ#, DATAOBJ#, SUM(ABS(SPACE_ALLOCATED_DELTA)) FROM SYS.WRH$_SEG_STAT WHERE SNAP_ID > :B1 AND TS# <> 0 GROUP BY TS# , OBJ#, DATAOBJ# ORDER BY SUM(ABS(SPACE_ALLOCATED_DELTA)) DESCLOCK TABLE SYS.STATS_TARGET$ IN EXCLUSIVE MODE LOCK TABLE SYS.STATS_TARGET$ IN EXCLUSIVE MODE select low, bit from  (select snap_id - 1 low, min(begin_interval_time) bit from wrm$_snapshot where dbid = :dbid and snap_id = (select min(snap_id) from wrm$_snapshot where dbid = :dbid and status in (0,1)) group by snap_id union all select 2147483647, systimestamp from  v$database where dbid <> :dbid order by 1 asc nulls last ) where rownum = 1 select inst_id, addr, indx, ksuprpid, ksuprpname, ksuprunm, ksuprser, ksuprtid, ksuprpnm, ksuprtfi, ksuprtfn, decode(bitand(ksuprflg,2),0,null,1), decode(ksllawat,hextoraw('00'),null,ksllawat), decode(ksllaspn,hextoraw('00'),null,ksllaspn), ksuprpum,ksuprpnam+ksuprpram,ksuprpfm, case when ksuprpnam+ksuprpram > ksuprpmm       then ksuprpnam+ksuprpram       else ksuprpmm end  from x$ksupr where bitand(ksspaflg,1)!=0call dbms_ir.reevaluateopenfailures ( :0,:1,:2,:3 )SELECT NVL(MAX(SNAPID),0) FROM SYS.WRI$_SEGADV_CNTRLTABSELECT NVL(MAX(SNAPID),0) FROM SYS.WRI$_SEGADV_CNTRLTAB/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("OBJ#")),to_char(substrb(dump(min("OBJ#"),16,0,32),1,120)),to_char(substrb(dump(max("OBJ#"),16,0,32),1,120)),to_char(count("COL#")),to_char(substrb(dump(min("COL#"),16,0,32),1,120)),to_char(substrb(dump(max("COL#"),16,0,32),1,120)),to_char(count("ROW#")),to_char(substrb(dump(min("ROW#"),16,0,32),1,120)),to_char(substrb(dump(max("ROW#"),16,0,32),1,120)),to_char(count("BUCKET")),to_char(substrb(dump(min("BUCKET"),16,0,32),1,120)),to_char(substrb(dump(max("BUCKET"),16,0,32),1,120)),to_char(count("ENDPOINT")),to_char(substrb(dump(min("ENDPOINT"),16,0,32),1,120)),to_char(substrb(dump(max("ENDPOINT"),16,0,32),1,120)),to_char(count("INTCOL#")),to_char(substrb(dump(min("INTCOL#"),16,0,32),1,120)),to_char(substrb(dump(max("INTCOL#"),16,0,32),1,120)),to_char(count("EPVALUE")),to_char(substrb(dump(min("delete from WRH$_MEMORY_TARGET_ADVICE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) update seg$ set type#=:4,blocks=:5,extents=:6,minexts=:7,maxexts=:8,extsize=:9,extpct=:10,user#=:11,iniexts=:12,lists=decode(:13, 65535, NULL, :13),groups=decode(:14, 65535, NULL, :14), cachehint=:15, hwmincr=:16, spare1=DECODE(:17,0,NULL,:17),scanhint=:18, bitmapranges=:19 where ts#=:1 and file#=:2 and block#=:3select master from sys.mlog$ where master = :2 and mowner = :1insert into wrh$_sysmetric_summary     (snap_id, dbid, instance_number,      begin_time, end_time, intsize, group_id, metric_id, num_interval,      maxval, minval, average, standard_deviation, sum_squares)  select      :snap_id, :dbid, :instance_number,      begtime, endtime, intsize_csec,      groupid, metricid, numintv, max, min, avg, std, sumsq    FROM x$kewmsmdv WHERE groupid = 2insert into wrh$_sysmetric_summary     (snap_id, dbid, instance_number,      begin_time, end_time, intsize, group_id, metric_id, num_interval,      maxval, minval, average, standard_deviation, sum_squares)  select      :snap_id, :dbid, :instance_number,      begtime, endtime, intsize_csec,      groupid, metricid, numintv, max, min, avg, std, sumsq    FROM x$kewmsmdv WHERE groupid = 2select snap_id + 1 low, max(end_interval_time) eit from wrm$_snapshot where dbid = :dbid and snap_id = (select max(snap_id) from wrm$_snapshot s where dbid = :dbid and snap_id < :snap_id and status in (0,1) and not exists (select 1 from WRM$_BASELINE b where b.dbid = s.dbid and s.snap_id >= b.start_snap_id and s.snap_id <= b.end_snap_id)) group by snap_id delete from WRH$_ROWCACHE_SUMMARY_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from WRH$_TEMPSTATXS tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select t.ts#,t.file#,t.block#,nvl(t.bobj#,0),nvl(t.tab#,0),t.intcols,nvl(t.clucols,0),t.audit$,t.flags,t.pctfree$,t.pctused$,t.initrans,t.maxtrans,t.rowcnt,t.blkcnt,t.empcnt,t.avgspc,t.chncnt,t.avgrln,t.analyzetime,t.samplesize,t.cols,t.property,nvl(t.degree,1),nvl(t.instances,1),t.avgspc_flb,t.flbcnt,t.kernelcols,nvl(t.trigflag, 0),nvl(t.spare1,0),nvl(t.spare2,0),t.spare4,t.spare6,ts.cachedblk,ts.cachehit,ts.logicalread from tab$ t, tab_stats$ ts where t.obj#= :1 and t.obj# = ts.obj# (+)select t.ts#,t.file#,t.block#,nvl(t.bobj#,0),nvl(t.tab#,0),t.intcols,nvl(t.clucols,0),t.audit$,t.flags,t.pctfree$,t.pctused$,t.initrans,t.maxtrans,t.rowcnt,t.blkcnt,t.empcnt,t.avgspc,t.chncnt,t.avgrln,t.analyzetime,t.samplesize,t.cols,t.property,nvl(t.degree,1),nvl(t.instances,1),t.avgspc_flb,t.flbcnt,t.kernelcols,nvl(t.trigflag, 0),nvl(t.spare1,0),nvl(t.spare2,0),t.spare4,t.spare6,ts.cachedblk,ts.cachehit,ts.logicalread from tab$ t, tab_stats$ ts where t.obj#= :1 and t.obj# = ts.obj# (+)select t.ts#,t.file#,t.block#,nvl(t.bobj#,0),nvl(t.tab#,0),t.intcols,nvl(t.clucols,0),t.audit$,t.flags,t.pctfree$,t.pctused$,t.initrans,t.maxtrans,t.rowcnt,t.blkcnt,t.empcnt,t.avgspc,t.chncnt,t.avgrln,t.analyzetime,t.samplesize,t.cols,t.property,nvl(t.degree,1),nvl(t.instances,1),t.avgspc_flb,t.flbcnt,t.kernelcols,nvl(t.trigflag, 0),nvl(t.spare1,0),nvl(t.spare2,0),t.spare4,t.spare6,ts.cachedblk,ts.cachehit,ts.logicalread from tab$ t, tab_stats$ ts where t.obj#= :1 and t.obj# = ts.obj# (+)SELECT TABOWNER, TABNAME, PARTNAME, TSNAME, TBSID, SEGSIZE, SEGOBJD, SEGOBJN, SEGMENT_TYPE FROM SYS_UNCOMPRESSED_SEGS WHERE TOTAL_INDEXES > 3 AND SEGSIZE > 10485760 ORDER BY SEGSIZE DESCSELECT TABOWNER, TABNAME, PARTNAME, TSNAME, TBSID, SEGSIZE, SEGOBJD, SEGOBJN, SEGMENT_TYPE FROM SYS_UNCOMPRESSED_SEGS WHERE TOTAL_INDEXES > 3 AND SEGSIZE > 10485760 ORDER BY SEGSIZE DESCselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"DBID" val,count(*) cnt  from "SYS"."WRH$_SYSMETRIC_SUMMARY" t  where "DBID" is not null  group by "DBID") order by valselect position#,sequence#,level#,argument,type#,charsetid,charsetform,properties,nvl(length, 0), nvl(precision#, 0),nvl(scale, 0),nvl(radix, 0), type_owner,type_name,type_subname,type_linkname,pls_type from argument$ where obj#=:1 and procedure#=:2 order by sequence# descselect /*+  no_parallel_index(t, "I_SCHEDULER_JOB3")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_SCHEDULER_JOB3") */ count(*) as nrw,count(distinct sys_op_lbid(5927,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."SCHEDULER$_JOB" t where "SCHEDULE_ID" is not nullselect /*+  no_parallel_index(t, "I_SCHEDULER_JOB3")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_SCHEDULER_JOB3") */ count(*) as nrw,count(distinct sys_op_lbid(5927,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."SCHEDULER$_JOB" t where "SCHEDULE_ID" is not nullSELECT PARAM_ID, AUDIT_TRAIL_TYPE#, NUMBER_VALUE, STRING_VALUE  FROM SYS.DAM_CONFIG_PARAM$  WHERE PARAM_ID = 21 AND  (AUDIT_TRAIL_TYPE# = 1 OR AUDIT_TRAIL_TYPE# = 3 OR AUDIT_TRAIL_TYPE# = 15)select decode(failover_method, NULL, 0 , 'BASIC', 1, 'PRECONNECT', 2 , 'PREPARSE', 4 , 0), decode(failover_type, NULL, 1 , 'NONE', 1 , 'SESSION', 2, 'SELECT',  4, 1), failover_retries, failover_delay, flags from service$ where name = :1SELECT /*+ rule */ C.NAME CNAME FROM COL$ C WHERE C.OBJ#=:B1 AND BITAND(C.PROPERTY,32) != 32 AND C.INTCOL# NOT IN (SELECT IC.INTCOL# FROM ICOL$ IC WHERE IC.OBJ#=:B2 ) AND ROWNUM < 2select SUM(data_length) from all_tab_columns where table_name = 'TESTING'select count(*) from sys.scheduler$_job_argument where oid = :1 select privilege# from sysauth$ where (grantee#=:1 or grantee#=1) and privilege#>0 delete from "SYS"."WRM$_SNAPSHOT" where "DBID" = :1 and "INSTANCE_NUMBER" = :2 and "STARTUP_TIME" = :3select i.obj#, i.flags, u.name, o.name, o.type#     from sys.obj$ o, sys.user$ u, sys.ind$ idx, sys.ind_online$ i    where  bitand(i.flags, 512) = 512 and o.obj#=idx.obj# and           o.owner# = u.user# and idx.obj#=i.obj# select i.obj#, i.flags, u.name, o.name, o.type#     from sys.obj$ o, sys.user$ u, sys.ind$ idx, sys.ind_online$ i    where  bitand(i.flags, 512) = 512 and o.obj#=idx.obj# and           o.owner# = u.user# and idx.obj#=i.obj# select decode(value$, 'PREPARE' , 1 , 'REPLAY' , 2 , 0 ) from props$ where name = 'WORKLOAD_REPLAY_MODE'select o.name, u.name from sys.obj$ o, sys.user$ u where u.user#=o.owner#  and o.obj# = :1SELECT parameter_value  FROM  smb$config  WHERE parameter_name = 'SPACE_BUDGET_PERCENT'update sys.mon_mods$ set inserts = inserts + :ins, updates = updates + :upd, deletes = deletes + :del, flags = (decode(bitand(flags, :flag), :flag, flags, flags + :flag)), drop_segments = drop_segments + :dropseg, timestamp = :time where obj# = :objnupdate sys.mon_mods$ set inserts = inserts + :ins, updates = updates + :upd, deletes = deletes + :del, flags = (decode(bitand(flags, :flag), :flag, flags, flags + :flag)), drop_segments = drop_segments + :dropseg, timestamp = :time where obj# = :objnupdate sys.mon_mods$ set inserts = inserts + :ins, updates = updates + :upd, deletes = deletes + :del, flags = (decode(bitand(flags, :flag), :flag, flags, flags + :flag)), drop_segments = drop_segments + :dropseg, timestamp = :time where obj# = :objnupdate sys.mon_mods$ set inserts = inserts + :ins, updates = updates + :upd, deletes = deletes + :del, flags = (decode(bitand(flags, :flag), :flag, flags, flags + :flag)), drop_segments = drop_segments + :dropseg, timestamp = :time where obj# = :objnupdate sys.mon_mods$ set inserts = inserts + :ins, updates = updates + :upd, deletes = deletes + :del, flags = (decode(bitand(flags, :flag), :flag, flags, flags + :flag)), drop_segments = drop_segments + :dropseg, timestamp = :time where obj# = :objnselect 1 from "SYS"."AQ$_SCHEDULER$_REMDB_JOBQTAB_L"delete from hist_head$ where obj# = :1select num_rows FROM dba_tables where table_name = 'LD'SELECT T.TASK_ID, E.EXECUTION_NAME FROM SYS.DBA_ADVISOR_TASKS T, SYS.DBA_ADVISOR_EXECUTIONS E, WRI$_ADV_PARAMETERS P WHERE T.TASK_ID = P.TASK_ID AND T.TASK_ID = E.TASK_ID AND T.STATUS# <> :B2 AND T.READ_ONLY = 'FALSE' AND P.NAME = 'EXECUTION_DAYS_TO_EXPIRE' AND PRVT_ADVISOR.CHECK_EXPIRATION_COMP(:B1 , E.EXECUTION_LAST_MODIFIED, P.VALUE) = 1select cols,audit$,textlength,intcols,property,flags,rowid from view$ where obj#=:1select cols,audit$,textlength,intcols,property,flags,rowid from view$ where obj#=:1SELECT OBJOID, CLSOID,    DECODE(BITAND(FLAGS, 16384), 0, RUNTIME,           LETIME),    (2*PRI +     DECODE(BITAND(STATUS, 4), 0, 0,            decode(INST, :1, -1, 1))),    JOBTYPE, SCHLIM, WT, INST, RUNNOW, ENQ_SCHLIM, INST_ID  FROM (  select a.obj# OBJOID, a.class_oid CLSOID, a.next_run_date RUNTIME,         a.last_enabled_time LETIME, a.flags FLAGS, a.job_status STATUS,         1 JOBTYPE, a.priority PRI,         decode(a.schedule_limit, NULL,                decode(bitand(a.flags, 4194304), 4194304,                              b.schedule_limit, NULL),               a.schedule_limit) SCHLIM,         a.job_weight WT,         decode(a.running_instance, NULL, 0, a.running_instance) INST,         decode(bitand(a.flags, 16384), 0, 0, 1) RUNNOW,         decode(bitand(a.job_status, 8388608), 0, 0, 1) ENQ_SCHLIM,         a.instance_id INST_ID  from sys.scheduler$_job a, sys.scheduler$_program b, v$database v ,        v$instance i  where a.program_oid = b.obj#(+)    and (a.database_role = vSELECT OBJOID, CLSOID,    DECODE(BITAND(FLAGS, 16384), 0, RUNTIME,           LETIME),    (2*PRI +     DECODE(BITAND(STATUS, 4), 0, 0,            decode(INST, :1, -1, 1))),    JOBTYPE, SCHLIM, WT, INST, RUNNOW, ENQ_SCHLIM, INST_ID  FROM (  select a.obj# OBJOID, a.class_oid CLSOID, a.next_run_date RUNTIME,         a.last_enabled_time LETIME, a.flags FLAGS, a.job_status STATUS,         1 JOBTYPE, a.priority PRI,         decode(a.schedule_limit, NULL,                decode(bitand(a.flags, 4194304), 4194304,                              b.schedule_limit, NULL),               a.schedule_limit) SCHLIM,         a.job_weight WT,         decode(a.running_instance, NULL, 0, a.running_instance) INST,         decode(bitand(a.flags, 16384), 0, 0, 1) RUNNOW,         decode(bitand(a.job_status, 8388608), 0, 0, 1) ENQ_SCHLIM,         a.instance_id INST_ID  from sys.scheduler$_job a, sys.scheduler$_program b, v$database v ,        v$instance i  where a.program_oid = b.obj#(+)    and (a.database_role = vSELECT OBJOID, CLSOID,    DECODE(BITAND(FLAGS, 16384), 0, RUNTIME,           LETIME),    (2*PRI +     DECODE(BITAND(STATUS, 4), 0, 0,            decode(INST, :1, -1, 1))),    JOBTYPE, SCHLIM, WT, INST, RUNNOW, ENQ_SCHLIM, INST_ID  FROM (  select a.obj# OBJOID, a.class_oid CLSOID, a.next_run_date RUNTIME,         a.last_enabled_time LETIME, a.flags FLAGS, a.job_status STATUS,         1 JOBTYPE, a.priority PRI,         decode(a.schedule_limit, NULL,                decode(bitand(a.flags, 4194304), 4194304,                              b.schedule_limit, NULL),               a.schedule_limit) SCHLIM,         a.job_weight WT,         decode(a.running_instance, NULL, 0, a.running_instance) INST,         decode(bitand(a.flags, 16384), 0, 0, 1) RUNNOW,         decode(bitand(a.job_status, 8388608), 0, 0, 1) ENQ_SCHLIM,         a.instance_id INST_ID  from sys.scheduler$_job a, sys.scheduler$_program b, v$database v ,        v$instance i  where a.program_oid = b.obj#(+)    and (a.database_role = vselect kernelcols, initrans, maxtrans, nvl(tab#, 0), ts#, file#, block#,  property from tab$ where obj# = :1select /*+  no_parallel_index(t, "I_IND1")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_IND1") */ count(*) as nrw,count(distinct sys_op_lbid(41,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."IND$" t where "OBJ#" is not nullselect 1 from aq$_schedulesselect box_id from rule_set_rop$ where rs_obj# = :1 and ec_obj# = :2  and rule_id = :3 and rule_or_piece = :4 and rop_id = :5 order by eval_idselect SUM(data_length) from all_tab_columns where table_name = 'JOBS'select value from rule_set_pr$ where rs_obj# = :1 and ec_obj# = :2 and  rule_id = :3 and rule_or_piece = :4 and rop_id = :5 and eval_id = :6  order by pr_idselect /*+ rule */ bucket_cnt, row_cnt, cache_cnt, null_cnt, timestamp#, sample_size, minimum, maximum, distcnt, lowval, hival, density, col#, spare1, spare2, avgcln from hist_head$ where obj#=:1 and intcol#=:2select SUM(column_length) from all_ind_columns where table_name = 'LOCATIONS'select min(minbkt),maxbkt,substrb(dump(min(val),16,0,32),1,120) minval,substrb(dump(max(val),16,0,32),1,120) maxval,sum(rep) sumrep, sum(repsq) sumrepsq, max(rep) maxrep, count(*) bktndv, sum(case when rep=1 then 1 else 0 end) unqrep from (select val,min(bkt) minbkt, max(bkt) maxbkt, count(val) rep, count(val)*count(val) repsq from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"OBJ#" val, ntile(254) over (order by "OBJ#") bkt  from "SYS"."COL_USAGE$" t  where "OBJ#" is not null) group by val) group by maxbkt order by maxbktselect min(minbkt),maxbkt,substrb(dump(min(val),16,0,32),1,120) minval,substrb(dump(max(val),16,0,32),1,120) maxval,sum(rep) sumrep, sum(repsq) sumrepsq, max(rep) maxrep, count(*) bktndv, sum(case when rep=1 then 1 else 0 end) unqrep from (select val,min(bkt) minbkt, max(bkt) maxbkt, count(val) rep, count(val)*count(val) repsq from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"OBJ#" val, ntile(254) over (order by "OBJ#") bkt  from "SYS"."COL_USAGE$" t  where "OBJ#" is not null) group by val) group by maxbkt order by maxbktselect /*+  no_parallel_index(t, "I_WRI$_OPTSTAT_IND_OBJ#_ST")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_WRI$_OPTSTAT_IND_OBJ#_ST") */ count(*) as nrw,count(distinct sys_op_lbid(469,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."WRI$_OPTSTAT_IND_HISTORY" t where "OBJ#" is not null or "SYS_NC00023$" is not nullselect ct.toid, ct.version#  from sys.col$ c, sys.coltype$ ct, sys.obj$ o  where c.intcol# = ct.intcol#  and ct.toid = o.oid$  and o.type# <> 10  and c.obj# = ct.obj#  and c.name = 'USER_DATA'  and c.obj# = :1SELECT VALUE FROM V$PARAMETER WHERE UPPER(NAME) = '_ENABLE_FRONT_END_VIEW_OPTIMIZATION'select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"SYS_NC00055$" val,count(*) cnt  from "SYS"."SCHEDULER$_JOB" t  where "SYS_NC00055$" is not null  group by "SYS_NC00055$") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"SYS_NC00055$" val,count(*) cnt  from "SYS"."SCHEDULER$_JOB" t  where "SYS_NC00055$" is not null  group by "SYS_NC00055$") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"PART#" val,count(*) cnt  from "SYS"."INDPART$" t  where "PART#" is not null  group by "PART#") order by valselect /*+ ordered use_nl(o1 o2) */ o1.name table_name, o2.name lob_name from (select obj#, lobj#, ind# from sys.lob$ l where ts# = (select ts# from sys.ts$ where name = :tsname )) s1, sys.obj$ o1, sys.obj$ o2 where (s1.lobj# = o2.obj# or s1.ind# = o2.obj#) and o1.obj# = s1.obj#select u.name, o.name, o.namespace, o.type#, decode(bitand(i.property,1024),0,0,1), o.obj# from ind$ i,obj$ o,user$ u where i.obj#=:1 and o.obj#=i.bo# and o.owner#=u.user#select u.name, o.name, o.namespace, o.type#, decode(bitand(i.property,1024),0,0,1), o.obj# from ind$ i,obj$ o,user$ u where i.obj#=:1 and o.obj#=i.bo# and o.owner#=u.user#select u.name, o.name, o.namespace, o.type#, decode(bitand(i.property,1024),0,0,1), o.obj# from ind$ i,obj$ o,user$ u where i.obj#=:1 and o.obj#=i.bo# and o.owner#=u.user#delete from sys.scheduler$_job where obj# = :1delete from sys.scheduler$_job where obj# = :1delete from sys.scheduler$_job where obj# = :1SELECT DECODE(:B1 , 0, 'NEXT OBJECT', 1, 'INDEX', 2, 'TABLE', 3, 'CLUSTER', 4, 'VIEW', 5, 'SYNONYM', 6, 'SEQUENCE', 7, 'PROCEDURE', 8, 'FUNCTION', 9, 'PACKAGE', 11, 'PACKAGE BODY', 12, 'TRIGGER', 13, 'TYPE', 14, 'TYPE BODY', 19, 'TABLE PARTITION', 20, 'INDEX PARTITION', 21, 'LOB', 22, 'LIBRARY', 23, 'DIRECTORY', 24, 'QUEUE', 28, 'JAVA SOURCE', 29, 'JAVA CLASS', 30, 'JAVA RESOURCE', 32, 'INDEXTYPE', 33, 'OPERATOR', 34, 'TABLE SUBPARTITION', 35, 'INDEX SUBPARTITION', 40, 'LOB PARTITION', 41, 'LOB SUBPARTITION', 42, 'MATERIALIZED VIEW', 43, 'DIMENSION', 44, 'CONTEXT', 47, 'RESOURCE PLAN', 48, 'CONSUMER GROUP', 51, 'SUBSCRIPTION', 52, 'LOCATION', 55, 'XML SCHEMA', 56, 'JAVA DATA', 57, 'SECURITY PROFILE', 'UNDEFINED') FROM DUALdelete refcon$ where obj#=:1SELECT SU.NAME, SO.NAME, A.STATSTYPE#, A.INTCOL# FROM ASSOCIATION$ A, OBJ$ O, USER$ U, COL$ C, OBJ$ SO, USER$ SU WHERE O.OWNER#=U.USER# AND A.OBJ#=O.OBJ# AND O.OBJ#=C.OBJ# AND C.INTCOL#=A.INTCOL# AND A.STATSTYPE#=SO.OBJ# AND SO.OWNER#=SU.USER# AND O.TYPE#=2 AND U.NAME=:B3 AND O.NAME=:B2 AND C.NAME=:B1 select obj# from oid$ where user#=:1 and oid$=:2select obj# from oid$ where user#=:1 and oid$=:2SELECT ATTRIBUTES,         ATTRIBUTES_OVERRIDE,         TASK_PRIORITY,         PRIORITY_OVERRIDE,         STATUS,         NVL(WINDOW_NAME,''),         NVL(CURR_JOB_NAME,''),         NVL(CURR_WIN_START,TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),         EST_TYPE,         EST_WEIGHT,         RETRY_COUNT,         GOOD_COUNT,         NVL(LG_DATE,TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),         LG_PRIORITY,         NVL(LT_DATE,TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),         LT_PRIORITY,         LT_TERM_CODE,         LT_ERROR,         EST_DURATION,         EST_CPU_TIME,         EST_TEMP,         EST_UNDO_RATE,         EST_IO_RATE,         EST_DOP,         LG_DURATION,         LG_CPU_TIME,         LG_TEMP,         LG_UNDO_RATE,         LG_IO_RATE,         LG_DOP,         LG_CPU_WAIT,         LG_IO_WAIT,         LG_UNDO_WAIT,         LG_TEMP_WAIT,         LG_CONCURRENCY,         LG_CONTENTION,         LT_DURATION,         LT_CPU_TIME,         LT_TEMP,         LT_UNDO_RATE,         LT_IOSELECT ATTRIBUTES,         ATTRIBUTES_OVERRIDE,         TASK_PRIORITY,         PRIORITY_OVERRIDE,         STATUS,         NVL(WINDOW_NAME,''),         NVL(CURR_JOB_NAME,''),         NVL(CURR_WIN_START,TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),         EST_TYPE,         EST_WEIGHT,         RETRY_COUNT,         GOOD_COUNT,         NVL(LG_DATE,TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),         LG_PRIORITY,         NVL(LT_DATE,TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),         LT_PRIORITY,         LT_TERM_CODE,         LT_ERROR,         EST_DURATION,         EST_CPU_TIME,         EST_TEMP,         EST_UNDO_RATE,         EST_IO_RATE,         EST_DOP,         LG_DURATION,         LG_CPU_TIME,         LG_TEMP,         LG_UNDO_RATE,         LG_IO_RATE,         LG_DOP,         LG_CPU_WAIT,         LG_IO_WAIT,         LG_UNDO_WAIT,         LG_TEMP_WAIT,         LG_CONCURRENCY,         LG_CONTENTION,         LT_DURATION,         LT_CPU_TIME,         LT_TEMP,         LT_UNDO_RATE,         LT_IOinsert into wrh$_waitclassmetric_history     (snap_id, dbid, instance_number, wait_class_id,      begin_time, end_time, intsize, group_id,      average_waiter_count, dbtime_in_wait,      time_waited, wait_count,      time_waited_fg, wait_count_fg)  select      :snap_id, :dbid, :instance_number, wait_id,      begtime, endtime, intsize_csec, groupid,      average_waiter_count, dbtime_in_wait,      time_waited, wait_count,      time_waited_fg, wait_count_fg  from x$kewmevmvselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"FILE#" val,count(*) cnt  from "SYS"."TABPART$" t  where "FILE#" is not null  group by "FILE#") order by valselect cc.intcol# from cdef$ c, ccol$ cc where c.obj#=cc.obj# and c.con#=cc.con# and c.type#=7 and c.obj#=:1select comments, flags from sys.scheduler$_window_group where obj# = :1select /*+  no_parallel_index(t, "I_STATS_TARGET2")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"I_STATS_TARGET2") */ count(*) as nrw,count(distinct sys_op_lbid(447,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."STATS_TARGET$" t where "OBJ#" is not nullselect name from service$ where lower(name) = lower(:1) and deletion_date is nullselect max(procedure#) from procedurejava$ where obj#=:1select SUM(data_length) from all_tab_columns where table_name = 'Y'                                    merge /*+ dynamic_sampling(mm 4) dynamic_sampling_est_cdn(mm)                           dynamic_sampling(m 4) dynamic_sampling_est_cdn(m) */                    into sys.mon_mods_all$ mm                                                   using                                                                         (select                                                                          decode(grouping_id(tp.bo#,tsp.pobj#,m.obj#),3,tp.bo#,1,tsp.pobj#,m.obj#)        obj#,                                                                       sum(m.inserts) inserts, sum(m.updates) updates, sum(m.deletes) deletes,       case when grouping_id(tp.bo#,tsp.pobj#,m.obj#) = 0 then                       (/* IF THIS IS A SUBPARTITION AGGREGATE THE TRUNCATE BIT */                    decode(sum(bitand(m.flags,1)),0,0,1)                                          +decode(sum(bitand(m.flags,2)),0,0,2)                                         +decode(sum(bitand(m.f                                    merge /*+ dynamic_sampling(mm 4) dynamic_sampling_est_cdn(mm)                           dynamic_sampling(m 4) dynamic_sampling_est_cdn(m) */                    into sys.mon_mods_all$ mm                                                   using                                                                         (select                                                                          decode(grouping_id(tp.bo#,tsp.pobj#,m.obj#),3,tp.bo#,1,tsp.pobj#,m.obj#)        obj#,                                                                       sum(m.inserts) inserts, sum(m.updates) updates, sum(m.deletes) deletes,       case when grouping_id(tp.bo#,tsp.pobj#,m.obj#) = 0 then                       (/* IF THIS IS A SUBPARTITION AGGREGATE THE TRUNCATE BIT */                    decode(sum(bitand(m.flags,1)),0,0,1)                                          +decode(sum(bitand(m.flags,2)),0,0,2)                                         +decode(sum(bitand(m.f                                    merge /*+ dynamic_sampling(mm 4) dynamic_sampling_est_cdn(mm)                           dynamic_sampling(m 4) dynamic_sampling_est_cdn(m) */                    into sys.mon_mods_all$ mm                                                   using                                                                         (select                                                                          decode(grouping_id(tp.bo#,tsp.pobj#,m.obj#),3,tp.bo#,1,tsp.pobj#,m.obj#)        obj#,                                                                       sum(m.inserts) inserts, sum(m.updates) updates, sum(m.deletes) deletes,       case when grouping_id(tp.bo#,tsp.pobj#,m.obj#) = 0 then                       (/* IF THIS IS A SUBPARTITION AGGREGATE THE TRUNCATE BIT */                    decode(sum(bitand(m.flags,1)),0,0,1)                                          +decode(sum(bitand(m.flags,2)),0,0,2)                                         +decode(sum(bitand(m.fselect num_rows FROM dba_tables where table_name = 'RT2'lock table sys.mon_mods_all$ in exclusive mode nowaitselect name,mandatory,mgmt_method,mast_method,pdl_method,que_method,max_iops,max_mbps,num_plan_directives,description,sub_plan from resource_plan$ where obj#=:1 and status = 'ACTIVE'select service_id, name, name_hash, network_name, creation_date ,creation_date_hash, goal, flags, edition from service$ where lower(network_name) = lower(:1) and deletion_date is nullselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"JOB_DEST_ID" val,count(*) cnt  from "SYS"."SCHEDULER$_JOB" t  where "JOB_DEST_ID" is not null  group by "JOB_DEST_ID") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"JOB_DEST_ID" val,count(*) cnt  from "SYS"."SCHEDULER$_JOB" t  where "JOB_DEST_ID" is not null  group by "JOB_DEST_ID") order by valselect 1 from sys.cdc_change_tables$  where source_schema_name = :1  and source_table_name = :2  and bitand(mvl_flag, 128)=128select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */max("DATABASE_ROLE") val,count(*) cnt  from "SYS"."SCHEDULER$_JOB" t  where "DATABASE_ROLE" is not null  group by nlssort("DATABASE_ROLE", 'NLS_SORT = binary')) order by nlssort(val,'NLS_SORT = binary')select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */max("DATABASE_ROLE") val,count(*) cnt  from "SYS"."SCHEDULER$_JOB" t  where "DATABASE_ROLE" is not null  group by nlssort("DATABASE_ROLE", 'NLS_SORT = binary')) order by nlssort(val,'NLS_SORT = binary')insert into access$(d_obj#,order#,columns,types) values (:1,:2,:3,:4)select  tab.rowid, tab.msgid, tab.corrid, tab.priority, tab.delay,   tab.expiration , tab.exception_qschema,   tab.exception_queue, tab.chain_no, tab.local_order_no, tab.enq_time,   tab.time_manager_info, tab.state, tab.enq_tid, tab.step_no,   tab.sender_name, tab.sender_address, tab.sender_protocol,   tab.dequeue_msgid, tab.user_prop, tab.user_data  from "SYS"."ALERT_QT" tab  where msgid = :1select count(*) from fixed_obj$select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"TARGET_TYPE" val,count(*) cnt  from "SYS"."KET$_CLIENT_TASKS" t  where "TARGET_TYPE" is not null  group by "TARGET_TYPE") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"TARGET_TYPE" val,count(*) cnt  from "SYS"."KET$_CLIENT_TASKS" t  where "TARGET_TYPE" is not null  group by "TARGET_TYPE") order by valSELECT NVL(MAX(AUTO_TASKID), 0), MAX(START_TIME) FROM SYS.WRI$_SEGADV_CNTRLTABSELECT NVL(MAX(AUTO_TASKID), 0), MAX(START_TIME) FROM SYS.WRI$_SEGADV_CNTRLTABselect ROWID from SYS_FBA_FA where ROWNUM = 1delete from WRH$_SQLSTAT_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) /* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("OBJ#")),to_char(substrb(dump(min("OBJ#"),16,0,32),1,120)),to_char(substrb(dump(max("OBJ#"),16,0,32),1,120)),to_char(count("SAVTIME")),to_char(substrb(dump(min("SAVTIME"),16,0,32),1,120)),to_char(substrb(dump(max("SAVTIME"),16,0,32),1,120)),to_char(count("FLAGS")),to_char(substrb(dump(min("FLAGS"),16,0,32),1,120)),to_char(substrb(dump(max("FLAGS"),16,0,32),1,120)),to_char(count("ROWCNT")),to_char(substrb(dump(min("ROWCNT"),16,0,32),1,120)),to_char(substrb(dump(max("ROWCNT"),16,0,32),1,120)),to_char(count("BLEVEL")),to_char(substrb(dump(min("BLEVEL"),16,0,32),1,120)),to_char(substrb(dump(max("BLEVEL"),16,0,32),1,120)),to_char(count("LEAFCNT")),to_char(substrb(dump(min("LEAFCNT"),16,0,32),1,120)),to_char(substrb(dump(max("LEAFCNT"),16,0,32),1,120)),to_char(count("DISTKEY")),to_char(substrb(dumpdelete from con$ where owner#=:1 and name=:2select  DBID, NAME, CREATED, RESETLOGS_CHANGE#, RESETLOGS_TIME, PRIOR_RESETLOGS_CHANGE#, PRIOR_RESETLOGS_TIME,LOG_MODE, CHECKPOINT_CHANGE#, ARCHIVE_CHANGE#, CONTROLFILE_TYPE, CONTROLFILE_CREATED, CONTROLFILE_SEQUENCE#, CONTROLFILE_CHANGE#, CONTROLFILE_TIME, OPEN_RESETLOGS, VERSION_TIME, OPEN_MODE, PROTECTION_MODE, PROTECTION_LEVEL, REMOTE_ARCHIVE, ACTIVATION#, SWITCHOVER#, DATABASE_ROLE, ARCHIVELOG_CHANGE#, ARCHIVELOG_COMPRESSION, SWITCHOVER_STATUS, DATAGUARD_BROKER, GUARD_STATUS, SUPPLEMENTAL_LOG_DATA_MIN, SUPPLEMENTAL_LOG_DATA_PK, SUPPLEMENTAL_LOG_DATA_UI, FORCE_LOGGING, PLATFORM_ID, PLATFORM_NAME, RECOVERY_TARGET_INCARNATION#, LAST_OPEN_INCARNATION#, CURRENT_SCN, FLASHBACK_ON,SUPPLEMENTAL_LOG_DATA_FK, SUPPLEMENTAL_LOG_DATA_ALL, DB_UNIQUE_NAME, STANDBY_BECAME_PRIMARY_SCN, FS_FAILOVER_STATUS, FS_FAILOVER_CURRENT_TARGET, FS_FAILOVER_THRESHOLD, FS_FAILOVER_OBSERVER_PRESENT, FS_FAILOVER_OBSERVER_HOST, CONTROLFILE_CONVERTED, PRIMARY_DB_UNIQUE_NAME, SUPPLEMENTAL_LOG_DATA_PL, MIN_REQUIRED_CSELECT /*+ parallel */ EXTRACTVALUE(VALUE(T), '/select_list_item/pos') + 1 POS, EXTRACTVALUE(VALUE(T), '/select_list_item/value') RES, EXTRACTVALUE(VALUE(T), '/select_list_item/nonnulls') NONNULLS, EXTRACTVALUE(VALUE(T), '/select_list_item/ndv') NDV, EXTRACTVALUE(VALUE(T), '/select_list_item/split') SPLIT, EXTRACTVALUE(VALUE(T), '/select_list_item/rsize') RSIZE, EXTRACTVALUE(VALUE(T), '/select_list_item/rowcnt') ROWCNT, EXTRACT(VALUE(T), '/select_list_item/hash_val').GETCLOBVAL() HASHVAL FROM TABLE(XMLSEQUENCE(EXTRACT(:B1 , '/process_result/select_list_item'))) Tselect /*+  no_parallel_index(t, "WRM$_WR_CONTROL_PK")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"WRM$_WR_CONTROL_PK") */ count(*) as nrw,count(distinct sys_op_lbid(6636,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."WRM$_WR_CONTROL" t where "DBID" is not nullselect /*+  no_parallel_index(t, "WRM$_WR_CONTROL_PK")  dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  no_expand index(t,"WRM$_WR_CONTROL_PK") */ count(*) as nrw,count(distinct sys_op_lbid(6636,'L',t.rowid)) as nlb,null as ndk,sys_op_countchg(substrb(t.rowid,1,15),1) as clf from "SYS"."WRM$_WR_CONTROL" t where "DBID" is not nullSELECT INSTANCE_NAME, HOST_NAME, STARTUP_TIME FROM V$INSTANCE/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("OBJ#")),to_char(substrb(dump(min("OBJ#"),16,0,32),1,120)),to_char(substrb(dump(max("OBJ#"),16,0,32),1,120)),to_char(count("DATAOBJ#")),to_char(substrb(dump(min("DATAOBJ#"),16,0,32),1,120)),to_char(substrb(dump(max("DATAOBJ#"),16,0,32),1,120)),to_char(count("BO#")),to_char(substrb(dump(min("BO#"),16,0,32),1,120)),to_char(substrb(dump(max("BO#"),16,0,32),1,120)),to_char(count("PART#")),to_char(substrb(dump(min("PART#"),16,0,32),1,120)),to_char(substrb(dump(max("PART#"),16,0,32),1,120)),to_char(count("HIBOUNDLEN")),to_char(substrb(dump(min("HIBOUNDLEN"),16,0,32),1,120)),to_char(substrb(dump(max("HIBOUNDLEN"),16,0,32),1,120)),to_char(count("TS#")),to_char(substrb(dump(min("TS#"),16,0,32),1,120)),to_char(substrb(dump(max("TS#"),16,0,32),1,120)),to_char(count("FILE#")),to_char(substrb(dump(min("FIupdate sys.scheduler$_job set  last_end_date = :1, retry_count = :2, run_count = :3, running_instance = :4, running_slave = :5, job_status = :6 where  obj# = :7delete ecol$ where tabobj# = :1select CONF#, NAME, VALUE from GV$RMAN_CONFIGURATION where inst_id = USERENV('Instance')delete from WRH$_INTERCONNECT_PINGS_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id))       begin          dbms_rcvman.setDatabase(upper(:dbname:dbname_i),                                  :rlgscn,                                  :rlgtime,                                  :fhdbi:fhdbi_i);       end;select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"FLAGS" val,count(*) cnt  from "SYS"."SCHEDULER$_EVENT_LOG" t  where "FLAGS" is not null  group by "FLAGS") order by valselect SUM(data_length) from all_tab_columns where table_name = 'POO'select externtype, externname from type$ where tvoid=:1select version, status from registry$ where cid = 'CATPROC'select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"BO#" val,count(*) cnt  from "SYS"."INDPART$" t  where "BO#" is not null  group by "BO#") order by valselect value, flags, modified_inst, additional_info,         attr_tstamp, attr_intv from  sys.scheduler$_global_attribute where obj# = :1select SUM(data_length) from all_tab_columns where table_name = 'JOB_HISTORY'delete /*+ dynamic_sampling(4) */ from sys.wri$_optstat_tab_history          where savtime < :1 and rownum <= NVL(:2, rownum)lock table sys.mon_mods$ in exclusive mode nowaitlock table sys.mon_mods$ in exclusive mode nowaitlock table sys.mon_mods$ in exclusive mode nowaitlock table sys.mon_mods$ in exclusive mode nowaitlock table sys.mon_mods$ in exclusive mode nowaitlock table sys.mon_mods$ in exclusive mode nowaitdelete from WRH$_RSRC_PLAN tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from WRH$_SYSMETRIC_SUMMARY tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select ROWID from SYS_FBA_BARRIERSCN where ROWNUM = 1update sys.scheduler$_window set  next_start_date = :1, flags = :2, last_start_date = :3, manual_open_time = :4, manual_duration = :5 where  obj# = :6/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("OPERATION")),to_char(substrb(dump(min("OPERATION"),16,0,32),1,120)),to_char(substrb(dump(max("OPERATION"),16,0,32),1,120)),to_char(count("TARGET")),to_char(substrb(dump(min("TARGET"),16,0,32),1,120)),to_char(substrb(dump(max("TARGET"),16,0,32),1,120)),to_char(count("START_TIME")),to_char(substrb(dump(min("START_TIME"),16,0,32),1,120)),to_char(substrb(dump(max("START_TIME"),16,0,32),1,120)),to_char(count("END_TIME")),to_char(substrb(dump(min("END_TIME"),16,0,32),1,120)),to_char(substrb(dump(max("END_TIME"),16,0,32),1,120)),to_char(count("FLAGS")),to_char(substrb(dump(min("FLAGS"),16,0,32),1,120)),to_char(substrb(dump(max("FLAGS"),16,0,32),1,120)),to_char(count("SPARE1")),to_char(substrb(dump(min("SPARE1"),16,0,32),1,120)),to_char(substrb(dump(max("SPARE1"),16,0,32),1,120)),to_char(count("SPAR/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("SEQUENCE_ID")),to_char(substrb(dump(min("SEQUENCE_ID"),16,0,32),1,120)),to_char(substrb(dump(max("SEQUENCE_ID"),16,0,32),1,120)),to_char(count("REASON_ID")),to_char(substrb(dump(min("REASON_ID"),16,0,32),1,120)),to_char(substrb(dump(max("REASON_ID"),16,0,32),1,120)),to_char(count("OWNER")),to_char(substrb(dump(min("OWNER"),16,0,32),1,120)),to_char(substrb(dump(max("OWNER"),16,0,32),1,120)),to_char(count("OBJECT_NAME")),to_char(substrb(dump(min("OBJECT_NAME"),16,0,32),1,120)),to_char(substrb(dump(max("OBJECT_NAME"),16,0,32),1,120)),to_char(count("SUBOBJECT_NAME")),to_char(substrb(dump(min("SUBOBJECT_NAME"),16,0,32),1,120)),to_char(substrb(dump(max("SUBOBJECT_NAME"),16,0,32),1,120)),to_char(count("REASON_ARGUMENT_1")),to_char(substrb(dump(min("REASON_ARGUMENT_1"),16,0,32),1,120)),to_char(substdelete from WRH$_SQL_SUMMARY tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from WRH$_PERSISTENT_SUBSCRIBERS tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select 1 from "SYS"."AQ$_SYS$SERVICE_METRICS_TAB_L"SELECT /* OPT_DYN_SAMP */ /*+ ALL_ROWS IGNORE_WHERE_CLAUSE NO_PARALLEL(SAMPLESUB) opt_param('parallel_execution_enabled', 'false') NO_PARALLEL_INDEX(SAMPLESUB) NO_SQL_TUNE */ NVL(SUM(C1),0), NVL(SUM(C2),0) FROM (SELECT /*+ IGNORE_WHERE_CLAUSE NO_PARALLEL("T") FULL("T") NO_PARALLEL_INDEX("T") */ 1 AS C1, CASE WHEN BITAND("T"."TRIGFLAG",67108864)<>67108864 AND BITAND("T"."FLAGS",16)=16 THEN 1 ELSE 0 END AS C2 FROM "SYS"."TAB$" SAMPLE BLOCK (3.039216 , 1) SEED (1) "T") SAMPLESUBSELECT T.TASK_ID FROM SYS.DBA_ADVISOR_TASKS T, WRI$_ADV_PARAMETERS P WHERE T.TASK_ID = P.TASK_ID AND T.STATUS# <> :B2 AND T.READ_ONLY = 'FALSE' AND P.NAME = 'DAYS_TO_EXPIRE' AND PRVT_ADVISOR.CHECK_EXPIRATION_COMP(:B1 , T.LAST_MODIFIED, P.VALUE) = 1delete from sys.col_usage$ c where not exists   (select /*+ unnest */ 1 from sys.obj$ o where o.obj# = c.obj# )SELECT count(1) from rule$ where obj# = :1 and r_action is NULL and  uactx_client is NULLselect flags, schema, name from system.aq$_queue_tables where objno = :1/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("LOG_ID")),to_char(substrb(dump(min("LOG_ID"),16,0,32),1,120)),to_char(substrb(dump(max("LOG_ID"),16,0,32),1,120)),to_char(count("LOG_DATE")),to_char(substrb(dump(min("LOG_DATE"),16,0,32),1,120)),to_char(substrb(dump(max("LOG_DATE"),16,0,32),1,120)),to_char(count("TYPE#")),to_char(substrb(dump(min("TYPE#"),16,0,32),1,120)),to_char(substrb(dump(max("TYPE#"),16,0,32),1,120)),to_char(count("NAME")),to_char(substrb(dump(min("NAME"),16,0,32),1,120)),to_char(substrb(dump(max("NAME"),16,0,32),1,120)),to_char(count("OWNER")),to_char(substrb(dump(min("OWNER"),16,0,32),1,120)),to_char(substrb(dump(max("OWNER"),16,0,32),1,120)),to_char(count("CLASS_ID")),to_char(substrb(dump(min("CLASS_ID"),16,0,32),1,120)),to_char(substrb(dump(max("CLASS_ID"),16,0,32),1,120)),to_char(count("OPERATION")),to_char(substrbSELECT /*+ ALL_ROWS */ COUNT(*) FROM DBA_POLICIES V WHERE V.OBJECT_OWNER = :B3 AND V.OBJECT_NAME = :B2 AND (V.POLICY_NAME LIKE '%xdbrls%' OR V.POLICY_NAME LIKE '%$xd_%') AND V.FUNCTION = :B1 delete from WRH$_DATAFILE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select  RECID , STAMP ,SET_STAMP , SET_COUNT , PIECE# , COPY#, DEVICE_TYPE , HANDLE , COMMENTS , MEDIA , MEDIA_POOL , CONCUR , TAG , STATUS , START_TIME , COMPLETION_TIME , ELAPSED_SECONDS, DELETED, BYTES, IS_RECOVERY_DEST_FILE, RMAN_STATUS_RECID, RMAN_STATUS_STAMP, COMPRESSED, BACKED_BY_VSS, ENCRYPTED, BACKED_BY_OSB from GV$BACKUP_PIECE where inst_id = USERENV('Instance')delete from compression$ where obj#=:1select intcol#,type,flags,lobcol,objcol,extracol,schemaoid,  elemnum from opqtype$ where obj# = :1 order by intcol# ascselect intcol#,type,flags,lobcol,objcol,extracol,schemaoid,  elemnum from opqtype$ where obj# = :1 order by intcol# ascSELECT REGEXP_SUBSTR(ADDITIONAL_INFO,'CHAIN_LOG_ID="[0-9]+"') FROM SYS.SCHEDULER$_EVENT_LOG E, SYS.SCHEDULER$_CLASS C WHERE E.TYPE# = 66 AND E.CLASS_ID = C.OBJ#(+) AND OPERATION IN ('CHAIN_RUN','CHAIN_RETRY_RUN') AND E.LOG_DATE < :B2 - NUMTODSINTERVAL(NVL(C.LOG_HISTORY, :B1 ), 'DAY') AND INSTR(E.NAME,'"')=0select SUM(data_length) from all_tab_columns where table_name = 'LDA'select nvl(sum(d.blocks),0) from x$kewx_segments d, (select distinct o1.segment_name name from x$kewx_segments o1 where o1.segment_name like  '%WRI$|_OPTSTAT|_%' ESCAPE '|' union all select distinct o2.lob_name name from x$kewx_lobs o2 where o2.table_name like  '%WRI$|_OPTSTAT|_%' ESCAPE '|' ) s where (d.owner = 'SYS') and (d.segment_name = s.name)select 1 from "SYS"."AQ$_SCHEDULER$_EVENT_QTAB_L"/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("SNAP_ID")),to_char(substrb(dump(min("SNAP_ID"),16,0,32),1,120)),to_char(substrb(dump(max("SNAP_ID"),16,0,32),1,120)),to_char(count("DBID")),to_char(substrb(dump(min("DBID"),16,0,32),1,120)),to_char(substrb(dump(max("DBID"),16,0,32),1,120)),to_char(count("INSTANCE_NUMBER")),to_char(substrb(dump(min("INSTANCE_NUMBER"),16,0,32),1,120)),to_char(substrb(dump(max("INSTANCE_NUMBER"),16,0,32),1,120)),to_char(count("BEGIN_TIME")),to_char(substrb(dump(min("BEGIN_TIME"),16,0,32),1,120)),to_char(substrb(dump(max("BEGIN_TIME"),16,0,32),1,120)),to_char(count("END_TIME")),to_char(substrb(dump(min("END_TIME"),16,0,32),1,120)),to_char(substrb(dump(max("END_TIME"),16,0,32),1,120)),to_char(count("INTSIZE")),to_char(substrb(dump(min("INTSIZE"),16,0,32),1,120)),to_char(substrb(dump(max("INTSIZE"),16,0,32),1,120)/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("LOG_ID")),to_char(substrb(dump(min("LOG_ID"),16,0,32),1,120)),to_char(substrb(dump(max("LOG_ID"),16,0,32),1,120)),to_char(count("LOG_DATE")),to_char(substrb(dump(min("LOG_DATE"),16,0,32),1,120)),to_char(substrb(dump(max("LOG_DATE"),16,0,32),1,120)),to_char(count("REQ_START_DATE")),to_char(substrb(dump(min("REQ_START_DATE"),16,0,32),1,120)),to_char(substrb(dump(max("REQ_START_DATE"),16,0,32),1,120)),to_char(count("START_DATE")),to_char(substrb(dump(min("START_DATE"),16,0,32),1,120)),to_char(substrb(dump(max("START_DATE"),16,0,32),1,120)),to_char(count("RUN_DURATION")),to_char(substrb(dump(min("RUN_DURATION"),16,0,32),1,120)),to_char(substrb(dump(max("RUN_DURATION"),16,0,32),1,120)),to_char(count("INSTANCE_ID")),to_char(substrb(dump(min("INSTANCE_ID"),16,0,32),1,120)),to_char(substrb(dump(max(select node,owner,name from syn$ where obj#=:1select f.file#, f.block#, f.ts#, f.length from fet$ f, ts$ t where t.ts#=f.ts# and t.dflextpct!=0 and t.bitmapped=0delete /*+ UNNEST(@SEL$2)             UNNEST(@SEL$1)             LEADING(@SEL$690D83E6 TAB@DEL$1 REFC@SEL$1 B@SEL$2)             USE_NL(@SEL$690D83E6 REFC@SEL$1)             INDEX(@SEL$690D83E6 REFC@SEL$1                     (WRI$_SQLTEXT_REFCOUNT.DBID                      WRI$_SQLTEXT_REFCOUNT.SQL_ID))        */   from   wrh$_sqltext tab  where  tab.dbid = :dbid         and :beg_snap <= tab.snap_id         and tab.snap_id <= :end_snap         and not exists (select 1                         from   wri$_sqltext_refcount refc                         where  refc.dbid = tab.dbid and                                refc.sql_id = tab.sql_id and                                refc.ref_count > 0)         and not exists (select 1                         from   WRM$_BASELINE b                         where  b.dbid = :dbid2 and                                tab.snap_id >= b.start_snap_id and                                tab.snap_id <= b.end_snap_id)select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"SPACE_USED_DELTA" val,count(*) cnt  from "SYS"."WRH$_SEG_STAT" t  where "SPACE_USED_DELTA" is not null  group by "SPACE_USED_DELTA") order by valselect java_pool_size_for_estimate s,           java_pool_size_factor * 100 f,           estd_lc_load_time l, 0            from v$java_pool_adviceselect num_rows FROM dba_tables where table_name = 'STUDENT'delete from histgrm$ where obj#=:1 and intcol#=:2 and row#=:3delete from histgrm$ where obj#=:1 and intcol#=:2 and row#=:3/* SQL Analyze(1) */ select /*+  full(t)    no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */to_char(count("OBJ#")),to_char(substrb(dump(min("OBJ#"),16,0,32),1,120)),to_char(substrb(dump(max("OBJ#"),16,0,32),1,120)),to_char(count("VALUE")),to_char(substrb(dump(min("VALUE"),16,0,32),1,120)),to_char(substrb(dump(max("VALUE"),16,0,32),1,120)),to_char(count("FLAGS")),to_char(substrb(dump(min("FLAGS"),16,0,32),1,120)),to_char(substrb(dump(max("FLAGS"),16,0,32),1,120)),to_char(count("MODIFIED_INST")),to_char(substrb(dump(min("MODIFIED_INST"),16,0,32),1,120)),to_char(substrb(dump(max("MODIFIED_INST"),16,0,32),1,120)),to_char(count("ADDITIONAL_INFO")),to_char(substrb(dump(min("ADDITIONAL_INFO"),16,0,32),1,120)),to_char(substrb(dump(max("ADDITIONAL_INFO"),16,0,32),1,120)),to_char(count("ATTR_TSTAMP")),to_char(substrb(dump(min("ATTR_TSTAMP"),16,0,32),1,120)),to_char(substrb(dump(max("ATTR_TSTAMP"),16,0,32),select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"CHAIN_ROW_EXCESS_DELTA" val,count(*) cnt  from "SYS"."WRH$_SEG_STAT" t  where "CHAIN_ROW_EXCESS_DELTA" is not null  group by "CHAIN_ROW_EXCESS_DELTA") order by valdelete from WRH$_SESS_TIME_STATS tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) call WWV_FLOW_WORKSHEET_API.DO_NOTIFY (  )delete from WRM$_BASELINE  where dbid = :dbid    and expiration is not NULL    and creation_time + expiration < :bind1 DELETE FROM xs$sessionsselect o.owner#, o.name,            o.namespace,    o.obj#,   d.d_timestamp, nvl(d.property,0), o.type#, o.subname, d.d_attrs  from dependency$ d, obj$ o   where d.p_obj#=:1  and   (d.p_timestamp=nvl(:2,d.p_timestamp) or d.property=2)  and   o.owner#=nvl(:3,o.owner#)  and   d.d_obj#=o.obj#  order by o.obj#select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"FLAGS" val,count(*) cnt  from "SYS"."SCHEDULER$_GLOBAL_ATTRIBUTE" t  where "FLAGS" is not null  group by "FLAGS") order by valselect substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_parallel_index(t) dbms_stats cursor_sharing_exact use_weak_name_resl dynamic_sampling(0) no_monitoring no_substrb_pad  */"CLASS_ID" val,count(*) cnt  from "SYS"."SCHEDULER$_EVENT_LOG" t  where "CLASS_ID" is not null  group by "CLASS_ID") order by valselect obj# from fixed_obj$SELECT COUNT(*) FROM (SELECT GROUP_ID, METRIC_ID, GROUP_NAME, METRIC_NAME, METRIC_UNIT FROM V$METRICNAME MINUS SELECT GROUP_ID, METRIC_ID, GROUP_NAME, METRIC_NAME, METRIC_UNIT FROM WRH$_METRIC_NAME WHERE dbid = :dbid)select substrb(dump(val,16,0,32),1,120) ep, cnt from (select /*+ no_expand_table(t) index_rs(t)   no_parallel(t) no_paral