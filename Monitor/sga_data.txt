select count(*) from props$  where name = 'Flashback Timestamp TimeZone' and value$ = 'GMT'delete from WRH$_ENQUEUE_STAT tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) insert into wrh$_filemetric_history     (snap_id, dbid, instance_number,      fileid, creationtime,      begin_time, end_time, intsize, group_id,      avgreadtime, avgwritetime, physicalread,      physicalwrite, phyblkread, phyblkwrite)  select      :snap_id, :dbid, :instance_number,      fileid, creationtime,      begtime, endtime, intsize_csec, groupid,      avrdtime, avwrtime, phyread,      phywrite, phybkrd, phybkwr  from x$kewmflmvselect count(FA#) from SYS_FBA_TRACKEDTABLES where OBJ# = 6499 and bitand(FLAGS, 128)=0select streams_pool_size_for_estimate s,           streams_pool_size_factor * 100 f,           estd_spill_time + estd_unspill_time, 0  from v$streams_pool_advicedelete from dependency$ where d_obj#=:1delete from WRH$_TABLESPACE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) update WRI$_SCH_VOTES   set vector = :vec  where schedule_id  = :id    and vector_index = :vidxupdate sys.optstat_hist_control$ set sval2 = :1 where  sname = 'SKIP_TIME'UPDATE KET$_AUTOTASK_STATUS     SET ABA_STATE = 2,         RECONCILE_TIME = :1,         ABA_STATE_TIME = :2   WHERE DUMMY_KEY = 99999select col#,intcol#,reftyp,stabid,expctoid from refcon$ where obj#=:1 order by intcol# ascselect col#,intcol#,reftyp,stabid,expctoid from refcon$ where obj#=:1 order by intcol# ascSELECT inst_id, occ_name_kewxocf, occ_desc_kewxocf,                 sch_name_kewxocf, move_proc_kewxocf,                 move_desc_kewxocf, space_usage_kewxocf          FROM   x$kewxocfselect 1 from WRH$_SERVICE_WAIT_CLASS where dbid     = :dbid   and :bind1  <= snap_id   and snap_id  < :bind2   and rownum  <= 1select bytes from v$sgainfo where name = 'Maximum SGA Size'select location_name, user#, user_context, context_size, presentation,  version, status, any_context, context_type, qosflags, payload_callback,  timeout, reg_id, reg_time, ntfn_grouping_class, ntfn_grouping_value,  ntfn_grouping_type, ntfn_grouping_start_time, ntfn_grouping_repeat_count,  state, session_key  from reg$  where subscription_name = :1 and  namespace = :2  order by location_name, user#, presentation, versiondelete from sys.wri$_optstat_histgrm_history                                 where nvl(:1, savtime) <= savtime and savtime < nvl(:2, savtime+1)             and obj# = nvl(:3, obj#) and intcol# = nvl(:4, intcol#)                      and rownum <= NVL(:5, rownum)select nvl(sum(d.blocks),0) from x$kewx_segments d, (select distinct o1.segment_name name from x$kewx_segments o1 where (o1.segment_name like  '%WRI$|_%' ESCAPE '|'    and o1.segment_name not like  '%WRI$|_ADV|_%' ESCAPE '|'    and o1.segment_name not like  '%WRI$|_OPTSTAT|_%' ESCAPE '|' )    or o1.segment_name =  'ALERT_QT' union all select distinct o2.lob_name name from x$kewx_lobs o2 where (o2.table_name like  '%WRI$|_%' ESCAPE '|'    and o2.table_name not like  '%WRI$|_ADV|_%' ESCAPE '|'    and o2.table_name not like  '%WRI$|_OPTSTAT|_%' ESCAPE '|' )    or o2.table_name =  'ALERT_QT' ) s where (d.owner = 'SYS') and (d.segment_name = s.name)delete from WRH$_COMP_IOSTAT tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) update sys.scheduler$_window set  next_start_date = :1, flags = :2, last_start_date = :3 where  obj# = :4insert into   WRI$_DBU_CPU_USAGE(dbid, version, timestamp,                      cpu_count, cpu_core_count, cpu_socket_count) select :dbid, :version, :bind1,        gv.gv_cpu_count, gv.gv_cpu_core_count, gv.gv_cpu_socket_count  from   (select sum(cpu_count_current)        as gv_cpu_count,           sum(cpu_core_count_current)   as gv_cpu_core_count,           sum(cpu_socket_count_current) as gv_cpu_socket_count      from GV$LICENSE) gv  where (nvl(gv_cpu_count,        -1),         nvl(gv_cpu_core_count,   -1),         nvl(gv_cpu_socket_count, -1))   not in (select nvl(cpu_count,        -1) as cu_cpu_count,                  nvl(cpu_core_count,   -1) as cu_cpu_core_count,                  nvl(cpu_socket_count, -1) as cu_cpu_socket_count           from (select cpu_count, cpu_core_count, cpu_socket_count                   from WRI$_DBU_CPU_USAGE                  order by timestamp desc)            where rownum <= 1)select obj# from objerror$select log, sysdate, youngest, youngest+1/86400,  oldest, oldest_pk, oldest_oid, oldest_new, oldest_seq,  oscn, oscn_pk, oscn_oid, oscn_new, oscn_seq, flag  from sys.mlog$  where master = :2 and mowner = :1 for updateselect unique name, name from resource_consumer_group$ where status = 'ACTIVE'select name, bytes, resizeable from gv$sgainfo  where inst_id = USERENV('Instance')LOCK TABLE "WRH$_SQLSTAT" PARTITION ("WRH$_SQLSTA_2827760704_27")  IN EXCLUSIVE MODE  NOWAIT select program_oid, schedule_expr, schedule_id, queue_owner, queue_name,         queue_agent, event_rule, mxdur_msgid, last_enabled_time, class_oid,         next_run_date, last_start_date, last_end_date, retry_count,         run_count, failure_count, running_instance, running_slave, flags,         job_status, creator, client_id, guid, char_env, start_date, end_date,         instance_id, fw_name, fw_oid, destination, credential_name,         credential_owner, credential_oid, dest_oid, job_dest_id, run_invoker,         program_action, schedule_limit,         priority, job_weight, number_of_args, max_runs, max_failures,         max_run_duration, comments, user_callback, user_callback_ctx,         nls_env, source, env, database_role, owner_udn, dist_flags  from sys.scheduler$_job  where obj# = :1select timestamp, flags from fixed_obj$ where obj#=:1SELECT COUNT(*) FROM SYSTEM.AQ$_QUEUES B WHERE B.TABLE_OBJNO = :B2 AND BITAND(B.PROPERTIES, :B1 ) = :B1 select blocks,NVL(ts#,-1),status$,NVL(relfile#,0),maxextend,inc, crscnwrp,crscnbas,NVL(spare1,0) from file$ where file#=:1SELECT NUMTODSINTERVAL(:B1 * 7, 'DAY') FROM DUALinsert into sys.mon_mods$ (obj#, inserts, updates, deletes, timestamp, flags, drop_segments) values (:1, :2, :3, :4, :5, :6, :7)select next_run_date, obj#, run_job, sch_job from (select decode(bitand(a.flags, 16384), 0, a.next_run_date,                a.last_enabled_time) next_run_date,       a.obj# obj#, decode(bitand(a.flags, 16384), 0, 0, 1) run_job, a.sch_job  sch_job  from  (select p.obj# obj#, p.flags flags, p.next_run_date next_run_date,      p.job_status job_status, p.class_oid class_oid,      p.last_enabled_time last_enabled_time, p.instance_id instance_id,      1 sch_job   from sys.scheduler$_job p   where bitand(p.job_status, 3) = 1    and ((bitand(p.flags, 134217728 + 268435456) = 0) or         (bitand(p.job_status, 1024) <> 0))    and bitand(p.flags, 4096) = 0    and p.instance_id is NULL    and (p.class_oid is null      or (p.class_oid is not null      and p.class_oid in (select b.obj# from sys.scheduler$_class b                          where b.affinity is null)))   UNION ALL   select q.obj#, q.flags, q.next_run_date, q.job_status, q.class_oid,      q.last_enabled_time, q.instance_id, 1   from syselect aft.owner_instance, t.objno, t.flags  from system.aq$_queue_tables t,  aq$_queue_table_affinities aft  where t.objno = aft.table_objno and t.schema = :1 and t.name = :2 insert into seg$ (file#,block#,type#,ts#,blocks,extents,minexts,maxexts,extsize,extpct,user#,iniexts,lists,groups,cachehint,hwmincr, spare1, scanhint, bitmapranges) values (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15,:16,DECODE(:17,0,NULL,:17),:18,:19)SELECT S.SCHEMA, S.QUEUE_NAME, S.NAME, S.ADDRESS, S.PROTOCOL, S.SUBSCRIBER_ID FROM SYS.AQ$_SUBSCRIBER_TABLE S WHERE BITAND(S.SUBSCRIBER_TYPE, :B3 ) = :B3 AND S.INSTANCE_ID = :B2 AND S.SCN_AT_ADD < :B1 BEGIN DBMS_APPLICATION_INFO.SET_MODULE(:1,NULL); END;select name,mandatory,mgmt_method,category,description,internal_use from resource_consumer_group$ where obj#=:1 and status = 'ACTIVE'select unique version from idl_ub1$ where obj# = :1 and version > 0 and version < 184549376select num_rows FROM dba_tables where table_name = 'JOBS'insert into sys.wri$_optstat_ind_history(obj#,rowcnt,leafcnt,distkey, lblkkey, dblkkey,clufac,blevel,analyzetime,samplesize,guessq,cachedblk, cachehit,logicalread,savtime,flags) values  (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15,:16)select count(FA#) from SYS_FBA_TRACKEDTABLES where OBJ# = 6428 and bitand(FLAGS, 128)=0select nvl(sum(d.blocks),0) from x$kewx_segments d, (select distinct o1.segment_name name from x$kewx_segments o1 where o1.segment_name like  '%WRI$|_ADV|_%' ESCAPE '|' union all select distinct o2.lob_name name from x$kewx_lobs o2 where o2.table_name like  '%WRI$|_ADV|_%' ESCAPE '|' ) s where (d.owner = 'SYS') and (d.segment_name = s.name)select inst_id,kglnaobj,kglfnobj,kglobt03, kglobhs0+kglobhs1+kglobhs2+kglobhs3+kglobhs4+kglobhs5+kglobhs6+kglobt16, kglobt08+kglobt11, kglobt10, kglobt01, decode(kglobhs6,0,0,1), decode(kglhdlmd,0,0,1), kglhdlkc, kglobt04, kglobt05, kglobt48, kglobt35, kglobpc6, kglhdldc, substr(to_char(kglnatim,'YYYY-MM-DD/HH24:MI:SS'),1,19), kglhdivc, kglobt12, kglobt13, kglobwdw, kglobt14, kglobwap, kglobwcc, kglobwcl, kglobwui, kglobt42, kglobt43, kglobt15, kglobt02, decode(kglobt32,        0, 'NONE',        1, 'ALL_ROWS',        2, 'FIRST_ROWS',        3, 'RULE',        4, 'CHOOSE',           'UNKNOWN'), kglobtn0, kglobcce, kglobcceh, kglobt17, kglobt18, kglobts4, kglhdkmk, kglhdpar, kglobtp0, kglnahsh, kglobt46, kglobt30, kglobt09, kglobts5, kglobt48, kglobts0, kglobt19, kglobts1, kglobt20, kglobt21, kglobts2, kglobt06, kglobt07, decode(kglobt28, 0, to_number(NULL), kglobt28), kglhdadr, kglobt29, decode(bitand(kglobt00,64),64, 'Y', 'N'), decode(kglobsta,        1, 'VALID',        2, 'VALID_AUTH_Eselect 1 from sys.aq$_subscriber_table where rownum < 2 and subscriber_id <> 0 and table_objno <> 0 declare     total_blocks number := 0;   begin     select nvl(sum(d.blocks), 0) into total_blocks        from x$kewx_segments d,            (select distinct o1.segment_name name from x$kewx_segments o1              where o1.segment_name like 'LOGSTDBY$%'             union all             select distinct o2.lob_name name from x$kewx_lobs o2              where o2.table_name like 'LOGSTDBY$%') s       where (d.owner = 'SYSTEM') and             (d.segment_name = s.name);     :1 := total_blocks;   end;select userenv('Instance'),  icrid, to_number(icrls),         to_date(icrlc,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'),         to_number(icprs),         to_date(icprc,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'),         decode(bitand(icflg,3), 1,'ORPHAN', 2, 'CURRENT', 0, 'PARENT',                'ORPHAN'),         icrlc_i, icpinc, icalw  from x$kccicselect trace_type, primary_id, qualifier_id1, qualifier_id2  from wri$_aggregation_enabledselect count(*) from dba_tables where tablespace_name='USERS'select wrm.last_ash_sample_id from   WRM$_DATABASE_INSTANCE wrm,        (select max(startup_time) as latest_startup         from   WRM$_DATABASE_INSTANCE         where  instance_number    = :instance_number           and  dbid               = :dbid           and  last_ash_sample_id != 0 ) starttime where  wrm.instance_number = :instance_number2   and  wrm.dbid            = :dbid2   and  wrm.startup_time    = starttime.latest_startup select num_rows FROM dba_tables where table_name = 'TESTING'select subscriber_id, name, address, protocol, subscriber_type,      rule_name, trans_name, ruleset_name, negative_ruleset_name,          creation_time, deletion_time,  modification_time, scn_at_remove      , scn_at_add from  AQ$_SUBSCRIBER_TABLE where queue_name=:1                        and schema=:2 and bitand(subscriber_type, 2) = 2select df.tablespace_name "Tablespace",        totalusedspace "Used MB",        (df.totalspace - tu.totalusedspace) "Free MB",        df.totalspace "Total MB",        round(100 * ( (df.totalspace - tu.totalusedspace)/ df.totalspace)) "Pct. Free"   from (select tablespace_name,                round(sum(bytes) / 1048576) TotalSpace           from dba_data_files           group by tablespace_name) df,        (select round(sum(bytes)/(1024*1024)) totalusedspace,                tablespace_name           from dba_segments           group by tablespace_name) tu  where df.tablespace_name = tu.tablespace_name     and df.totalspace <> 0select df.tablespace_name "Tablespace",        totalusedspace "Used MB",        (df.totalspace - tu.totalusedspace) "Free MB",        df.totalspace "Total MB",        round(100 * ( (df.totalspace - tu.totalusedspace)/ df.totalspace)) "Pct. Free"   from (select tablespace_name,                round(sum(bytes) / 1048576) TotalSpace           from dba_data_files           group by tablespace_name) df,        (select round(sum(bytes)/(1024*1024)) totalusedspace,                tablespace_name           from dba_segments           group by tablespace_name) tu  where df.tablespace_name = tu.tablespace_name     and df.totalspace <> 0select df.tablespace_name "Tablespace",        totalusedspace "Used MB",        (df.totalspace - tu.totalusedspace) "Free MB",        df.totalspace "Total MB",        round(100 * ( (df.totalspace - tu.totalusedspace)/ df.totalspace)) "Pct. Free"   from (select tablespace_name,                round(sum(bytes) / 1048576) TotalSpace           from dba_data_files           group by tablespace_name) df,        (select round(sum(bytes)/(1024*1024)) totalusedspace,                tablespace_name           from dba_segments           group by tablespace_name) tu  where df.tablespace_name = tu.tablespace_name     and df.totalspace <> 0select df.tablespace_name "Tablespace",        totalusedspace "Used MB",        (df.totalspace - tu.totalusedspace) "Free MB",        df.totalspace "Total MB",        round(100 * ( (df.totalspace - tu.totalusedspace)/ df.totalspace)) "Pct. Free"   from (select tablespace_name,                round(sum(bytes) / 1048576) TotalSpace           from dba_data_files           group by tablespace_name) df,        (select round(sum(bytes)/(1024*1024)) totalusedspace,                tablespace_name           from dba_segments           group by tablespace_name) tu  where df.tablespace_name = tu.tablespace_name     and df.totalspace <> 0select df.tablespace_name "Tablespace",        totalusedspace "Used MB",        (df.totalspace - tu.totalusedspace) "Free MB",        df.totalspace "Total MB",        round(100 * ( (df.totalspace - tu.totalusedspace)/ df.totalspace)) "Pct. Free"   from (select tablespace_name,                round(sum(bytes) / 1048576) TotalSpace           from dba_data_files           group by tablespace_name) df,        (select round(sum(bytes)/(1024*1024)) totalusedspace,                tablespace_name           from dba_segments           group by tablespace_name) tu  where df.tablespace_name = tu.tablespace_name     and df.totalspace <> 0select df.tablespace_name "Tablespace",        totalusedspace "Used MB",        (df.totalspace - tu.totalusedspace) "Free MB",        df.totalspace "Total MB",        round(100 * ( (df.totalspace - tu.totalusedspace)/ df.totalspace)) "Pct. Free"   from (select tablespace_name,                round(sum(bytes) / 1048576) TotalSpace           from dba_data_files           group by tablespace_name) df,        (select round(sum(bytes)/(1024*1024)) totalusedspace,                tablespace_name           from dba_segments           group by tablespace_name) tu  where df.tablespace_name = tu.tablespace_name     and df.totalspace <> 0select /*+ FIRST_ROWS(1) PARALLEL("WRH$_SYS_TIME_MODEL", 1) */ 1 from "SYS"."WRH$_SYS_TIME_MODEL" PARTITION ("WRH$_SYS_TI_2827760704_27")  where ( (  (  ( "DBID" < 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" < 52 )  )  ) ) and rownum < 2select tablespace_name from dba_segments group by tablespace_name begin      dbms_aqadm_sys.remove_all_nondurablesub(:1, :2);   end;select size_for_estimate,                      size_factor * 100 f,                    estd_physical_read_time,                estd_physical_reads              from v$db_cache_advice where id = '3'LOCK TABLE "WRH$_LATCH_MISSES_SUMMARY" PARTITION ("WRH$_LATCH__2827760704_27")  IN EXCLUSIVE MODE  NOWAIT select 1 from ustats$ where obj# = :1 and rownum = 1                                        delete /*+ dynamic_sampling(m 4) dynamic_sampling_est_cdn(m) */                 from sys.mon_mods$ m                                                          where exists                                                                  (select /*+ unnest */ * from sys.tabpart$ t where t.obj# = m.obj#)SELECT d.inst_id, d.groupid, g.name, d.metricid,            d.name, d.unit          FROM   x$kewmdsm d, x$kewmgsm g          where d.groupid = g.groupidselect min(next_date) from "SYS"."AQ$_SCHEDULER$_REMDB_JOBQTAB_T"LOCK TABLE "WRH$_EVENT_HISTOGRAM" PARTITION ("WRH$_EVENT__2827760704_27")  IN EXCLUSIVE MODE  NOWAIT delete from WRH$_IC_DEVICE_STATS tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id))        select unique( nvl2(job_subname,       '"'||owner||'"."'||job_name||'"."'||job_subname ||'"',       '"'||owner||'"."'||job_name||'"')) jn from scheduler$_notification       where bitand(flags,1)=1 and owner||'"'||job_name not in         ( select owner||'"'||job_name from dba_scheduler_jobs union all           select qt.user_data.object_owner||'"'||qt.user_data.object_name             from sys.scheduler$_event_qtab qt where state<2 )select name,online$,contents$,undofile#,undoblock#,blocksize,dflmaxext,dflinit,dflincr,dflextpct,dflminext, dflminlen, owner#,scnwrp,scnbas, NVL(pitrscnwrp, 0), NVL(pitrscnbas, 0), dflogging, bitmapped, inc#, flags, plugged, NVL(spare1,0), NVL(spare2,0), affstrength from ts$ where ts#=:1delete from WRM$_SNAP_ERROR tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select obj#, dataobj#, part#, hiboundlen, hiboundval, ts#, file#, block#, pctfree$, pctused$, initrans, maxtrans, flags, analyzetime, samplesize, rowcnt, blkcnt, empcnt, avgspc, chncnt, avgrln, length(bhiboundval), bhiboundval from tabpart$ where bo# = :1 order by part#select obj#, dataobj#, part#, hiboundlen, hiboundval, ts#, file#, block#, pctfree$, pctused$, initrans, maxtrans, flags, analyzetime, samplesize, rowcnt, blkcnt, empcnt, avgspc, chncnt, avgrln, length(bhiboundval), bhiboundval from tabpart$ where bo# = :1 order by part#select location_name from loc$LOCK TABLE "WRH$_TABLESPACE_STAT" PARTITION ("WRH$_TABLES_2827760704_27")  IN EXCLUSIVE MODE  NOWAIT                                          delete /*+ dynamic_sampling(m 4) dynamic_sampling_est_cdn(m) */                 from sys.mon_mods$ m                                                          where exists                                                                  (select /*+ unnest */ * from sys.tab$ t where t.obj# = m.obj#)  UPDATE /*+ INDEX(wrh$_seg_stat_obj wrh$_seg_stat_obj_index) */          wrh$_seg_stat_obj ob      SET (snap_id, owner, object_name, subobject_name, tablespace_name,           object_type, index_type, base_obj#, base_object_name,           base_object_owner) =       (SELECT :lah_snap_id, so.oj.owner_name, so.oj.object_name,               so.oj.subobject_name, so.oj.tablespace_name, so.oj.object_type,               index_type, coalesce(io.base_obj#, so.base_obj#),               coalesce(io.base_object_name, so.base_object_name),              coalesce(io.base_object_owner, so.base_object_owner)          FROM            (SELECT dbid, ts#, obj#, dataobj#, object_type, base_obj#,                    base_object_name, base_object_owner,                    dbms_swrf_internal.awr_get_object_info(                      ts#, obj#, dataobj#,                      AWR_OBJECT_INFO_TYPE(owner, object_name, subobject_name,                                           tablespace_name, object_type)) oj     SELECT DECODE('A','A','1','2') FROM DUALselect /*+ FIRST_ROWS(1) PARALLEL("WRH$_EVENT_HISTOGRAM", 1) */ 1 from "SYS"."WRH$_EVENT_HISTOGRAM" PARTITION ("WRH$_EVENT__2827760704_27")  where ( (  (  ( "DBID" < 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" < 52 )  )  ) ) and rownum < 2select min(timeout) from sys.reg$select /*+ FIRST_ROWS(1) PARALLEL("WRH$_TABLESPACE_STAT", 1) */ 1 from "SYS"."WRH$_TABLESPACE_STAT" PARTITION ("WRH$_TABLES_2827760704_27")  where ( (  (  ( "DBID" > 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" >= 52 OR "SNAP_ID" IS NULL  )  )  ) ) and rownum < 2select /*+ FIRST_ROWS(1) PARALLEL("WRH$_SEG_STAT", 1) */ 1 from "SYS"."WRH$_SEG_STAT" PARTITION ("WRH$_SEG_ST_2827760704_27")  where ( (  (  ( "DBID" < 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" < 52 )  )  ) ) and rownum < 2SELECT COUNT(DISTINCT SET_COUNT) FROM V$BACKUP_PIECE WHERE STATUS != 'D'select p.value$, lengthb(p.value$) from sys.props$ p   where p.name = 'BACK_END_DB'insert into sys.wri$_optstat_histhead_history (obj#,intcol#,savtime,flags, null_cnt,minimum,maximum,distcnt,density,lowval,hival,avgcln,sample_distcnt, sample_size,timestamp#,colname)  select h.obj#, h.intcol#, :3, bitand(h.spare2,7) + 8 + decode(h.cache_cnt,0,0,64), h.null_cnt, h.minimum, h.maximum, h.distcnt, h.density, h.lowval, h.hival, h.avgcln, h.spare1, h.sample_size, h.timestamp#, :4  from sys.hist_head$ h where h.obj# = :1 and h.intcol# = :2SELECT 1 from "SYS"."AQ$SCHEDULER_FILEWATCHER_QT" qtview  WHERE (queue = 'SYS.AQ$_SCHEDULER_FILEWATCHER_QT_E' ) AND rownum < 2select /*+ FIRST_ROWS(1) PARALLEL("WRH$_WAITSTAT", 1) */ 1 from "SYS"."WRH$_WAITSTAT" PARTITION ("WRH$_WAITST_2827760704_27")  where ( (  (  ( "DBID" > 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" >= 52 OR "SNAP_ID" IS NULL  )  )  ) ) and rownum < 2call dbms_autotask_prvt.age (  )select count(unique name) from resource_consumer_group$ where status='ACTIVE'INSERT INTO WWV_FLOW_LOG_HISTORY ( LOG_DAY, WORKSPACE_ID, APPLICATION_ID, PAGE_EVENTS, PAGE_VIEWS, PAGE_ACCEPTS, PARTIAL_PAGE_VIEWS, WEBSHEET_VIEWS, ROWS_FETCHED, IR_SEARCHES, DISTINCT_PAGES, DISTINCT_USERS, DISTINCT_SESSIONS, AVERAGE_RENDER_TIME, MEDIAN_RENDER_TIME, MAXIMUM_RENDER_TIME, TOTAL_RENDER_TIME, CONTENT_LENGTH, ERROR_COUNT ) ( SELECT TRUNC(TIME_STAMP) LOG_DAY, SECURITY_GROUP_ID WORKSPACE_ID, FLOW_ID APPLICATION_ID, COUNT(*) PAGE_EVENTS, SUM(DECODE(NVL(PAGE_MODE,'D'),'D',1,0)) PAGE_VIEWS, SUM(DECODE(NVL(PAGE_MODE,'D'),'A',1,0)) PAGE_ACCEPTS, SUM(DECODE(NVL(PAGE_MODE,'D'),'P',1,0)) PARTIAL_PAGE_VIEWS, SUM(DECODE(WEBSHEET_ID,NULL,0,1)) WEBSHEET_VIEWS, SUM(NUM_ROWS) ROWS_FETCHED, SUM(DECODE(IR_SEARCH,NULL,0,1)) IR_SEARCHES, COUNT(DISTINCT STEP_ID) DISTINCT_PAGES, COUNT(DISTINCT USERID) DISTINCT_USERS, COUNT(DISTINCT SESSION_ID) DISTINCT_SESSIONS, AVG(ELAP) AVERAGE_RENDER_TIME, MEDIAN(ELAP) MEDIAN_RENDER_TIME, MAX(ELAP) MAXIMUM_RENDER_TIME, SUM(ELAP) TOTAL_RENDER_TIME, SUM(NVL(COdelete from WRH$_MEMORY_RESIZE_OPS tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select count(*) from XDB.XDB$SCHEMA s where s.xmldata.schema_url = 'http://xmlns.oracle.com/xdb/XDBSchema.xsd'select SUM(column_length) from all_ind_columns where table_name = 'JOB_HISTORY'select ROWID from SYS_FBA_DL where ROWNUM = 1select /*+ FIRST_ROWS(1) PARALLEL("WRH$_MVPARAMETER", 1) */ 1 from "SYS"."WRH$_MVPARAMETER" PARTITION ("WRH$_MVPARA_2827760704_27")  where ( (  (  ( "DBID" < 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" < 52 )  )  ) ) and rownum < 2select sql_text from v$sqlLOCK TABLE "WRH$_MVPARAMETER" PARTITION ("WRH$_MVPARA_2827760704_27")  IN EXCLUSIVE MODE  NOWAIT select  decode(u.type#, 2, u.ext_username, u.name), o.name, trigger$.sys_evts, trigger$.type#  from obj$ o, user$ u, trigger$  where o.type# = 12 and bitand(trigger$.property,16) = 16   and trigger$.baseobject = :1 and trigger$.obj# = o.obj#   and o.owner# = u.user# order by o.obj#select SUM(column_length) from all_ind_columns where table_name = 'T2'insert into smon_scn_time (thread, time_mp, time_dp, scn, scn_wrp, scn_bas, num_mappings, tim_scn_map) values (0, :1, :2, :3, :4, :5, :6, :7)select inst_id,'',ksmssnam,ksmsslen from x$ksmfs where ksmsslen>1  union all  select inst_id,'shared pool',ksmssnam, sum(ksmsslen) from x$ksmss    where ksmsslen>1 group by inst_id, 'shared pool', ksmssnam  union all  select inst_id,'large pool',ksmssnam, sum(ksmsslen) from x$ksmls    where ksmsslen>1 group by inst_id, 'large pool', ksmssnam  union all  select inst_id,'java pool',ksmssnam, sum(ksmsslen) from x$ksmjs    where ksmsslen>1 group by inst_id, 'java pool', ksmssnam  union all  select inst_id,'numa pool',ksmnsnam, sum(ksmnslen) from x$ksmns    where ksmnslen>1 group by inst_id, 'numa pool', ksmnsnam  union all  select inst_id,'streams pool',ksmssnam, sum(ksmsslen) from x$ksmstrs    where ksmsslen>1 group by inst_id, 'streams pool', ksmssnamselect default$ from col$ where rowid=:1select num_rows FROM dba_tables where table_name = 'LENTES'SELECT PARAM_ID, AUDIT_TRAIL_TYPE#, NUMBER_VALUE, STRING_VALUE  FROM SYS.DAM_CONFIG_PARAM$  WHERE PARAM_ID = 17 AND  (AUDIT_TRAIL_TYPE# = 4 OR AUDIT_TRAIL_TYPE# = 12 OR AUDIT_TRAIL_TYPE# = 15)select table_name FROM dba_tables where tablespace_name='USERS'delete from WRI$_ALERT_HISTORY where time_suggested < :1select   vector_index, vector from   WRI$_SCH_VOTES where   schedule_id = :iddelete from sys.mon_mods_all$ m where not exists   (select /*+ unnest */ 1 from sys.obj$ o where o.obj# = m.obj# )select count(FA#) from SYS_FBA_TRACKEDTABLES where OBJ# = 6505 and bitand(FLAGS, 128)=0select limit# from profile$ where profile#=:1 and resource#=:2 and type#=:3select PGA_TARGET_FOR_ESTIMATE s,          PGA_TARGET_FACTOR * 100 f,           ESTD_TIME t,         BYTES_PROCESSED b   from v$pga_target_advice order by PGA_TARGET_FOR_ESTIMATEselect u.name, o.name, a.interface_version#, o.obj#      from association$ a, user$ u, obj$ o                     where a.obj# = :1                                          and a.property = :2                                      and a.statstype# = o.obj#                                and u.user# = o.owner#insert into WRI$_DBU_CPU_USAGE_SAMPLE (dbid, version, last_sample_date, last_sample_date_num, last_sample_period, total_samples, sample_interval) select dbid, version, NULL, NULL, 0, 0, 43200 from v$database, v$instance where not exists (select 1 from WRI$_DBU_CPU_USAGE_SAMPLE us where us.dbid    = :dbid and us.version = :version)delete from WRH$_SQL_WORKAREA_HISTOGRAM tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select count(FA#) from SYS_FBA_TRACKEDTABLES where OBJ# = 6434 and bitand(FLAGS, 128)=0select lobtsn, lobrdba, lobobjid from x$lobstat   where lobspcalloc > 0 and lobcurrtime >= :1   order by lobspcalloc descSELECT ID, WORKSHEET_ID, WEBSHEET_ID, REPORT_ID, EMAIL_SUBJECT, EMAIL_ADDRESS, NOTIFY_INTERVAL, START_DATE, END_DATE, OFFSET_DATE, CREATED_BY, SECURITY_GROUP_ID FROM WWV_FLOW_WORKSHEET_NOTIFY WHERE SYSTIMESTAMP BETWEEN NVL(START_DATE,SYSTIMESTAMP) AND NVL(END_DATE,SYSTIMESTAMP) AND EMAIL_ADDRESS IS NOT NULLdelete from WRM$_BASELINE_DETAILS   where dbid = :dbid     and baseline_id in      (select baseline_id from WRM$_BASELINE        where expiration is not NULL          and creation_time + expiration < :bind1)select ts# from ts$ where bitmapped <> 0 and  contents$ <> 1 and online$=1 and ts# >= :1 order by ts# ascinsert into WRI$_DBU_USAGE_SAMPLE (dbid, version, last_sample_date, last_sample_date_num, last_sample_period, total_samples, sample_interval) select dbid, version, NULL, NULL, 0, 0, 604800 from v$database, v$instance where not exists (select 1 from WRI$_DBU_USAGE_SAMPLE us where us.dbid    = :dbid and us.version = :version)select count(*) from sys.job$ where next_date < :1 and (field1 = :2 or (field1 = 0 and 'Y' = :3)) and ((dbms_logstdby.db_is_logstdby = 0 and job < 1000000000) or  (dbms_logstdby.db_is_logstdby = 1 and job >= 1000000000))SELECT SUM(blocks)  FROM x$kewx_segments  WHERE segment_name IN ('SQL$', 'I_SQL$_PKEY', 'SQLLOG$')        OR segment_name LIKE '%SMB$CONFIG%'        OR segment_name LIKE '%SQL$TEXT%'        OR segment_name LIKE '%SQLOBJ$%'        OR segment_name IN (SELECT DISTINCT lob_name                            FROM x$kewx_lobs                            WHERE table_name IN ('SQL$', 'SQL$TEXT',                                                 'SQLOBJ$', 'SQLOBJ$DATA',                                                 'SQLOBJ$AUXDATA'))delete from sys.wri$_optstat_histhead_history                                where nvl(:1, savtime) <= savtime and savtime < nvl(:2, savtime+1)             and obj# = nvl(:3, obj#) and intcol# = nvl(:4, intcol#)                      and rownum <= NVL(:5, rownum)select count(FA#) from SYS_FBA_TRACKEDTABLES where OBJ# = 6384 and bitand(FLAGS, 128)=0delete from WRH$_RULE_SET tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) SELECT MAX(LOG_DAY) FROM WWV_FLOW_LOG_HISTORY WHERE WORKSPACE_ID = :B1 select service_id, name, name_hash, network_name, creation_date, creation_date_hash, goal, flags, edition from service$ where lower(name) = lower(:1) and deletion_date is nullselect obj#, owner, node from syn$ where name=:1SELECT CONTROLFILE_TYPE FROM V$DATABASEselect /*+ FIRST_ROWS(1) PARALLEL("WRH$_SERVICE_STAT", 1) */ 1 from "SYS"."WRH$_SERVICE_STAT" PARTITION ("WRH$_SERVIC_2827760704_27")  where ( (  (  ( "DBID" < 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" < 52 )  )  ) ) and rownum < 2update hist_head$ set bucket_cnt=:3, row_cnt=:4, cache_cnt=:5,null_cnt=:6, timestamp#=:7, sample_size=:8, minimum=:9, maximum=:10,distcnt=:11, lowval=:12, hival=:13, density=:14, spare1=:15, spare2=:16, avgcln=:17, col#=:18 where obj#=:1 and intcol#=:2lock table sys.mon_mods_all$ in exclusive modeselect /*+ FIRST_ROWS(1) PARALLEL("WRH$_SYSSTAT", 1) */ 1 from "SYS"."WRH$_SYSSTAT" PARTITION ("WRH$_SYSSTA_2827760704_27")  where ( (  (  ( "DBID" < 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" < 52 )  )  ) ) and rownum < 2delete from WRM$_SNAPSHOT   where :beg_snap <= snap_id and         snap_id <= :end_snap and         status = 2 and         dbid = :dbidselect 1 from WRH$_LATCH_CHILDREN where dbid     = :dbid   and :bind1  <= snap_id   and snap_id  < :bind2   and rownum  <= 1WITH MWS AS  (SELECT ROWNUM idx, WINDOW_NAME, NEXT_START_DATE sd,        NEXT_START_DATE + DURATION ed , DURATION,         EXTRACT(DAY FROM DURATION)*24*60 +         EXTRACT(HOUR FROM DURATION)*60 +         EXTRACT(MINUTE FROM DURATION) mdur,         CASE active WHEN 'TRUE' THEN 1 ELSE 0 END AS act     FROM DBA_SCHEDULER_WINDOWS    WHERE ENABLED='TRUE'       AND WINDOW_NAME IN        (SELECT WINDOW_NAME            FROM DBA_SCHEDULER_WINGROUP_MEMBERS          WHERE WINDOW_GROUP_NAME='MAINTENANCE_WINDOW_GROUP'))  SELECT idx, 0,  WINDOW_NAME, sd, ed, DURATION, mdur, act  FROM  MWS UNION ALL   SELECT idx, C.CID_KETCL, WINDOW_NAME, sd, ed, DURATION, mdur, act     FROM MWS, X$KETCL C   WHERE C.CID_KETCL > 0      AND MWS.WINDOW_NAME IN        (SELECT WINDOW_NAME           FROM DBA_SCHEDULER_WINGROUP_MEMBERS WGM          WHERE WGM.WINDOW_GROUP_NAME=C.WGRP_KETCL) ORDER BY 4,1,2      select name, resetlogs_time,              resetlogs_change#,              dbid       into :dbname:dbname_i,            :rlgtime,            :rlgscn,            :fhdbi:fhdbi_i       from v$databasedelete from WRH$_THREAD tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select /*+ FIRST_ROWS(1) PARALLEL("WRH$_LATCH_MISSES_SUMMARY", 1) */ 1 from "SYS"."WRH$_LATCH_MISSES_SUMMARY" PARTITION ("WRH$_LATCH__2827760704_27")  where ( (  (  ( "DBID" > 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" >= 52 OR "SNAP_ID" IS NULL  )  )  ) ) and rownum < 2insert into sys.wri$_optstat_histgrm_history (obj#,intcol#,savtime,bucket, endpoint,epvalue,colname)  select hg.obj#,hg.intcol#,:3,hg.bucket,hg.endpoint,hg.epvalue, :4  from sys.histgrm$ hg  where hg.obj# = :1 and hg.intcol# = :2update sys.col_usage$ set   equality_preds    = equality_preds    + decode(bitand(:flag,1),0,0,1),   equijoin_preds    = equijoin_preds    + decode(bitand(:flag,2),0,0,1),   nonequijoin_preds = nonequijoin_preds + decode(bitand(:flag,4),0,0,1),   range_preds       = range_preds       + decode(bitand(:flag,8),0,0,1),   like_preds        = like_preds        + decode(bitand(:flag,16),0,0,1),   null_preds        = null_preds        + decode(bitand(:flag,32),0,0,1),  timestamp = :time where obj# = :objn and intcol# = :colnselect tab_alias, tab_name, property, tab_id, tab_obj# from rec_tab$ where  ec_obj# = :1SELECT a.apply#, a.apply_name, a.flags FROM sys.streams$_apply_process a, dba_queues q, dba_queue_tables qt  ,v$instance i WHERE a.queue_owner  = q.owner   and a.queue_name   = q.name   and qt.queue_table = q.queue_table   and qt.owner       = q.owner   and qt.owner_instance = i.instance_number   and a.status       = :1 ORDER BY a.apply# select  PRIV_NUMBER from GV$ENABLEDPRIVS where inst_id = USERENV('Instance')select count(FA#) from SYS_FBA_TRACKEDTABLES where OBJ# = 6334 and bitand(FLAGS, 128)=0select l.col#, l.intcol#, l.lobj#, l.ind#, l.ts#, l.file#, l.block#, l.chunk, l.pctversion$, l.flags, l.property, l.retention, l.freepools from lob$ l where l.obj# = :1 order by l.intcol# ascselect l.col#, l.intcol#, l.lobj#, l.ind#, l.ts#, l.file#, l.block#, l.chunk, l.pctversion$, l.flags, l.property, l.retention, l.freepools from lob$ l where l.obj# = :1 order by l.intcol# asc(SELECT sequence#, src_sid, src_serial#,                                      src_state, src_userid, src_schemaid                            FROM   tsm_src$                                                       WHERE  src_inst_name   = nvl(:1, src_inst_name)                         AND  src_inst_id     = nvl(:2, src_inst_id)                           AND  src_start_time  < :3                                             AND  src_state NOT IN (6, 7))                                      UNION ALL                                                             (SELECT sequence#, dst_sid, dst_serial#,                                      dst_state, dst_userid, dst_schemaid                            FROM   tsm_dst$                                                       WHERE  dst_inst_name   = nvl(:1, dst_inst_name)                         AND  dst_inst_id     = nvl(:2, dst_inst_id)                           AND  dst_start_time  < :3                                             AND  dst_state NOdelete from WRH$_STREAMS_POOL_ADVICE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select count(*) from dba_scheduler_jobs where job_action = 'sys.dbms_aqadm_sys.register_driver' and instance_id = :1select SUM(column_length) from all_ind_columns where table_name = 'JOBS'DELETE FROM RECENT_RESOURCE_INCARNATIONS$ WHERE DB_UNIQUE_NAME <> :B2 OR DB_DOMAIN <> :B1 select o.name, o.owner# from obj$ o, type$ t  where o.oid$ = t.tvoid and  bitand(t.properties,8388608) = 8388608 and (sysdate-o.ctime) > 0.0007update seq$ set increment$=:2,minvalue=:3,maxvalue=:4,cycle#=:5,order$=:6,cache=:7,highwater=:8,audit$=:9,flags=:10 where obj#=:1select re.r_obj#, o.owner#, u.name, o.name, re.property, re.rule_id,  re.r_orcount, re.r_lowbox, re.tabs_used, re.vars_used  from rule_set_re$ re, obj$ o, user$ u where re.rs_obj# = :1 and re.ec_obj# = :2 and re.ent_used = 1 and  re.r_obj# = o.obj# and o.owner# = u.user#select /*+ index(idl_ub1$ i_idl_ub11) +*/ piece#,length,piece from idl_ub1$ where obj#=:1 and part=:2 and version=:3 order by piece#select /*+ index(idl_ub1$ i_idl_ub11) +*/ piece#,length,piece from idl_ub1$ where obj#=:1 and part=:2 and version=:3 order by piece#select 1 from "SYS"."AQ$_AQ_PROP_TABLE_L"select SUM(column_length) from all_ind_columns where table_name = 'REGIONS'select min(time_manager_info) from "SYS"."AQ_EVENT_TABLE"select parttype, partcnt, partkeycols, flags, defts#, defpctfree, defpctused, definitrans, defmaxtrans, deftiniexts, defextsize, defminexts, defmaxexts, defextpct, deflists, defgroups, deflogging, spare1, mod(spare2, 256) subparttype, mod(trunc(spare2/256), 256) subpartkeycols, mod(trunc(spare2/65536), 65536) defsubpartcnt, mod(trunc(spare2/4294967296), 256) defhscflags, mod(spare3, 256) interval_dty, rowid, defmaxsize from partobj$ where obj# = :1select parttype, partcnt, partkeycols, flags, defts#, defpctfree, defpctused, definitrans, defmaxtrans, deftiniexts, defextsize, defminexts, defmaxexts, defextpct, deflists, defgroups, deflogging, spare1, mod(spare2, 256) subparttype, mod(trunc(spare2/256), 256) subpartkeycols, mod(trunc(spare2/65536), 65536) defsubpartcnt, mod(trunc(spare2/4294967296), 256) defhscflags, mod(spare3, 256) interval_dty, rowid, defmaxsize from partobj$ where obj# = :1      declare          vsn  varchar2(20);             begin               vsn := dbms_rcvman.getPackageVersion;               :pkg_vsn:pkg_vsn_i := vsn;               if vsn is not null then                  :pkg_vsnub4 :=                    to_number(substr(vsn,1,2) || substr(vsn,4,2) ||                              substr(vsn,7,2) || nvl(substr(vsn,10,2),'00'));               end if;             end;update wrm$_wr_control    set snap_interval = :bind1, snapint_num = :bind2, retention = :bind3,      retention_num = :bind4, most_recent_snap_id = :bind5,      most_recent_snap_time = :bind6, mrct_snap_time_num = :bind7,      status_flag = :bind8, most_recent_purge_time = :bind9,      mrct_purge_time_num = :bind10,      most_recent_split_id = :bind11, most_recent_split_time = :bind12,      swrf_version = :bind13, registration_status = :bind14,      mrct_baseline_id = :bind15, topnsql = :bind16, mrct_bltmpl_id = :bind17    where dbid = :dbidSELECT /*+ rule */ U.NAME, OI.NAME, NULL, NULL, DECODE(BITAND(I.FLAGS, 2048),2048,2,0), DECODE(BITAND(I.FLAGS, 64),64,1,0), I.ROWCNT, I.LEAFCNT, I.DISTKEY, I.LBLKKEY, I.DBLKKEY, I.CLUFAC, I.BLEVEL, I.ANALYZETIME, I.SAMPLESIZE, DECODE(BITAND(I.FLAGS, 128), 128, MOD(TRUNC(I.PCTTHRES$/256),256), DECODE(I.TYPE#, 4, MOD(TRUNC(I.PCTTHRES$/256),256), NULL)), IST.CACHEDBLK, IST.CACHEHIT, IST.LOGICALREAD, NULL FROM SYS.USER$ U, SYS.OBJ$ OI, SYS.IND$ I, SYS.IND_STATS$ IST WHERE :B4 IS NULL AND U.NAME = :B3 AND OI.OWNER# = U.USER# AND OI.NAME = :B2 AND OI.TYPE# = 1 AND OI.OBJ# = I.OBJ# AND I.OBJ# = IST.OBJ# (+) AND (:B1 = 'CACHE_HISTORY' OR (:B1 = 'DATA' AND BITAND(I.FLAGS,2) = 2) OR (:B1 = 'CACHE' AND IST.OBJ# IS NOT NULL) OR (:B1 = 'ALL' AND (BITAND(I.FLAGS,2) = 2 OR IST.OBJ# IS NOT NULL)) ) UNION ALL SELECT U.NAME, OP.NAME, OP.SUBNAME, NULL, DECODE(BITAND(IP.FLAGS, 16),16,2,0), DECODE(BITAND(IP.FLAGS, 8),8,1,0), IP.ROWCNT, IP.LEAFCNT, IP.DISTKEY, IP.LBLKKEY, IP.DBLKKEY, IP.CLUFAC, IP.BLEVEL, Iinsert into WRI$_ALERT_OUTSTANDING (reason_id, object_id, subobject_id, internal_instance_number, owner, object_name, subobject_name, sequence_id, reason_argument_1, reason_argument_2, reason_argument_3, reason_argument_4, reason_argument_5, time_suggested, creation_time, action_argument_1, action_argument_2, action_argument_3, action_argument_4, action_argument_5, message_level, hosting_client_id, process_id, host_id, host_nw_addr, instance_name, instance_number, user_id, execution_context_id, error_instance_id, context, metric_value) values (:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12, :13, :14, :15, :16, :17, :18, :19, :20, :21, :22, :23, :24, :25, :26, :27, :28, :29, :30, :31, :32)DELETE FROM KET$_CLIENT_TASKS WHERE CURR_WIN_START < (SYSTIMESTAMP- INTERVAL '31' DAY)delete from WRH$_RSRC_CONSUMER_GROUP tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select o.obj#, t.flags from tab$ t, obj$ o, user$ u where  u.user# = :1 and u.user# = o.owner# and o.name = :2 and o.obj# = t.obj#select col#,intcol#,ntab# from ntab$ where obj#=:1 order by intcol# ascselect col#,intcol#,ntab# from ntab$ where obj#=:1 order by intcol# asc       begin          :vsn_min := dbms_backup_restore.protocol_version_number_min;             :rel_min := dbms_backup_restore.protocol_release_number_min;             :upd_min := dbms_backup_restore.protocol_update_number_min;              :cmp_min := 0;                                                                     :vsn_max := dbms_backup_restore.protocol_version_number_max;             :rel_max := dbms_backup_restore.protocol_release_number_max;             :upd_max := dbms_backup_restore.protocol_update_number_max;              :cmp_max := 0;                                                           :pkg_vsn := to_char(:vsn_max, 'fm00')||'.'||                      to_char(:rel_max, 'fm00')||'.'||                      to_char(:upd_max, 'fm00')||'.'||                      to_char(:cmp_max, 'fm00');             end;select     from_tz(      cast ((max(analyzetime) - 1) as timestamp),      to_char(systimestamp, 'TZH:TZM'))  from sys.tab$ where analyzetime is not nullSELECT /*+ ordered index(u) index(o) index(po) */ MOD(PO.SPARE2, 256), PO.PARTTYPE FROM SYS.USER$ U, SYS.OBJ$ O, SYS.PARTOBJ$ PO WHERE U.NAME = :B3 AND O.NAME = :B2 AND O.NAMESPACE = :B1 AND U.USER# = O.OWNER# AND O.OBJ# = PO.OBJ#select incarnation#, resetlogs_change#, resetlogs_time,         prior_resetlogs_change#, prior_resetlogs_time, status,         resetlogs_id, prior_incarnation#, flashback_database_allowed  from GV$DATABASE_INCARNATION  where inst_id = USERENV('Instance')select eventid, destination, name, schema,         disabled, flags, job_name,         propagation_name, destq from (select source_queue_schema, source_queue, propagation_name,       '"' || destination_queue_schema || '"."' || destination_queue ||       '"'|| nvl2(destination_dblink, '@', '') ||       destination_dblink as dest       from sys.streams$_propagation_process) sp, (select q.eventid, s.destination, q.name, t.schema,         s.disabled, t.flags, s.job_name, s.destq from system.aq$_queues q, sys.aq$_schedules s, system.aq$_queue_tables t,   sys.aq$_queue_table_affinities aft where q.oid = s.oid and q.table_objno = t.objno and aft.table_objno = t.objno and  bitand(q.properties, 512) = 512 and aft.owner_instance = :1  ) where sp.source_queue_schema (+)= schema and sp.source_queue (+)= name and sp.dest (+)= destination select min(next_date) from "SYS"."AQ$_SCHEDULER_FILEWATCHER_QT_T"delete from WRH$_IOSTAT_DETAIL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select sum(blocks) from x$kewx_segments  where owner = 'SYS'    and (segment_name like 'STREAMS$%' OR segment_name like 'APPLY$%')select exptime, ltime, astatus, lcount from user$ where user#=:1select SUM(column_length) from all_ind_columns where table_name = 'DEPARTMENTS'select time_mp, scn, num_mappings, tim_scn_map from smon_scn_time   where scn =    (select max(scn) from smon_scn_time where scn <= :1)select /*+ FIRST_ROWS(1) PARALLEL("WRH$_LATCH_MISSES_SUMMARY", 1) */ 1 from "SYS"."WRH$_LATCH_MISSES_SUMMARY" PARTITION ("WRH$_LATCH__2827760704_27")  where ( (  (  ( "DBID" < 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" < 52 )  )  ) ) and rownum < 2 SELECT 1 FROM obj$ WHERE name LIKE 'XS$SESSIONS'SELECT c.parameter_value           FROM smb$config c          WHERE parameter_name = :1SELECT /* OPT_DYN_SAMP */ /*+ ALL_ROWS IGNORE_WHERE_CLAUSE NO_PARALLEL(SAMPLESUB) opt_param('parallel_execution_enabled', 'false') NO_PARALLEL_INDEX(SAMPLESUB) NO_SQL_TUNE */ NVL(SUM(C1),0), NVL(SUM(C2),0) FROM (SELECT /*+ NO_PARALLEL("SYS_ALIAS_1") FULL("SYS_ALIAS_1") NO_PARALLEL_INDEX("SYS_ALIAS_1") */ 1 AS C1, 1 AS C2 FROM "SYS"."MON_MODS$" "SYS_ALIAS_1") SAMPLESUBselect grantee#, privilege#, max(nvl(option$,0)) from objauth$ where obj#=:1 group by grantee#,privilege# order by grantee#select o.name, u.name from obj$ o, user$ u  where o.obj# = :1 and o.owner# = u.user#select count(*) from undo$select /*+ FIRST_ROWS(1) PARALLEL("WRH$_ACTIVE_SESSION_HISTORY", 1) */ 1 from "SYS"."WRH$_ACTIVE_SESSION_HISTORY" PARTITION ("WRH$_ACTIVE_2827760704_27")  where ( (  (  ( "DBID" < 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" < 52 )  )  ) ) and rownum < 2select condition from cdef$ where rowid=:1select shared_pool_size_for_estimate s,          shared_pool_size_factor * 100 f,          estd_lc_load_time l, 0             from v$shared_pool_adviceselect count(FA#) from SYS_FBA_TRACKEDTABLES where OBJ# = 6314 and bitand(FLAGS, 128)=0LOCK TABLE "WRH$_OSSTAT" PARTITION ("WRH$_OSSTAT_2827760704_27")  IN EXCLUSIVE MODE  NOWAIT delete from WRH$_PERSISTENT_QUEUES tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select count(FA#) from SYS_FBA_TRACKEDTABLES where OBJ# = 6462 and bitand(FLAGS, 128)=0 declare     total_blocks number := 0;   begin     select nvl(sum(d.blocks), 0) into total_blocks       from x$kewx_segments d,            (select distinct o1.segment_name name from x$kewx_segments o1             where o1.segment_name like 'LOGMNR%' and                   o1.segment_name not like 'LOGMNRT%'             union all             select distinct o2.lob_name name from x$kewx_lobs o2             where o2.table_name like 'LOGMNR%' and                   o2.table_name not like 'LOGMNRT%' ) s       where (d.owner = 'SYS' or d.owner = 'SYSTEM') and             (d.segment_name = s.name );     :1 := total_blocks;   end;select ts#,online$ from ts$ where name=:1delete from WRH$_ACTIVE_SESSION_HISTORY_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from WRI$_SEGADV_CNTRLTAB where start_time < :1select max(procedure#) from procedureplsql$ where obj#=:1SELECT VERSION FROM V$INSTANCEdelete from WRH$_OSSTAT_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) update WRI$_SCH_CONTROL    set schedule_mode   = :smode,        synced_time     = :syncoff  where schedule_id = :idselect reason_id, object_id, subobject_id, internal_instance_number, time_suggested, context, reason_argument_1, reason_argument_2, reason_argument_3, reason_argument_4, reason_argument_5, action_argument_1, action_argument_2, action_argument_3, action_argument_4, action_argument_5, sequence_id, metric_value, instance_name from wri$_alert_outstanding where internal_instance_number > -2SELECT ID FROM WWV_FLOW_SESSIONS$ WHERE LAST_CHANGED <= (SYSDATE - (:B2 /24)) AND (SECURITY_GROUP_ID = :B1 OR :B1 IS NULL OR SECURITY_GROUP_ID = 0) delete from sys.cache_stats_1$ where dataobj# = :1select ee.ectx#, o.owner#, u.name, o.name, ee.num_rules, ee.num_boxes,  ee.ee_flags  from rule_set_ee$ ee, obj$ o, user$ u where ee.rs_obj# = :1 and  ee.ectx# = o.obj# and o.owner# = u.user#insert into hist_head$(obj#, intcol#, bucket_cnt, row_cnt, cache_cnt, null_cnt, timestamp#, sample_size, minimum, maximum, distcnt,lowval, hival, density, spare1, spare2, avgcln, col#) values(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15,:16,:17,:18)delete from WRH$_CURRENT_BLOCK_SERVER tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) UPDATE KET$_CLIENT_TASKS     SET STATUS = CASE STATUS WHEN 13 THEN 2 ELSE STATUS END,         WINDOW_NAME = NULL,         CURR_JOB_NAME = NULL,         RETRY_COUNT = 0,         GOOD_COUNT = GOOD_COUNT + 1,         LT_JOB_LOG_ID = :log,         LG_JOB_LOG_ID = :log,         LG_PRIORITY = TASK_PRIORITY,         LT_TERM_CODE = 10,         LT_ERROR = 0,         LG_DATE = :end,         LT_DATE = :end,         LG_DURATION = :ela,         LG_CPU_TIME = :cpu,         LT_DURATION = :ela,         LT_CPU_TIME = :cpu,         MG_DURATION = ((MG_DURATION * GOOD_COUNT) + :ela)/(GOOD_COUNT+1),         MG_CPU_TIME = ((MG_CPU_TIME * GOOD_COUNT) + :cpu)/(GOOD_COUNT+1)   WHERE CLIENT_ID = :cid     AND OPERATION_ID = :oid     AND TARGET_TYPE = :tgt     AND TARGET_NAME = :tgnselect q.eventid, q.table_objno from system.aq$_queues q select count(*), sum(blocks) from x$kewx_segments  where segment_name like 'SCHEDULER$%'update tabpart$ set dataobj# = :1, part# = :2, ts# = :3, file# = :4, block# = :5, pctfree$ = :6, pctused$ = :7, initrans = :8, maxtrans = :9, flags = :10, analyzetime = :11, samplesize = :12, rowcnt = :13, blkcnt = :14, empcnt = :15, avgspc = :16, chncnt = :17, avgrln = :18 where obj# = :19SELECT COUNT(*), SUM(blocks)    FROM x$kewx_segments   WHERE owner = 'SYS'     AND segment_name LIKE 'KET$%'delete from WRH$_MUTEX_SLEEP tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select SUM(data_length) from all_tab_columns where table_name = 'REGIONS'SELECT T.FLAGS, T.OBJNO, T.SORT_COLS FROM SYSTEM.AQ$_QUEUE_TABLES T WHERE T.SCHEMA = :B2 AND T.NAME = :B1 delete from WRH$_SGA tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select OBJOID,  CLSOID, RUNTIME, PRI, JOBTYPE,  SCHLIM,  WT, INST,  RUNNOW, ENQ_SCHLIM from ( select a.obj# OBJOID, a.class_oid CLSOID,    decode(bitand(a.flags, 16384), 0, a.next_run_date,           a.last_enabled_time) RUNTIME,    (2*a.priority +     decode(bitand(a.job_status, 4), 0, 0,            decode(a.running_instance, :1, -1, 1))) PRI,    1 JOBTYPE,    decode(a.schedule_limit, NULL,           decode(bitand(a.flags, 4194304), 4194304, p.schedule_limit, NULL),           a.schedule_limit) SCHLIM,    a.job_weight WT,    decode(a.running_instance, NULL, 0, a.running_instance) INST,    decode(bitand(a.flags, 16384), 0, 0, 1) RUNNOW,    decode(bitand(a.job_status, 8388608), 0, 0, 1) ENQ_SCHLIM  from sys.scheduler$_job a, sys.scheduler$_program p, v$database v,                      v$instance i  where a.program_oid = p.obj#(+)    and bitand(a.job_status, 515) = 1    and bitand(a.flags, 1048576) = 0    and ((bitand(a.flags, 134217728 + 268435456) = 0) or         (bitand(a.job_status, 1select 1 from WRH$_DLM_MISC where dbid     = :dbid   and :bind1  <= snap_id   and snap_id  < :bind2   and rownum  <= 1delete from WRH$_FILESTATXS_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select SUM(column_length) from all_ind_columns where table_name = 'EMPLOYEES'insert into sys.scheduler$_event_log  (log_id, log_date, type#, name, owner, operation, status, user_name,   client_id, guid, dbid, additional_info, destination, credential, class_id,   flags)   values  (:1, SYSTIMESTAMP,   :2, :3, :4, :5, :6, :7, :8, :9, NULL, :10, :11, :12, :13, :14)select max(snap_id) from wrm$_snapshot  where dbid = :dbid and     (cast(SYSTIMESTAMP as TIMESTAMP) - end_interval_time) > :retention and     snap_id < :max_snapselect last_sample_date_num, last_sample_date, total_samples from WRI$_DBU_USAGE_SAMPLE where dbid     = :dbid and version  = :versionselect num_rows FROM dba_tables where table_name = 'GATO'select con#,type#,condlength,intcols,robj#,rcon#,match#,refact,nvl(enabled,0),rowid,cols,nvl(defer,0),mtime,nvl(spare1,0),spare2,spare3 from cdef$ where obj#=:1select con#,type#,condlength,intcols,robj#,rcon#,match#,refact,nvl(enabled,0),rowid,cols,nvl(defer,0),mtime,nvl(spare1,0),spare2,spare3 from cdef$ where obj#=:1select plan, group_or_subplan, is_subplan,description, mandatory,mgmt_p1, mgmt_p2, mgmt_p3, mgmt_p4, mgmt_p5, mgmt_p6, mgmt_p7, mgmt_p8,active_sess_pool_p1, queueing_p1, parallel_degree_limit_p1, switch_group, switch_for_call, switch_time, switch_estimate,max_est_exec_time, switch_io_megabytes, switch_io_reqs, undo_pool, max_idle_time, max_idle_blocker_time, max_utilization_limit, max_active_sess_target_p1, parallel_queue_timeout from resource_plan_directive$ where obj#=:1 and status = 'ACTIVE'delete from WRH$_CLUSTER_INTERCON tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id))   UPDATE wrh$_seg_stat_obj ob      SET (snap_id, owner, object_name, subobject_name, tablespace_name,           object_type, index_type, base_obj#, base_object_name,           base_object_owner) =       (SELECT so.snap_id + 1,               so.oj.owner_name, so.oj.object_name,               so.oj.subobject_name, so.oj.tablespace_name, so.oj.object_type,               index_type, coalesce(io.base_obj#, so.base_obj#),               coalesce(io.base_object_name, so.base_object_name),              coalesce(io.base_object_owner, so.base_object_owner)          FROM            (SELECT dbid, ts#, obj#, dataobj#, object_type, base_obj#,                    base_object_name, base_object_owner, snap_id,                    dbms_swrf_internal.awr_get_object_info(                      ts#, obj#, dataobj#,                      AWR_OBJECT_INFO_TYPE(owner, object_name, subobject_name,                                           tablespace_name, object_type)) oj               FROM wrh$_seg_stat_obj) so    delete from WRH$_SYSTEM_EVENT_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select snap_interval, retention,most_recent_snap_time, most_recent_snap_id, status_flag, most_recent_purge_time, most_recent_split_id, most_recent_split_time, mrct_snap_time_num, mrct_purge_time_num, snapint_num, retention_num, swrf_version, registration_status, mrct_baseline_id, topnsql, mrct_bltmpl_id from wrm$_wr_control where dbid = :dbidselect /*+ FIRST_ROWS(1) PARALLEL("WRH$_SEG_STAT", 1) */ 1 from "SYS"."WRH$_SEG_STAT" PARTITION ("WRH$_SEG_ST_2827760704_27")  where ( (  (  ( "DBID" > 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" >= 52 OR "SNAP_ID" IS NULL  )  )  ) ) and rownum < 2insert into obj$(owner#,name,namespace,obj#,type#,ctime,mtime,stime,status,remoteowner,linkname,subname,dataobj#,flags,oid$,spare1,spare2,spare3) values(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15,:16,:17,:18)LOCK TABLE "WRH$_SEG_STAT" PARTITION ("WRH$_SEG_ST_2827760704_27")  IN EXCLUSIVE MODE  NOWAIT begin dbms_stats.lock_partition_stats('SYS', :bind1, :bind2); end;UPDATE WRH$_SEG_STAT_OBJ SET snap_id = :lah_snap_id  WHERE dbid = :dbid    AND (OBJ#, DATAOBJ#) IN (SELECT NUM1_KEWRATTR, NUM2_KEWRATTR FROM X$KEWRATTRSTALE)SELECT VALUE V FROM WWV_FLOW_PLATFORM_PREFS WHERE NAME = :B1 delete from WRH$_SERVICE_WAIT_CLASS_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) begin dbms_stats.unlock_partition_stats('SYS', :bind1, :bind2); end;select bl.baseline_id, bl.start_snap_id, min(s1.begin_interval_time), bl.end_snap_id, max(s2.end_interval_time) from wrm$_baseline bl, wrm$_snapshot s1, wrm$_snapshot s2 where (bl.start_snap_id = s1.snap_id) and (bl.end_snap_id = s2.snap_id) and (bl.dbid = :dbid) and (bl.dbid = s1.dbid) and (bl.dbid = s2.dbid) and (bl.baseline_id != 0) group by bl.baseline_id, bl.start_snap_id, bl.end_snap_idselect count(*) from sys.aq_event_tabledelete from WRH$_SERVICE_STAT_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) update wrm$_snapshot tab set status = 2  where (:beg_snap <= tab.snap_id and tab.snap_id <= :end_snap         and tab.dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.snap_id >= b.start_snap_id)                          and (tab.snap_id <= b.end_snap_id)                          and (b.dbid = :dbid2))select action, number_of_args, comments, flags, schedule_limit,         priority, job_weight, max_runs, max_failures,         max_run_duration, nls_env, env  from sys.scheduler$_program  where obj# = :1select file#, block#, ts#, blocks from seg$ where type# = 3select count(*) from edition$BEGIN DBMS_OUTPUT.DISABLE; END;delete from WRH$_BUFFERED_SUBSCRIBERS tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select max(procedure#) from procedurec$ where obj#=:1select userid, name, subname, flags    from sys.scheduler$_lwjob_obj where obj# = :1insert into wrh$_sessmetric_history     (snap_id, dbid, instance_number,      begin_time, end_time, sessid, serial#,      intsize, group_id, metric_id, value)  select      :snap_id, :dbid, :instance_number,      begtime, endtime, eid, eidsq, intsize_csec,      groupid, metricid, value  from x$kewmdrmv where groupid = 4delete from WRH$_SQL_PLAN tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) SELECT O.TYPE# FROM SYS.USER$ U, SYS.OBJ$ O WHERE U.NAME = :B3 AND O.OWNER# = U.USER# AND O.NAME = :B2 AND O.SUBNAME = :B1 MINUS SELECT O.TYPE# FROM SYS.USER$ U, SYS.OBJ$ O WHERE U.NAME = :B3 AND O.OWNER# = U.USER# AND O.NAME = :B2 AND O.SUBNAME = :B4 SELECT sum(bytes)  FROM dba_data_files  WHERE tablespace_name = 'SYSAUX'delete from WRH$_BUFFER_POOL_STATISTICS tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) SELECT count(*) FROM sys.snap_loadertime$  WHERE tableobj# = :1 AND rownum = 1select name,intcol#,segcol#,type#,length,nvl(precision#,0),decode(type#,2,nvl(scale,-127/*MAXSB1MINAL*/),178,scale,179,scale,180,scale,181,scale,182,scale,183,scale,231,scale,0),null$,fixedstorage,nvl(deflength,0),default$,rowid,col#,property, nvl(charsetid,0),nvl(charsetform,0),spare1,spare2,nvl(spare3,0) from col$ where obj#=:1 order by intcol#select name,intcol#,segcol#,type#,length,nvl(precision#,0),decode(type#,2,nvl(scale,-127/*MAXSB1MINAL*/),178,scale,179,scale,180,scale,181,scale,182,scale,183,scale,231,scale,0),null$,fixedstorage,nvl(deflength,0),default$,rowid,col#,property, nvl(charsetid,0),nvl(charsetform,0),spare1,spare2,nvl(spare3,0) from col$ where obj#=:1 order by intcol#UPDATE KET$_AUTOTASK_STATUS     SET ABA_STATE = :1,         ABA_STATE_TIME = :3   WHERE DUMMY_KEY = 99999select name from service$ where lower(network_name) = lower(:1) and deletion_date is nullSELECT PARAM_ID, AUDIT_TRAIL_TYPE#, NUMBER_VALUE, STRING_VALUE  FROM SYS.DAM_CONFIG_PARAM$  WHERE PARAM_ID = 26 AND  (AUDIT_TRAIL_TYPE# = 4 OR AUDIT_TRAIL_TYPE# = 12 OR AUDIT_TRAIL_TYPE# = 15)LOCK TABLE "WRH$_LATCH" PARTITION ("WRH$_LATCH_2827760704_27")  IN EXCLUSIVE MODE  NOWAIT select count(FA#) from SYS_FBA_TRACKEDTABLES where OBJ# = 6326 and bitand(FLAGS, 128)=0select   vector_index, vector from   WRI$_SCH_VOTES where   schedule_id  = :id and   vector_index = :vidxselect local_tran_id, global_tran_fmt, global_oracle_id, global_foreign_id,        state, status, heuristic_dflt,        session_vector, reco_vector, 3600*24*(sysdate-reco_time),        3600*24*(sysdate-nvl(heuristic_time,fail_time)), global_commit#,        type#   from pending_trans$  where session_vector != '00000000'select /*+ FIRST_ROWS(1) PARALLEL("WRH$_SQLSTAT", 1) */ 1 from "SYS"."WRH$_SQLSTAT" PARTITION ("WRH$_SQLSTA_2827760704_27")  where ( (  (  ( "DBID" > 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" >= 52 OR "SNAP_ID" IS NULL  )  )  ) ) and rownum < 2delete from WRH$_LIBRARYCACHE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from WRH$_SGASTAT_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select  THREAD# , STATUS , ENABLED , GROUPS , INSTANCE , OPEN_TIME , CURRENT_GROUP# , SEQUENCE# , CHECKPOINT_CHANGE# , CHECKPOINT_TIME , ENABLE_CHANGE# , ENABLE_TIME , DISABLE_CHANGE# , DISABLE_TIME, LAST_REDO_SEQUENCE#, LAST_REDO_BLOCK, LAST_REDO_CHANGE#, LAST_REDO_TIME from GV$THREAD where inst_id = USERENV('Instance')insert into WRI$_ALERT_HISTORY (sequence_id, reason_id, owner, object_name, subobject_name, reason_argument_1, reason_argument_2, reason_argument_3, reason_argument_4, reason_argument_5, time_suggested, creation_time, action_argument_1, action_argument_2, action_argument_3, action_argument_4, action_argument_5, message_level, hosting_client_id, process_id, host_id, host_nw_addr, instance_name, instance_number, user_id, execution_context_id, error_instance_id, resolution, metric_value) values (:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12, :13, :14, :15, :16, :17, :18, :19, :20, :21, :22, :23, :24, :25, :26, :27, :28, :29)select inst_id, gv.gransize * gx.num_grans from   (select count(*) num_grans from x$ksmge where granstate = 'FREE'   or granstate = 'INVALID' ) gx, x$kmgsct gv where rownum=1delete from WRH$_DISPATCHER tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from WRH$_MTTR_TARGET_ADVICE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from WRH$_WAITSTAT_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) SELECT PROVISIONING_COMPANY_ID FROM WWV_FLOW_COMPANIES ORDER BY SHORT_NAMEupdate WRI$_SCH_CONTROL    set num_votes = :votes,        last_vote = :lvotetm  where schedule_id = :idDELETE FROM RECENT_RESOURCE_INCARNATIONS$ WHERE RESOURCE_TYPE = 'INSTANCE' AND RESOURCE_NAME = :B4 AND DB_UNIQUE_NAME = :B3 AND DB_DOMAIN = NVL(:B2 , '==N/A==') AND STARTUP_TIME < SYS_EXTRACT_UTC(:B1 )SELECT C.CLIENT_ID,         C.OPERATION_ID,         C.STATUS,         NVL(C.ATTRIBUTES, 0),         NVL(C.PRIORITY_OVERRIDE, 0),         C.GENERATOR_JOB_NAME    FROM KET$_CLIENT_CONFIG C   WHERE (C.CLIENT_ID = 0           AND C.OPERATION_ID = 0)      OR (C.CLIENT_ID IN (SELECT CID_KETCL                             FROM X$KETCL X)          AND C.OPERATION_ID = 0)      OR (C.OPERATION_ID != 0           AND C.OPERATION_ID IN (SELECT O.OPID_KETOP                                    FROM X$KETOP O                                  WHERE O.CID_KETOP = C.CLIENT_ID))  ORDER BY 2,1  FOR UPDATE OF C.STATUSdelete from WRH$_LATCH_PARENT_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) SELECT COUNT(*) FROM X$KSPPI A, X$KSPPCV2 B WHERE A.INDX + 1 = KSPFTCTXPN AND KSPPINM = '_deferred_log_dest_is_valid' AND UPPER(KSPFTCTXVL)='TRUE'select min(next_date) from "SYS"."AQ$_ALERT_QT_T"delete from WRM$_DATABASE_INSTANCE dbinst where dbinst.dbid = :dbid   and NOT EXISTS       (select 1 from WRM$_SNAPSHOT snap          where snap.dbid = :dbid            and snap.instance_number = dbinst.instance_number            and snap.startup_time = dbinst.startup_time)   and dbinst.startup_time <       (select max(startup_time)          from WRM$_DATABASE_INSTANCE         where dbid = :dbid           and instance_number = dbinst.instance_number           and startup_time < (cast(SYSTIMESTAMP as TIMESTAMP) -                               :retention))select null from obj$ where obj#=:1 and type#=:2 and obj# not in (select p_obj# from dependency$ where p_obj# = obj$.obj#)delete from tabpart$ where obj# = :1DELETE FROM SYS.SCHEDULER$_EVENT_LOG WHERE DBID IS NULL AND LOG_ID IN (SELECT E.LOG_ID FROM SYS.SCHEDULER$_EVENT_LOG E, SYS.SCHEDULER$_CLASS C WHERE E.TYPE# = 66 AND E.CLASS_ID = C.OBJ#(+) AND (E.FLAGS IS NULL OR BITAND(E.FLAGS, 2)=0) AND OPERATION NOT LIKE 'CHAIN%' AND E.LOG_DATE < :B2 - NUMTODSINTERVAL(NVL(C.LOG_HISTORY, :B1 ), 'DAY'))select name,password,datats#,tempts#,type#,defrole,resource$, ptime, decode(defschclass,NULL,'DEFAULT_CONSUMER_GROUP',defschclass),spare1,spare4,ext_username,spare2 from user$ where user#=:1call WWV_FLOW_MAINT.DAILY_MAINTENANCE (  )select /*+ FIRST_ROWS(1) PARALLEL("WRH$_SYSTEM_EVENT", 1) */ 1 from "SYS"."WRH$_SYSTEM_EVENT" PARTITION ("WRH$_SYSTEM_2827760704_27")  where ( (  (  ( "DBID" < 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" < 52 )  )  ) ) and rownum < 2select count(*) from resource_group_mapping$ where attribute = :1 and status = 'ACTIVE'delete from sys.wri$_optstat_opr                                             where nvl(:1, start_time) <= start_time                                        and start_time < nvl(:2, start_time+1)                                       and rownum <= NVL(:3, rownum)select ownername,classname,methodname,signature,flags from procedurejava$ where obj#=:1 and procedure#=:2 order by procedure#select intcol#, col# , type#, spare1, segcol#, charsetform from partcol$  where obj# = :1 order by pos#select intcol#, col# , type#, spare1, segcol#, charsetform from partcol$  where obj# = :1 order by pos#select box_id, value from rule_set_iot$ where rs_obj# = :1 and ec_obj# = :2  and rule_id = :3 and rule_or_piece = :4 and rop_id <> :5 order by rop_idSELECT COUNT(DISTINCT(batch#)) FROM sqllog$LOCK TABLE RECENT_RESOURCE_INCARNATIONS$ IN EXCLUSIVE MODEselect procedure#,ownerlength,classlength,methodlength,siglength, flagslength,cookiesize from procedurejava$ where obj#=:1 order by procedure#select p_obj#, flags, code, audit$ from edition$ where obj#=:1select /*+ FIRST_ROWS(1) PARALLEL("WRH$_DB_CACHE_ADVICE", 1) */ 1 from "SYS"."WRH$_DB_CACHE_ADVICE" PARTITION ("WRH$_DB_CAC_2827760704_27")  where ( (  (  ( "DBID" < 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" < 52 )  )  ) ) and rownum < 2insert into WRM$_DATABASE_INSTANCE   (dbid, instance_number, startup_time, parallel,    version, db_name, instance_name, host_name, last_ash_sample_id,    platform_name )  values   (:dbid, :instance_number, :startup_time, :parallel,    :version, :db_name, :instance_name, :host_name, 0,    :platform_name )SELECT INCARNATION#, RESETLOGS_CHANGE#, RESETLOGS_TIME, PRIOR_RESETLOGS_CHANGE#, PRIOR_RESETLOGS_TIME, STATUS, RESETLOGS_ID, PRIOR_INCARNATION# FROM V$DATABASE_INCARNATION WHERE STATUS <> 'ORPHAN' ORDER BY RESETLOGS_CHANGE# DESC                                       merge /*+ dynamic_sampling(mm 4) dynamic_sampling_est_cdn(mm)                           dynamic_sampling(m 4) dynamic_sampling_est_cdn(m) */                    into mon_mods_all$ mm                                                       using                                                                         (select                                                                          decode(grouping_id(tp.bo#,m.obj#),1,tp.bo#,m.obj#) obj#,                      sum(m.inserts) inserts, sum(m.updates) updates, sum(m.deletes) deletes,       case when grouping_id(tp.bo#, m.obj#) = 0 then                                (/* IF THIS IS A PARTITION AGGREGATE THE TRUNCATE BIT */                       decode(sum(bitand(m.flags,1)),0,0,1)                                          +decode(sum(bitand(m.flags,2)),0,0,2)                                         +decode(sum(bitand(m.flags,4)),0,0,4)                                         /* ADD NEW KSXM BITdelete from ind_stats$ where obj#=:1SELECT 1 from "SYS"."AQ$SCHEDULER$_EVENT_QTAB" qtview  WHERE (queue = 'SYS.AQ$_SCHEDULER$_EVENT_QTAB_E' ) AND rownum < 2UPDATE DBMS_LOCK_ALLOCATED SET EXPIRATION = SYSDATE + (:B1 /86400) WHERE ROWID = :B2 select inst_id, tablespace_name, segment_file, segment_block, extent_size, current_users, total_extents, total_blocks, used_extents, used_blocks, free_extents, free_blocks, added_extents, extent_hits, freed_extents, free_requests, max_size, max_blocks, max_used_size, max_used_blocks, max_sort_size, max_sort_blocks, relative_fno from x$ktstssdselect max_iops, max_mbps, max_pmbps, latency, num_disks  from resource_io_calibrate$delete from WRH$_SYS_TIME_MODEL_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select TOTAL from SYS.ID_GENS$select null from sys.optstat_hist_control$ where sval2 >= :1  and sname = 'SKIP_TIME'select blocksize from ts$ where name = :tsnamedelete from WRH$_SYSMETRIC_HISTORY tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select /*+ FIRST_ROWS(1) PARALLEL("WRH$_TABLESPACE_STAT", 1) */ 1 from "SYS"."WRH$_TABLESPACE_STAT" PARTITION ("WRH$_TABLES_2827760704_27")  where ( (  (  ( "DBID" < 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" < 52 )  )  ) ) and rownum < 2delete from wrm$_wr_usage tab   where usage_time <=    (select nvl(max(last_sample_date), sysdate-7)       from wri$_dbu_usage_sample)SELECT PARAM_ID, AUDIT_TRAIL_TYPE#, NUMBER_VALUE, STRING_VALUE  FROM SYS.DAM_CONFIG_PARAM$  WHERE PARAM_ID = 16 AND  (AUDIT_TRAIL_TYPE# = 8 OR AUDIT_TRAIL_TYPE# = 12 OR AUDIT_TRAIL_TYPE# = 15)delete from WRH$_BG_EVENT_SUMMARY tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select SUM(data_length) from all_tab_columns where table_name = 'EMPLOYEES'select min(next_date) from "SYS"."AQ$_SYS$SERVICE_METRICS_TAB_T"BEGIN  dbms_ha_alerts_prvt.clear_instance_resources(   :dbdomain, :dbuniquename, :instance_name, :event_time);END;DELETE FROM SYS.SCHEDULER$_JOB_RUN_DETAILS WHERE LOG_ID IN (SELECT E.LOG_ID FROM SYS.SCHEDULER$_EVENT_LOG E, SYS.SCHEDULER$_CLASS C WHERE E.TYPE# = 66 AND E.CLASS_ID = C.OBJ#(+) AND (E.FLAGS IS NULL OR BITAND(E.FLAGS, 2)=0) AND OPERATION NOT LIKE 'CHAIN%' AND E.LOG_DATE < :B2 - NUMTODSINTERVAL(NVL(C.LOG_HISTORY, :B1 ), 'DAY'))select round(used.bytes /1024/1024 ,2) used_mb , round(free.bytes /1024/1024 ,2) free_mb , round(tot.bytes /1024/1024 ,2) total_mb from (select sum(bytes) bytes from v$sgastat where name != 'free memory') used , (select sum(bytes) bytes from v$sgastat where name = 'free memory') free , (select sum(bytes) bytes from v$sgastat) totselect /*+ connect_by_filtering */ privilege#,level from sysauth$ connect by grantee#=prior privilege# and privilege#>0 start with grantee#=:1 and privilege#>0SELECT 1  FROM sys.snap_reftime$ r, sys.snap$ s, sys.obj$ o, sys.user$ u  WHERE r.vname=s.vname AND r.sowner=s.sowner AND o.type#=42 AND        o.name=s.vname AND o.owner#= u.user# AND s.sowner=u.name AND        r.masobj# = :1begin dbms_utility.validate(:bind1, :bind2, :bind3); end;delete from WRH$_MEM_DYNAMIC_COMP tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select obj#,type#,ctime,mtime,stime, status, dataobj#, flags, oid$, spare1, spare2 from obj$ where owner#=:1 and name=:2 and namespace=:3 and remoteowner is null and linkname is null and subname is null                                        merge /*+ dynamic_sampling(mm 4) dynamic_sampling_est_cdn(mm)                           dynamic_sampling(m 4) dynamic_sampling_est_cdn(m) */                    into sys.mon_mods_all$ mm                                                   using                                                                         (select                                                                         m.obj# obj#,                                                                  m.inserts inserts, m.updates updates, m.deletes deletes,                      m.flags flags, m.timestamp timestamp, m.drop_segments drop_segments         from sys.mon_mods$ m, tab$ t                                                  where m.obj# = t.obj#                                                         ) v on (mm.obj# = v.obj#)                                                     when matched then                                                               update              select /*+ index(idl_char$ i_idl_char1) +*/ piece#,length,piece from idl_char$ where obj#=:1 and part=:2 and version=:3 order by piece#select /*+ index(idl_char$ i_idl_char1) +*/ piece#,length,piece from idl_char$ where obj#=:1 and part=:2 and version=:3 order by piece#delete from WRH$_IOSTAT_FILETYPE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id))                                      delete /*+ dynamic_sampling(m 4) dynamic_sampling_est_cdn(m) */                 from sys.mon_mods$ m                                                          where exists                                                                  (select /*+ unnest */ * from sys.tabcompart$ t where t.obj# = m.obj#)update wrm$_snapshot set status = 0,      flush_elapsed =         greatest((cast(SYSDATE as TIMESTAMP) - end_interval_time),                 interval '00.10' second)  where snap_id = :snap_id and dbid = :dbid and      instance_number = :instance_numberselect num_rows FROM dba_tables where table_name = 'Y'delete from WRI$_ALERT_THRESHOLD_LOG where sequence_id = :1select a.default_selectivity                             from association$ a                                      where a.obj# = :1                                          and a.property = :2delete from WRH$_MVPARAMETER_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) insert into sys.scheduler$_job_run_details  (log_id, log_date, req_start_date, start_date, run_duration,   instance_id, session_id, slave_pid, cpu_used, error#, additional_info)   values  (:1, SYSTIMESTAMP, :2, :3, :4, :5, :6, :7,   numtodsinterval(:8/100, 'second'), :9, :10)select /*+ FIRST_ROWS(1) PARALLEL("WRH$_SYS_TIME_MODEL", 1) */ 1 from "SYS"."WRH$_SYS_TIME_MODEL" PARTITION ("WRH$_SYS_TI_2827760704_27")  where ( (  (  ( "DBID" > 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" >= 52 OR "SNAP_ID" IS NULL  )  )  ) ) and rownum < 2select sum(used_blocks), ts.ts#   from GV$SORT_SEGMENT gv, ts$ ts   where gv.tablespace_name = ts.name and   ts.bitmapped  <> 0   group by ts.ts#select o.obj#, u.name, o.name, ti.parent_obj#, ti.parent_ptn_obj#    from sys.obj$ o, sys.user$ u, sys.transient_iot$ ti    where o.obj# = ti.obj# and o.owner# = u.user#SELECT NVL(SUM(D.BLOCKS), 0) FROM X$KEWX_SEGMENTS D, (SELECT DISTINCT O1.SEGMENT_NAME NAME FROM X$KEWX_SEGMENTS O1 WHERE O1.SEGMENT_NAME LIKE 'LOGSTDBY$%' UNION ALL SELECT DISTINCT O2.LOB_NAME NAME FROM X$KEWX_LOBS O2 WHERE O2.TABLE_NAME LIKE 'LOGSTDBY$%') S WHERE (D.OWNER = 'SYSTEM') AND (D.SEGMENT_NAME = S.NAME)delete from WRH$_EVENT_HISTOGRAM_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select 1 from WRH$_INST_CACHE_TRANSFER where dbid     = :dbid   and :bind1  <= snap_id   and snap_id  < :bind2   and rownum  <= 1LOCK TABLE "WRH$_FILESTATXS" PARTITION ("WRH$_FILEST_2827760704_27")  IN EXCLUSIVE MODE  NOWAIT select obj#,type#,ctime,mtime,stime, status, dataobj#, flags, oid$, spare1, spare2 from obj$ where owner#=:1 and name=:2 and namespace=:3 and remoteowner is null and linkname is null and subname = :4select i.obj#,i.ts#,i.file#,i.block#,i.intcols,i.type#,i.flags, i.property,i.pctfree$,i.initrans,i.maxtrans,i.blevel,i.leafcnt,i.distkey, i.lblkkey,i.dblkkey,i.clufac,i.cols,i.analyzetime,i.samplesize,i.dataobj#, nvl(i.degree,1),nvl(i.instances,1),i.rowcnt,mod(i.pctthres$,256),i.indmethod#,i.trunccnt,nvl(c.unicols,0),nvl(c.deferrable#+c.valid#,0), nvl(i.spare1,i.intcols),i.spare4,spare2,spare6, decode(i.pctthres$,null,null, mod(trunc(i.pctthres$/256),256)) from ind$ i, (select enabled, min(cols) unicols, min(to_number(bitand(defer,1))) deferrable#, min(to_number(bitand(defer,4))) valid# from cdef$ where obj#=:1 and enabled > 1 group by enabled) c where i.obj#=c.enabled(+) and i.bo#=:1 order by i.obj#select a.default_cpu_cost, a.default_io_cost             from association$ a                                      where a.obj# = :1                                          and a.property = :2delete from WRH$_LOG tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select  FILE# , NAME from GV$DBFILE where inst_id = USERENV('Instance')select object_type, object_name, object_id, opcode, sequence_id from WRI$_ALERT_THRESHOLD_LOG order by sequence_idselect audit$ from library$ where obj#=:1delete from WRH$_LATCH_MISSES_SUMMARY_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select /*+ rule */ bucket, endpoint, col#, epvalue from histgrm$ where obj#=:1 and intcol#=:2 and row#=:3 order by bucketSELECT PARAM_ID, AUDIT_TRAIL_TYPE#, NUMBER_VALUE, STRING_VALUE  FROM SYS.DAM_CONFIG_PARAM$  WHERE PARAM_ID = 16 AND  (AUDIT_TRAIL_TYPE# = 4 OR AUDIT_TRAIL_TYPE# = 12 OR AUDIT_TRAIL_TYPE# = 15)select table_name FROM dba_tables where tablespace_name='BSCHEMA'select inserts, deletes  from   sys.mon_mods_all$  where  obj# = :objnSELECT COUNT(*), SUM(blocks) FROM x$kewx_segments  WHERE owner = 'SYS' AND segment_name like 'SMON_SCN%'select procedure#,entrypoint# from procedureplsql$ where obj#=:1 order by procedure#select TIME_WAITED_MICRO from V$SYSTEM_EVENT  where event = 'Shared IO Pool Memory'select * from v$sql select rt.inst_id,rtnum,decode(bitand(rtsta,1),1,'OPEN','CLOSED'), decode(bitand(rtsta,6),0,'DISABLED',2,'PRIVATE',6,'PUBLIC','UNKNOWN'), rtnlf,tirsid,to_date(rtots,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'), rtcln,rtseq, to_number(rtckp_scn), to_date(rtckp_tim,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'), to_number(rtenb), to_date(rtets,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'), to_number(rtdis), to_date(rtdit,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'), cpodr_seq, cpodr_bno, to_number(cpods), to_date(cpodt,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian') from x$kccrt rt, x$kcctir tr, x$kcccp  where rtnlf != 0 and tr.inst_id = rt.inst_id  and tirnum = rtnum and cptno = rtnumselect owner, segment_name, blocks from dba_segments where tablespace_name = :tsnameselect num_rows FROM dba_tables where table_name = 'T2'select recurrence_expr, max_count, comments, flags, end_date, reference_date, queue_owner, queue_name, queue_agent, fw_name  from sys.scheduler$_schedule  where obj# = :1select count(FA#) from SYS_FBA_TRACKEDTABLES where OBJ# = 6358 and bitand(FLAGS, 128)=0select SUM(column_length) from all_ind_columns where table_name = 'LENTES'select grantee#,privilege#,nvl(col#,0),max(mod(nvl(option$,0),2))from objauth$ where obj#=:1 group by grantee#,privilege#,nvl(col#,0) order by grantee#select grantee#,privilege#,nvl(col#,0),max(mod(nvl(option$,0),2))from objauth$ where obj#=:1 group by grantee#,privilege#,nvl(col#,0) order by grantee#delete from WRH$_PGA_TARGET_ADVICE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select max(FA#) from SYS_FBA_FAselect pname, pval1 from sys.aux_stats$ where sname = 'SYSSTATS_MAIN' and pval1 IS NOT NULLSELECT occupant_name, occupant_desc, schema_name,                 move_procedure, move_procedure_desc, space_usage_kbytes          FROM   gv$sysaux_occupants          WHERE  inst_id = USERENV('INSTANCE')select /*+ FIRST_ROWS(1) PARALLEL("WRH$_WAITSTAT", 1) */ 1 from "SYS"."WRH$_WAITSTAT" PARTITION ("WRH$_WAITST_2827760704_27")  where ( (  (  ( "DBID" < 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" < 52 )  )  ) ) and rownum < 2select nvl(sum(d.blocks), 0)    from x$kewx_segments d,         (select distinct o1.segment_name name from x$kewx_segments o1            where o1.segment_name = 'AUD$' OR o1.segment_name = 'FGA_LOG$'          union all          select distinct o2.lob_name name from x$kewx_lobs o2            where o2.table_name = 'AUD$' OR o2.table_name = 'FGA_LOG$') s    where (d.owner = 'SYS' OR (d.owner = 'SYSTEM' AND d.segment_name <> 'FGA_LOG$'))           and (d.segment_name = s.name)select message_level, sequence_id, time_suggested from WRI$_ALERT_OUTSTANDING where reason_id = :1 and object_id = :2 and subobject_id = :3 and internal_instance_number = :4select message_level, sequence_id, time_suggested from WRI$_ALERT_OUTSTANDING where reason_id = :1 and object_id = :2 and subobject_id = :3 and internal_instance_number = :4select count(*) from dba_tables where tablespace_name='BSCHEMA'select /*+ FIRST_ROWS(1) PARALLEL("WRH$_FILESTATXS", 1) */ 1 from "SYS"."WRH$_FILESTATXS" PARTITION ("WRH$_FILEST_2827760704_27")  where ( (  (  ( "DBID" > 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" >= 52 OR "SNAP_ID" IS NULL  )  )  ) ) and rownum < 2delete from WRH$_BUFFERED_QUEUES tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select 1 from "SYS"."AQ$_SCHEDULER_FILEWATCHER_QT_L"LOCK TABLE "WRH$_SYS_TIME_MODEL" PARTITION ("WRH$_SYS_TI_2827760704_27")  IN EXCLUSIVE MODE  NOWAIT delete from WRH$_PGASTAT tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select  INSTANCE_NUMBER , INSTANCE_NAME , HOST_NAME , VERSION , STARTUP_TIME , STATUS , PARALLEL , THREAD# , ARCHIVER , LOG_SWITCH_WAIT , LOGINS , SHUTDOWN_PENDING, DATABASE_STATUS, INSTANCE_ROLE, ACTIVE_STATE, BLOCKED, EDITION from GV$INSTANCE where inst_id = USERENV('Instance')select /*+ FIRST_ROWS(1) PARALLEL("WRH$_OSSTAT", 1) */ 1 from "SYS"."WRH$_OSSTAT" PARTITION ("WRH$_OSSTAT_2827760704_27")  where ( (  (  ( "DBID" > 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" >= 52 OR "SNAP_ID" IS NULL  )  )  ) ) and rownum < 2select SUM(data_length) from all_tab_columns where table_name = 'LOCATIONS'select inst_id,-kzsprprv from x$kzsprSELECT DISTINCT OID FROM SYS.RECO_SCRIPT_BLOCK$ WHERE STATUS IN (:B3 , :B2 ) AND (SYSDATE -CTIME) >= :B1 select  SQL_TEXT , SQL_FULLTEXT , SQL_ID,  SHARABLE_MEM , PERSISTENT_MEM , RUNTIME_MEM , SORTS , LOADED_VERSIONS , OPEN_VERSIONS , USERS_OPENING , FETCHES , EXECUTIONS , PX_SERVERS_EXECUTIONS , END_OF_FETCH_COUNT, USERS_EXECUTING , LOADS , FIRST_LOAD_TIME, INVALIDATIONS, PARSE_CALLS , DISK_READS , DIRECT_WRITES , BUFFER_GETS , APPLICATION_WAIT_TIME, CONCURRENCY_WAIT_TIME, CLUSTER_WAIT_TIME, USER_IO_WAIT_TIME, PLSQL_EXEC_TIME, JAVA_EXEC_TIME, ROWS_PROCESSED , COMMAND_TYPE , OPTIMIZER_MODE , OPTIMIZER_COST, OPTIMIZER_ENV, OPTIMIZER_ENV_HASH_VALUE, PARSING_USER_ID , PARSING_SCHEMA_ID , PARSING_SCHEMA_NAME, KEPT_VERSIONS , ADDRESS , TYPE_CHK_HEAP , HASH_VALUE, OLD_HASH_VALUE, PLAN_HASH_VALUE, CHILD_NUMBER, SERVICE, SERVICE_HASH, MODULE, MODULE_HASH , ACTION , ACTION_HASH ,  SERIALIZABLE_ABORTS , OUTLINE_CATEGORY, CPU_TIME, ELAPSED_TIME, OUTLINE_SID, CHILD_ADDRESS, SQLTYPE, REMOTE, OBJECT_STATUS, LITERAL_HASH_VALUE, LAST_LOAD_TIME, IS_OBSOLETE, IS_BIND_SENSITIVE, IS_BIND_AWARE, IS_SHAREABLEselect /*+ FIRST_ROWS(1) PARALLEL("WRH$_PARAMETER", 1) */ 1 from "SYS"."WRH$_PARAMETER" PARTITION ("WRH$_PARAME_2827760704_27")  where ( (  (  ( "DBID" > 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" >= 52 OR "SNAP_ID" IS NULL  )  )  ) ) and rownum < 2select value$ from sys.props$ where name = :1select value$ from sys.props$ where name = :1select value$ from sys.props$ where name = :1select value$ from sys.props$ where name = :1select job, nvl2(last_date, 1, 0) from sys.job$ where (((:1 <= next_date) and (next_date <= :2))    or  ((last_date is null) and (next_date < :3))) and (field1 = :4 or (field1 = 0 and 'Y' = :5)) and (this_date is null) and ((dbms_logstdby.db_is_logstdby = 0 and job < 1000000000) or  (dbms_logstdby.db_is_logstdby = 1 and job >= 1000000000)) order by next_date, jobinsert into wrh$_seg_stat   (snap_id, dbid, instance_number, ts#, obj#, dataobj#, logical_reads_total,    logical_reads_delta, buffer_busy_waits_total, buffer_busy_waits_delta,    db_block_changes_total, db_block_changes_delta, physical_reads_total,    physical_reads_delta, physical_writes_total, physical_writes_delta,    physical_reads_direct_total, physical_reads_direct_delta,    physical_writes_direct_total, physical_writes_direct_delta,    itl_waits_total, itl_waits_delta,    row_lock_waits_total, row_lock_waits_delta,    gc_buffer_busy_total, gc_buffer_busy_delta,    gc_cr_blocks_received_total, gc_cr_blocks_received_delta,    gc_cu_blocks_received_total, gc_cu_blocks_received_delta,    space_used_total, space_used_delta,    space_allocated_total, space_allocated_delta,    table_scans_total, table_scans_delta,    chain_row_excess_total, chain_row_excess_delta,    physical_read_requests_total, physical_read_requests_delta,    physical_write_requests_total, physical_write_requests_ddelete from WRH$_TABLESPACE_STAT_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select num_rows FROM dba_tables where table_name = 'REGIONS'delete from histgrm$ where obj# = :1select increment$,minvalue,maxvalue,cycle#,order$,cache,highwater,audit$,flags from seq$ where obj#=:1select ROWID from SYS_FBA_PARTITIONS where ROWNUM = 1begin    sys.dbms_aq_inv.internal_purge_queue_table(:1, :2, :3, :4, :5, :6, :7, :8); end;select o.owner#,o.obj#,decode(o.linkname,null,decode(u.name,null,'SYS',u.name),o.remoteowner),o.name,o.linkname,o.namespace,o.subname,o.type# from user$ u, obj$ o where u.user#(+)=o.owner# and o.type#=:1 and not exists (select p_obj# from dependency$ where p_obj# = o.obj#)insert into wrm$_snapshot_details     (snap_id, dbid, instance_number, table_id, begin_time, end_time)      values (:snap_id, :dbid, :instance_number, :bind1, :bind2, :bind3)delete from WRH$_SYSSTAT_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from superobj$ where subobj# = :1delete from superobj$ where subobj# = :1BEGIN    prvt_advisor.recover_stale_tasks;  END;delete from WRH$_WAITCLASSMETRIC_HISTORY tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select count(FA#) from SYS_FBA_TRACKEDTABLES where OBJ# = 6289 and bitand(FLAGS, 128)=0select WRM$_DEEP_PURGE_INTERVAL.nextval into :bind1 from dualdelete from sys.wri$_optstat_aux_history                                     where nvl(:1, savtime) <= savtime and savtime < nvl(:2, savtime+1)             and rownum <= NVL(:3, rownum)SELECT LOCKID FROM DBMS_LOCK_ALLOCATED WHERE NAME = :B1 FOR UPDATEdelete from sys.wri$_optstat_ind_history h                                   where nvl(:1, savtime) <= savtime and savtime < nvl(:2, savtime+1)             and (:3 is null or                                                                exists (select 1 from ind$ i                                                         where (i.bo# = :3 and i.obj#=h.obj#)))                          and rownum <= NVL(:4, rownum)delete from WRH$_SGA_TARGET_ADVICE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select decode(u.type#, 2, u.ext_username, u.name), o.name,        t.update$, t.insert$, t.delete$, t.enabled,        decode(bitand(t.property, 8192),8192, 1, 0),        decode(bitand(t.property, 65536), 65536, 1, 0),       decode(bitand(t.property, 131072), 131072, 1, 0),       (select o.name from obj$ o          where o.obj# = u.spare2 and o.type# =57)  from sys.obj$ o, sys.user$ u, sys.trigger$ t, sys.obj$ bo where t.baseobject=bo.obj# and bo.name = :1 and bo.spare3 = :2  and bo.namespace = 1  and t.obj#=o.obj# and o.owner#=u.user#  and o.type# = 12 and bitand(property,16)=0 and bitand(property,8)=0  order by o.obj#select srchcols, tab_id from rule_set_te$ where rs_obj# = :1 and  ec_obj# = :2select regid, regflags, numobjs, objarray, plsqlcallback, changelag,  username  from invalidation_registry$       begin          :cmp_min := dbms_backup_restore.protocol_component_number_min;           :cmp_max := dbms_backup_restore.protocol_component_number_max;           :pkg_vsn := to_char(:vsn_max, 'fm00')||'.'||                      to_char(:rel_max, 'fm00')||'.'||                      to_char(:upd_max, 'fm00')||'.'||                      to_char(:cmp_max, 'fm00');             end;SELECT count(*), sum(blocks) FROM dba_segments where    OWNER = 'XDB' and TABLESPACE_NAME = 'SYSAUX'begin dbms_stats.copy_table_stats('SYS', :bind1, :bind2, :bind3, flags=>1, force=>TRUE); end; select u.name, o.name, t.attributes  from sys.type$ t, sys.user$ u, sys.obj$ o   where  o.owner# = u.user#  AND  t.toid = o.oid$   and t.toid = :1 and t.version# = :2 delete from WRH$_CR_BLOCK_SERVER tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select /*+ FIRST_ROWS(1) PARALLEL("WRH$_SQLSTAT", 1) */ 1 from "SYS"."WRH$_SQLSTAT" PARTITION ("WRH$_SQLSTA_2827760704_27")  where ( (  (  ( "DBID" < 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" < 52 )  )  ) ) and rownum < 2select dbid, open_time, parallel, version, name, instance_name,host_name, platform_name     from V$DATABASE, V$INSTANCE, V$THREAD where open_time =  (select min(open_time) from V$THREAD where instance = instance_name)select smontabv.cnt, smontab.time_mp,    smontab.scn, smontab.num_mappings, smontab.tim_scn_map    from smon_scn_time smontab,         (select max(scn) scnmax,                 count(*)+sum(NVL2(TIM_SCN_MAP,NUM_MAPPINGS,0)) cnt                 from smon_scn_time) smontabv   where smontab.scn = smontabv.scnmaxselect user# from sys.user$ where name = :1SELECT C.CID_KETCL, W.NUMBER_OF_WINDOWS + 1      FROM X$KETCL C, DBA_SCHEDULER_WINGROUP_MEMBERS WGM,           DBA_SCHEDULER_WINDOW_GROUPS W     WHERE C.WGRP_KETCL = WGM.WINDOW_GROUP_NAME       AND C.WGRP_KETCL = W.WINDOW_GROUP_NAME       AND WGM.WINDOW_NAME = :1     ORDER BY 1select text from view$ where rowid=:1select text from view$ where rowid=:1select timestamp, obj# from fixed_obj$ order by obj#select obj#, dataobj#, part#, hiboundlen, hiboundval, flags, ts#, file#, block#, pctfree$, initrans, maxtrans, analyzetime, samplesize, rowcnt, blevel, leafcnt, distkey, lblkkey, dblkkey, clufac, pctthres$, length(bhiboundval), bhiboundval from indpart$ where bo# = :1 order by part#select obj#, dataobj#, part#, hiboundlen, hiboundval, flags, ts#, file#, block#, pctfree$, initrans, maxtrans, analyzetime, samplesize, rowcnt, blevel, leafcnt, distkey, lblkkey, dblkkey, clufac, pctthres$, length(bhiboundval), bhiboundval from indpart$ where bo# = :1 order by part#select /*+ FIRST_ROWS(1) PARALLEL("WRH$_LATCH", 1) */ 1 from "SYS"."WRH$_LATCH" PARTITION ("WRH$_LATCH_2827760704_27")  where ( (  (  ( "DBID" < 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" < 52 )  )  ) ) and rownum < 2select template_id, template_type, baseline_name_prefix,        start_time, end_time, day_of_week,        hour_in_day, duration, expiration,        repeat_interval, last_generated,        template_name   from WRM$_BASELINE_TEMPLATE  where dbid = :dbid insert into tabpart$ (obj#, dataobj#, bo#, part#, hiboundlen, hiboundval, ts#, file#, block#, pctfree$, pctused$, initrans, maxtrans, flags, analyzetime, samplesize, rowcnt, blkcnt, empcnt, avgspc, chncnt, avgrln, bhiboundval) values (:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12, :13, :14, :15, :16, :17, :18, :19, :20, :21, :22, EMPTY_BLOB()) returning bhiboundval into :23select /*+ FIRST_ROWS(1) PARALLEL("WRH$_ROWCACHE_SUMMARY", 1) */ 1 from "SYS"."WRH$_ROWCACHE_SUMMARY" PARTITION ("WRH$_ROWCAC_2827760704_27")  where ( (  (  ( "DBID" > 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" >= 52 OR "SNAP_ID" IS NULL  )  )  ) ) and rownum < 2select a.next_start_date, a.objid, a.w_open from  (select b.obj# objid,          decode(bitand(b.flags, 64), 0, b.next_start_date,                 b.manual_open_time) next_start_date,          decode(bitand(b.flags, 66), 0, 0, 2, 1, 2) w_open  from sys.scheduler$_window b   where bitand(b.flags, 1) <> 0   order by 2) a  where rownum = 1select count(*) from sys.scheduler$_wingrp_member   where oid = :1 and member_oid = :2SELECT PARAM_ID, AUDIT_TRAIL_TYPE#, NUMBER_VALUE, STRING_VALUE  FROM SYS.DAM_CONFIG_PARAM$  WHERE PARAM_ID = 17 AND  (AUDIT_TRAIL_TYPE# = 8 OR AUDIT_TRAIL_TYPE# = 12 OR AUDIT_TRAIL_TYPE# = 15)delete from WRH$_INSTANCE_RECOVERY tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from WRH$_DYN_REMASTER_STATS tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select rowid, condition, ectx#, r_action, property, uactx_client from rule$  where obj# = :1select o.name from obj$ o where o.type# = 9 and bitand(o.flags, 2048) = 2048 and o.name like 'SYSFN%' and (sysdate-o.ctime) > 0.0007select attribute, value, pool_name from resource_storage_pool_mapping$ where status = 'ACTIVE'select user#,password,datats#,tempts#,type#,defrole,resource$, ptime,decode(defschclass,NULL,'DEFAULT_CONSUMER_GROUP',defschclass),spare1,spare4,ext_username,spare2 from user$ where name=:1update hist_head$ set obj# = decode(obj#,:1,:2) WHERE obj# in (:1) SELECT /* OPT_DYN_SAMP */ /*+ ALL_ROWS IGNORE_WHERE_CLAUSE NO_PARALLEL(SAMPLESUB) opt_param('parallel_execution_enabled', 'false') NO_PARALLEL_INDEX(SAMPLESUB) NO_SQL_TUNE */ NVL(SUM(C1),0), NVL(SUM(C2),0) FROM (SELECT /*+ NO_PARALLEL("MM") FULL("MM") NO_PARALLEL_INDEX("MM") */ 1 AS C1, 1 AS C2 FROM "SYS"."MON_MODS_ALL$" "MM") SAMPLESUBLOCK TABLE "WRH$_SYSTEM_EVENT" PARTITION ("WRH$_SYSTEM_2827760704_27")  IN EXCLUSIVE MODE  NOWAIT select nvl(sum(space),0) from recyclebin$ where ts# = :1select /*+ index(idl_sb4$ i_idl_sb41) +*/ piece#,length,piece from idl_sb4$ where obj#=:1 and part=:2 and version=:3 order by piece#select /*+ index(idl_sb4$ i_idl_sb41) +*/ piece#,length,piece from idl_sb4$ where obj#=:1 and part=:2 and version=:3 order by piece#SELECT /*+ leading(u) use_nl_with_index(o) */ O.OBJ# FROM SYS.USER$ U, SYS.OBJ$ O WHERE U.NAME = :B3 AND O.OWNER# = U.USER# AND O.NAME = :B2 AND O.NAMESPACE = 1 AND O.REMOTEOWNER IS NULL AND O.LINKNAME IS NULL AND (O.SUBNAME IS NULL AND :B1 IS NULL OR O.SUBNAME = :B1 ) AND O.TYPE# IN (2,19,34)delete from WRH$_PARAMETER_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select res_plan, next_start_date, duration, schedule_expr, flags, comments,       end_date, start_date, unused_slave_policy, creator, max_slave_percent,      min_slave_percent, schedule_id, priority, max_conc_jobs,       last_start_date, actual_start_date,       manual_open_time, manual_duration from sys.scheduler$_window  where obj# = :1select t.schema, t.name, t.objno, t.flags, t.timezone from  system.aq$_queue_tables t, sys.aq$_queue_table_affinities aft  where aft.table_objno = t.objno and aft.owner_instance = :1        and bitand(t.flags, 4+16+32+64+128+256) = 0        and NOT        ( t.name in ('DEF$_AQCALL' , 'DEF$_AQERROR') and t.schema = 'SYSTEM')        and exists (select 1 from system.aq$_queues q where                q.table_objno = t.objno and q.usage = 0)select res_grp_name, affinity, flags, comments, default_priority,  log_history  from sys.scheduler$_class  where obj# = :1select value$ from props$ where name = 'GLOBAL_DB_NAME'select owner#,name,namespace,remoteowner,linkname,p_timestamp,p_obj#, nvl(property,0),subname,type#,d_attrs from dependency$ d, obj$ o where d_obj#=:1 and p_obj#=obj#(+) order by order#select owner#,name,namespace,remoteowner,linkname,p_timestamp,p_obj#, nvl(property,0),subname,type#,d_attrs from dependency$ d, obj$ o where d_obj#=:1 and p_obj#=obj#(+) order by order#select ks.inst_id,ksuxsins,ksuxssid,ksuxshst,ksuxsver,ksuxstim,decode(ksuxssts,0,'STARTED',1,'MOUNTED',2,'OPEN',3,'OPEN MIGRATE','UNKNOWN'),decode(ksuxsshr,0,'NO',1,'YES',2,NULL),ksuxsthr,decode(ksuxsarc,0,'STOPPED',1,'STARTED','FAILED'),decode(ksuxslsw,0,NULL,2,'ARCHIVE LOG',3,'CLEAR LOG',4,'CHECKPOINT',       5,'REDO GENERATION'),decode(ksuxsdba,0,'ALLOWED','RESTRICTED'),decode(ksuxsshp,0,'NO','YES'),decode(kvitval,0,'ACTIVE',2147483647,'SUSPENDED','INSTANCE RECOVERY'),decode(ksuxsrol,1,'PRIMARY_INSTANCE',2,'SECONDARY_INSTANCE','UNKNOWN'), decode(qui_state,0,'NORMAL',1,'QUIESCING',2,'QUIESCED','UNKNOWN'), decode(bitand(ksuxsdst, 1), 0, 'NO', 1, 'YES', 'NO'), decode(ksuxsedition, 1, 'PO', 2, 'SE', 4, 'EE', 8, 'XE', 'UNKNOWN') from x$ksuxsinst ks, x$kvit kv, x$quiesce qu where kvittag = 'kcbwst'SELECT DBID FROM V$DATABASEupdate diana_version$ set flags = flags + 1  where  obj# = :1 and bitand(flags, 1) = 0delete from WRH$_DB_CACHE_ADVICE_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from seg$ where ts#=:1 and file#=:2 and block#=:3delete from indpart$ where obj#=:1select table_objno, primary_instance, secondary_instance, owner_instance from sys.aq$_queue_table_affinities a  where  a.owner_instance <> :1 and dbms_aqadm_syscalls.get_owner_instance(a.primary_instance,       a.secondary_instance,       a.owner_instance) = :2  order by table_objnoupdate ind$ set ts#=:2,file#=:3,block#=:4,intcols=:5,type#=:6,flags=:7,property=:8,pctfree$=:9,initrans=:10,maxtrans=:11,blevel=:12,leafcnt=:13,distkey=:14,lblkkey=:15,dblkkey=:16,clufac=:17,cols=:18,analyzetime=:19,samplesize=:20,dataobj#=:21,degree=decode(:22,1,null,:22),instances=decode(:23,1,null,:23),rowcnt=:24,pctthres$=:31*256+:25, indmethod#=:26, trunccnt=:27,spare4=:29,spare2=:30,spare6=:32where obj#=:1select /*+ FIRST_ROWS(1) PARALLEL("WRH$_FILESTATXS", 1) */ 1 from "SYS"."WRH$_FILESTATXS" PARTITION ("WRH$_FILEST_2827760704_27")  where ( (  (  ( "DBID" < 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" < 52 )  )  ) ) and rownum < 2select cpu_capable, io_capable from resource_capability$ where status = 'ACTIVE'select nvl(sum(blocks), 0) from x$kewx_segments where owner = :ownerdelete from tab_stats$ where obj#=:1delete from tab_stats$ where obj#=:1select t_metrics_id, t_instance_name from WRI$_ALERT_THRESHOLD where t_object_type = :1 and t_object_name = :2 and t_flags != :3 for updateselect /*+ FIRST_ROWS(1) */ x.C1, x.C2, x.C3 from  (select a.obj# C1,          decode(bitand(a.flags, 64), 0, a.next_start_date,                 a.manual_open_time) C2,          decode(bitand(a.flags, 64), 0, a.duration, a.manual_duration) C3,          decode(bitand(a.flags, 64), 0, a.priority, 0) C4   from sys.scheduler$_window a   where bitand(a.flags, 1) = 1     and (a.next_start_date >= systimestamp or bitand(a.flags, 2) <> 0 or          bitand(a.flags, 64) <> 0)     and a.obj# in (select b.member_oid from sys.scheduler$_wingrp_member b                    where b.oid = :1)) x  order by x.C2, x.C4, x.C3 DESCSELECT ID FROM WWV_FLOW_MAIL_QUEUE select audit$,properties from type_misc$ where obj#=:1select audit$,properties from type_misc$ where obj#=:1DELETE FROM SYS.SCHEDULER$_EVENT_LOG WHERE DBID IS NULL AND LOG_ID IN (SELECT E.LOG_ID FROM SYS.SCHEDULER$_EVENT_LOG E WHERE E.TYPE# = 69 AND E.LOG_DATE < :B2 - NUMTODSINTERVAL(:B1 , 'DAY'))select inserts, deletes  from   sys.mon_mods$  where  obj# = :objnSELECT USER FROM DUALselect inst_id,ksullms,ksullws,ksullcs,ksullhs,ksullmu,cpu_count, decode(cpu_core_count,0,to_number(null),cpu_core_count), decode(cpu_socket_count,0,to_number(null),cpu_socket_count), cpu_count_hwm, decode(cpu_core_count_hwm,0,to_number(null),cpu_core_count_hwm), decode(cpu_socket_count_hwm,0,to_number(null),cpu_socket_count_hwm) from x$ksullselect sql_text from v$sql SELECT SPARE4 FROM SYS.OPTSTAT_HIST_CONTROL$ WHERE SNAME = :B1 SELECT SPARE4 FROM SYS.OPTSTAT_HIST_CONTROL$ WHERE SNAME = :B1 select num_rows FROM dba_tables where table_name = 'EMPLOYEES'LOCK TABLE "WRH$_SGASTAT" PARTITION ("WRH$_SGASTA_2827760704_27")  IN EXCLUSIVE MODE  NOWAIT delete from WRH$_UNDOSTAT tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from WRH$_PROCESS_MEMORY_SUMMARY tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select sval1 from sys.optstat_hist_control$ where sname = 'STATS_RETENTION'select OBJOID, RETRYCNT, FLAGS, STATUS, ISLW, PARNT, JDESTID FROM (  select a.obj# OBJOID, a.retry_count RETRYCNT,     a.job_status STATUS, a.flags FLAGS, a.running_instance RUNINST,     0 ISLW, 0 PARNT, a.job_dest_id JDESTID  from sys.scheduler$_job a  union all  select b.obj#, b.retry_count, b.job_status, b.flags, b.running_instance, 1,    decode(bitand(b.flags, 137438953472), 0, 0, b.program_oid), b.job_dest_id  from sys.scheduler$_lightweight_job b )  where bitand(STATUS, 2) = 2   and ( RUNINST = :1  or ( RUNINST is not null            and  RUNINST not in (select inst_id from gv$instance)))SELECT TASK_ID FROM SYS.DBA_ADVISOR_TASKS WHERE STATUS# = :B1       begin          dbms_rcvman.resetAll;       end;select audit$,options from procedure$ where obj#=:1select audit$,options from procedure$ where obj#=:1select o.owner#,o.name,o.namespace,o.remoteowner,o.linkname,o.subname from obj$ o where o.obj#=:1select o.owner#,o.name,o.namespace,o.remoteowner,o.linkname,o.subname from obj$ o where o.obj#=:1LOCK TABLE "WRH$_SERVICE_STAT" PARTITION ("WRH$_SERVIC_2827760704_27")  IN EXCLUSIVE MODE  NOWAIT select 1 from dual where exists (select 1 from system.repcat$_repprop prop  where prop.type in (-1,2,9,-4) and prop.how in (1,3))select  NUM , NAME , TYPE , VALUE , DISPLAY_VALUE, ISDEFAULT , ISSES_MODIFIABLE , ISSYS_MODIFIABLE , ISINSTANCE_MODIFIABLE, ISMODIFIED , ISADJUSTED , ISDEPRECATED, ISBASIC, DESCRIPTION, UPDATE_COMMENT, HASH  from GV$PARAMETER where inst_id = USERENV('Instance')select unique name from resource_consumer_group$ where status='ACTIVE'select /*+ FIRST_ROWS(1) PARALLEL("WRH$_SGASTAT", 1) */ 1 from "SYS"."WRH$_SGASTAT" PARTITION ("WRH$_SGASTA_2827760704_27")  where ( (  (  ( "DBID" > 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" >= 52 OR "SNAP_ID" IS NULL  )  )  ) ) and rownum < 2select cachedblk, cachehit, logicalread from ind_stats$ where obj#=:1insert into wrh$_sysmetric_history     (snap_id, dbid, instance_number,      begin_time, end_time, intsize, group_id, metric_id, value)  select      :snap_id, :dbid, :instance_number,      begtime, endtime, intsize_csec,      groupid, metricid, value  from x$kewmdrmv  order by groupid, metricid, begtimeselect count(FA#) from SYS_FBA_TRACKEDTABLES where OBJ# = 6416 and bitand(FLAGS, 128)=0delete from WRH$_RESOURCE_LIMIT tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from access$ where d_obj#=:1insert into "SYS"."ALERT_QT"  (q_name, msgid, corrid, priority, state, delay, expiration,   time_manager_info, local_order_no, chain_no, enq_time, step_no, enq_uid,   enq_tid, retry_count, exception_qschema, exception_queue, recipient_key,   dequeue_msgid, user_data, sender_name, sender_address, sender_protocol,   user_prop, cscn, dscn)   values (:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12, :13, :14, 0, :15,         :16, :17, :18, :19, :20, :21, :22, :23, :24, :25)update WRI$_SCH_VOTES   set vector = :vec  where schedule_id  = :id select count(FA#) from SYS_FBA_TRACKEDTABLES where OBJ# = 6438 and bitand(FLAGS, 128)=0select current_size from gv$sga_dynamic_free_memory   where inst_id = USERENV('Instance')select /*+ FIRST_ROWS(1) PARALLEL("WRH$_SERVICE_STAT", 1) */ 1 from "SYS"."WRH$_SERVICE_STAT" PARTITION ("WRH$_SERVIC_2827760704_27")  where ( (  (  ( "DBID" > 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" >= 52 OR "SNAP_ID" IS NULL  )  )  ) ) and rownum < 2update wrh$_seg_stat_obj sso    set (index_type, base_obj#, base_object_name, base_object_owner)         =        (select decode(ind.type#,                       1, 'NORMAL'||                          decode(bitand(ind.property, 4), 0, '', 4, '/REV'),                      2, 'BITMAP', 3, 'CLUSTER', 4, 'IOT - TOP',                       5, 'IOT - NESTED', 6, 'SECONDARY', 7, 'ANSI',                       8, 'LOB', 9, 'DOMAIN') as index_type,                base_obj.obj# as base_obj#,                base_obj.name as base_object_name,                base_owner.name as base_object_owner         from   sys.ind$  ind,                sys.user$ base_owner,                sys.obj$  base_obj         where  ind.obj#     = sso.obj#           and  ind.dataobj# = sso.dataobj#           and  ind.bo#      = base_obj.obj#           and  base_obj.owner# = base_owner.user#)  where  sso.dbid        = :dbid    and  (ts#, obj#, dataobj#)         in (select tsn_kewrseg, objn_kewrseg, objd_kewrseg             select dbid from wrm$_database_instance group by dbidSELECT count(*), sum(blocks) FROM dba_segments where    OWNER = 'SYS' and TABLESPACE_NAME = 'SYSAUX' and        SEGMENT_NAME like '%PLSCOPE%'select last_sample_date_num, last_sample_date, total_samples from WRI$_DBU_CPU_USAGE_SAMPLE where dbid     = :dbid and version  = :versioncall WWV_FLOW_MAIL.PUSH_QUEUE (  )INSERT INTO RECENT_RESOURCE_INCARNATIONS$ ( RESOURCE_TYPE, RESOURCE_ID, RESOURCE_NAME, DB_UNIQUE_NAME, DB_DOMAIN, INSTANCE_NAME, HOST_NAME, STARTUP_TIME, LOCATION, INCARNATION ) SELECT 'INSTANCE', INSTANCE_NUMBER, INSTANCE_NAME, :B2 , :B1 , INSTANCE_NAME, HOST_NAME, SYS_EXTRACT_UTC( DBMS_HA_ALERTS_PRVT.INSTANCE_STARTUP_TIMESTAMP_TZ(VI.STARTUP_TIME)), HOST_NAME, '==N/A==' FROM V$INSTANCE VIupdate sys.scheduler$_job set  next_run_date = :1, last_end_date = :2, retry_count = :3, run_count = :4, running_instance = :5, running_slave = :6, job_status = :7 where  obj# = :8select /*+ FIRST_ROWS(1) PARALLEL("WRH$_PARAMETER", 1) */ 1 from "SYS"."WRH$_PARAMETER" PARTITION ("WRH$_PARAME_2827760704_27")  where ( (  (  ( "DBID" < 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" < 52 )  )  ) ) and rownum < 2select inst_id,fnfno,fnnam from x$kccfn where fnnam is not null and bitand(fnflg, 4) != 4 and fntyp=4insert into sys.wri$_optstat_histhead_history  (obj#,intcol#,flags,expression,colname,savtime)  values (:1, :2, :3, :4, :5, :6)insert into sys.col_usage$ (obj#, intcol#, equality_preds, equijoin_preds, nonequijoin_preds, range_preds, like_preds, null_preds, timestamp) values (   :objn, :coln,   decode(bitand(:flag,1),0,0,1),   decode(bitand(:flag,2),0,0,1),   decode(bitand(:flag,4),0,0,1),   decode(bitand(:flag,8),0,0,1),   decode(bitand(:flag,16),0,0,1),   decode(bitand(:flag,32),0,0,1),   :time)delete from WRH$_TABLESPACE_SPACE_USAGE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select file#, relfile#, blocks, maxextend from file$  where ts#=:1 and status$ = 2      declare          policy        varchar2(512);          alldest       number  := dbms_rcvman.FALSE#;          rlgscn        number;        begin          if (:alldest > 0) then             alldest := dbms_rcvman.TRUE#;          end if;          dbms_rcvman.getRedoLogDeletionPolicy(policy  => policy);          dbms_rcvman.setRedoLogDeletionPolicy(policy  =>  policy,                                               alldest =>  alldest);          if ((policy like '%APPLIED%' OR                policy like '%SHIPPED%') AND               policy not like '%BACKED UP%') then             dbms_rcvman.getSCNForAppliedPolicy(                minscn     => :applied_scn               ,rlgscn     => rlgscn);          else             :applied_scn := 0;          end if;       end;BEGIN :success := dbms_ha_alerts_prvt.post_instance_up; END;select value$ from sys.props$ where name = 'DEFAULT_TBS_TYPE'delete from WRH$_IC_CLIENT_STATS tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from WRH$_SHARED_SERVER_SUMMARY tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select x.inst_id,x.indx+1,ksppinm,ksppity,ksppstvl, ksppstdvl, ksppstdf,  decode(bitand(ksppiflg/256,1),1,'TRUE','FALSE'),  decode(bitand(ksppiflg/65536,3),1,'IMMEDIATE',2,'DEFERRED',                                  3,'IMMEDIATE','FALSE'),  decode(bitand(ksppiflg,4),4,'FALSE',                                     decode(bitand(ksppiflg/65536,3), 0, 'FALSE', 'TRUE')),     decode(bitand(ksppstvf,7),1,'MODIFIED',4,'SYSTEM_MOD','FALSE'),  decode(bitand(ksppstvf,2),2,'TRUE','FALSE'),  decode(bitand(ksppilrmflg/64, 1), 1, 'TRUE', 'FALSE'),  decode(bitand(ksppilrmflg/268435456, 1), 1, 'TRUE', 'FALSE'),  ksppdesc, ksppstcmnt, ksppihash  from x$ksppi x, x$ksppcv y where (x.indx = y.indx) and  bitand(ksppiflg,268435456) = 0 and  ((translate(ksppinm,'_','#') not like '##%') and    ((translate(ksppinm,'_','#') not like '#%')      or (ksppstdf = 'FALSE') or      (bitand(ksppstvf,5) > 0)))SELECT TO_NUMBER(1) FROM DUAL      select decode(open_mode, 'MOUNTED', 0,                                'READ WRITE', 1,                                'READ ONLY', 1,                                'READ ONLY WITH APPLY', 1,                                2) dbstate       into :dbstate       from v$databasedelete from WRI$_SEGADV_OBJLIST where creation_time < :1select count(OBJ#) from SYS_FBA_TRACKEDTABLES where bitand(FLAGS,1)!=0delete from WRH$_TEMPFILE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) update indpart$ set dataobj# = :1, part# = :2, flags = :3, ts# = :4, file# = :5, block# = :6, pctfree$ = :7, initrans = :8, maxtrans = :9, analyzetime = :10, samplesize = :11, rowcnt = :12, blevel = :13, leafcnt = :14, distkey = :15, lblkkey = :16, dblkkey = :17, clufac = :18, pctthres$ = :19 where obj# = :20update WRI$_SCH_CONTROL    set schedule_mode   = :smode,        start_calibrate = :stcalb,        num_votes       = :votes,        last_vote       = :lvotetm  where schedule_id = :id DELETE FROM xs$session_appnsSELECT INSTANCE_NAME, HOST_NAME, NVL(GVI_STARTUP_TIME, SYSTIMESTAMP) - INTERVAL '1' SECOND AS SHUTDOWN_TIME FROM (SELECT RRI.INSTANCE_NAME AS INSTANCE_NAME, RRI.HOST_NAME AS HOST_NAME, FROM_TZ(RRI.STARTUP_TIME, '+00:00') AS RRI_STARTUP_TIME, DBMS_HA_ALERTS_PRVT.INSTANCE_STARTUP_TIMESTAMP_TZ(GVI.STARTUP_TIME) AS GVI_STARTUP_TIME FROM RECENT_RESOURCE_INCARNATIONS$ RRI LEFT OUTER JOIN GV$INSTANCE GVI ON GVI.INSTANCE_NAME = RRI.RESOURCE_NAME WHERE RRI.RESOURCE_TYPE = 'INSTANCE' AND :B2 = RRI.DB_UNIQUE_NAME AND :B1 = RRI.DB_DOMAIN) WHERE GVI_STARTUP_TIME IS NULL OR GVI_STARTUP_TIME > RRI_STARTUP_TIME GROUP BY INSTANCE_NAME, HOST_NAME, GVI_STARTUP_TIMESELECT o.obj# from obj$ o, tab$ t, user$ u where  u.name = :1 and o.name = :2 and u.user# = o.owner# and  t.obj# = o.obj# and o.type# = 2 and bitand(t.property, 131072) = 131072 update obj$ set obj#=:4, type#=:5,ctime=:6,mtime=:7,stime=:8,status=:9,dataobj#=:10,flags=:11,oid$=:12,spare1=:13, spare2=:14 where owner#=:1 and name=:2 and namespace=:3 and remoteowner is null and linkname is null and subname is nullselect privilege#,level from sysauth$ connect by grantee#=prior privilege# and privilege#>0 start with (grantee#=:1 or grantee#=1) and privilege#>0select SUM(column_length) from all_ind_columns where table_name = 'TESTING'select count(aft.table_objno) from system.aq$_queue_tables t,  sys.aq$_queue_table_affinities aft where  aft.table_objno = t.objno and aft.owner_instance = :1 and  bitand(t.flags, 4+16+32+64+128+256) = 0 and NOT  ( t.name in ('DEF$_AQCALL' , 'DEF$_AQERROR') and t.schema = 'SYSTEM')select /*+ FIRST_ROWS(1) PARALLEL("WRH$_SYSSTAT", 1) */ 1 from "SYS"."WRH$_SYSSTAT" PARTITION ("WRH$_SYSSTA_2827760704_27")  where ( (  (  ( "DBID" > 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" >= 52 OR "SNAP_ID" IS NULL  )  )  ) ) and rownum < 2delete from WRH$_STREAMS_APPLY_SUM tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) update sys.scheduler$_window set  flags = :1 where  obj# = :2select /*+ FIRST_ROWS(1) PARALLEL("WRH$_LATCH", 1) */ 1 from "SYS"."WRH$_LATCH" PARTITION ("WRH$_LATCH_2827760704_27")  where ( (  (  ( "DBID" > 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" >= 52 OR "SNAP_ID" IS NULL  )  )  ) ) and rownum < 2select priority from resource_mapping_priority$ where attribute = :1 and status = 'ACTIVE'SELECT AUTOTASK_STATUS,           ABA_STATE,           NVL(ABA_STATE_TIME, TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),           NVL(ABA_START_TIME, TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),           MW_NAME,            NVL(MW_START_TIME, TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),           NVL(RECONCILE_TIME, TIMESTAMP '2001-01-01 01:01:01.01 +01:01'),           INSTANCE_NAME      FROM KET$_AUTOTASK_STATUS     WHERE DUMMY_KEY=99999    FOR UPDATEselect max(last_number) into :bind1 from dba_sequences where sequence_owner='SYS' and sequence_name='WRM$_DEEP_PURGE_INTERVAL'select count(FA#) from SYS_FBA_TRACKEDTABLES where OBJ# = 6265 and bitand(FLAGS, 128)=0delete from WRH$_JAVA_POOL_ADVICE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) call WWV_FLOW_CACHE.PURGE_SESSIONS (  )select table_objno, primary_instance, secondary_instance, owner_instance from sys.aq$_queue_table_affinities a  where  a.owner_instance <> :1 and dbms_aqadm_syscalls.get_owner_instance(a.primary_instance,       a.secondary_instance,       a.owner_instance) = :2  order by a.owner_instance, table_objno for update of a.owner_instanceselect high, bit from (select snap_id - 1 high, min(begin_interval_time) bit from wrm$_snapshot where dbid = :dbid and snap_id = (select min(snap_id) from wrm$_snapshot s where dbid = :dbid and snap_id > :snap_id and status in (0,1) and not exists (select 1 from WRM$_BASELINE b where b.dbid = s.dbid and s.snap_id >= b.start_snap_id and s.snap_id <= b.end_snap_id)) group by snap_id union all select 2147483647, systimestamp from  v$database where dbid <> :dbid order by 1 asc nulls last) where rownum = 1 SELECT /*+ rule */ U.NAME, OT.NAME, NULL, NULL, DECODE(BITAND(T.FLAGS, 512),512,2,0), DECODE(BITAND(T.FLAGS, 256),256,1,0), T.ROWCNT, CASE BITAND(T.PROPERTY, 128) WHEN 128 THEN (SELECT TOV.BLKCNT FROM SYS.TAB$ TOV WHERE TOV.OBJ# = T.BOBJ#) ELSE T.BLKCNT END BLKCNT, T.AVGRLN, T.CHNCNT, T.ANALYZETIME, T.SAMPLESIZE, TST.CACHEDBLK, TST.CACHEHIT, TST.LOGICALREAD, NULL FROM SYS.USER$ U, SYS.OBJ$ OT, SYS.TAB$ T, SYS.TAB_STATS$ TST WHERE :B4 IS NULL AND U.NAME = :B3 AND OT.OWNER# = U.USER# AND OT.NAME = :B2 AND OT.TYPE# = 2 AND OT.OBJ# = T.OBJ# AND T.OBJ# = TST.OBJ# (+) AND BITAND(T.PROPERTY, 512) != 512 AND BITAND(T.FLAGS, 536870912) != 536870912 AND (:B1 = 'CACHE_HISTORY' OR (:B1 = 'DATA' AND BITAND(T.FLAGS,16) = 16) OR (:B1 = 'CACHE' AND TST.OBJ# IS NOT NULL) OR (:B1 = 'ALL' AND (BITAND(T.FLAGS,16) = 16 OR TST.OBJ# IS NOT NULL)) ) UNION ALL SELECT U.NAME, OP.NAME, OP.SUBNAME, NULL, DECODE(BITAND(TP.FLAGS, 16),16,2,0), DECODE(BITAND(TP.FLAGS, 8),8,1,0), TP.ROWCNT, CASE BITAND(T.PROPERTY, 128select u.name, o.name,         decode(i.agt_name, NULL, 'SCHEDULER$_EVENT_AGENT', i.agt_name)  from   sys.user$ u, sys.obj$ o,       (select si.obj# obj#, sm.rule_name agt_name from        sys.scheduler$_srcq_info si left outer join sys.scheduler$_srcq_map sm        on (sm.oid = si.obj# and bitand(sm.flags, 2) <> 0)) i  where  i.obj# = o.obj# and o.owner# = u.user#insert into WRM$_SNAPSHOT   (snap_id, dbid, instance_number, startup_time,    begin_interval_time, end_interval_time, snap_level,    status, error_count, bl_moved, snap_flag, snap_timezone)  values   (:snap_id, :dbid, :instance_number, :startup_time,    :begin_interval_time, :end_interval_time, :snap_level,    :status, 0, 0, :bind1, :bind2)DELETE FROM WWV_FLOW_FILE_OBJECTS$ WHERE SECURITY_GROUP_ID = 0select SUM(data_length) from all_tab_columns where table_name = 'DEPARTMENTS'select trace_type, primary_id, qualifier_id1,  qualifier_id2, instance_name, flags from wri$_tracing_enabled  where instance_name is null or instance_name = :1select SUM(column_length) from all_ind_columns where table_name = 'Y'delete from WRH$_SEG_STAT_OBJ tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select pval2 from sys.aux_stats$ where sname = 'SYSSTATS_INFO' and pname = 'STATUS'select inst_id,bprid,bpstm,bpbss,bpbsc,bpnum,bitand(bpflg, 12)/4 + (bitand(bpext, 64-1) * 4) + 1,bpdev,bphdl,bpcmt,bpmdh,bitand(bpflg, 4080) / 16,decode(bitand(bpflg,2),1,'YES','NO'),bptag,decode(bitand(bpflg, 1+4096+8192),0,'A',1,'D',4096,'X',8192,'U','?'),decode(bitand(bpflg,1),1,'YES','NO'),to_date(bptsm,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'),to_date(bptim,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'),abs((to_date(bptim,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian')- to_date(bptsm,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'))*86400),((floor(bpext/512) * 4294967296) + bpsz1) * 512, decode(bitand(bpflg, 16384),0,'NO','YES'), bprsi,bprst,decode(bitand(bpext, 64),64,'YES','NO'), decode(bitand(bpflg, 16384),0,'NO',decode(bitand(bpext, 256),0,'NO','YES')), decode(bitand(bpext, 128),128,'YES','NO'), decode(bitand(bpflg, 16384),16384,'NO',decode(bitand(bpext,256),0,'NO','YES')) from x$kccbpSELECT NVL(SUM(D.BLOCKS), 0) FROM X$KEWX_SEGMENTS D, (SELECT DISTINCT O1.SEGMENT_NAME NAME FROM X$KEWX_SEGMENTS O1 WHERE O1.SEGMENT_NAME LIKE 'LOGMNR%' AND O1.SEGMENT_NAME NOT LIKE 'LOGMNRT%' UNION ALL SELECT DISTINCT O2.LOB_NAME NAME FROM X$KEWX_LOBS O2 WHERE O2.TABLE_NAME LIKE 'LOGMNR%' AND O2.TABLE_NAME NOT LIKE 'LOGMNRT%' ) S WHERE (D.OWNER = 'SYS' OR D.OWNER = 'SYSTEM') AND (D.SEGMENT_NAME = S.NAME )select col#,intcol#,charsetid,charsetform from col$ where obj#=:1 order by intcol# ascselect col#,intcol#,charsetid,charsetform from col$ where obj#=:1 order by intcol# ascSELECT PARAM_ID, AUDIT_TRAIL_TYPE#, NUMBER_VALUE, STRING_VALUE  FROM SYS.DAM_CONFIG_PARAM$  WHERE PARAM_ID = 26 AND  (AUDIT_TRAIL_TYPE# = 8 OR AUDIT_TRAIL_TYPE# = 12 OR AUDIT_TRAIL_TYPE# = 15)update sys.scheduler$_global_attribute set  value = :1, flags = :2, modified_inst = :3 where  obj# = :4SELECT c.capture#, c.capture_name, c.flags FROM sys.streams$_capture_process c, dba_queues q, dba_queue_tables qt  ,v$instance i WHERE c.queue_owner  = q.owner   and c.queue_name   = q.name   and qt.queue_table = q.queue_table   and qt.owner       = q.owner   and qt.owner_instance = i.instance_number   and bitand(c.flags, 512) != 512   and c.status       = :1 ORDER BY c.capture# select SUM(data_length) from all_tab_columns where table_name = 'T2'delete from WRH$_IOSTAT_FUNCTION tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select intcol#,nvl(pos#,0),col#,nvl(spare1,0) from ccol$ where con#=:1select intcol#,nvl(pos#,0),col#,nvl(spare1,0) from ccol$ where con#=:1call dbms_scheduler.auto_purge (  )delete from WRH$_LATCH_CHILDREN_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select CONNECTION_POOL_NAME, STATUS, MINSIZE, MAXSIZE,           INCRSIZE, SESSION_CACHED_CURSORS, INACTIVITY_TIMEOUT,           MAX_THINK_TIME, MAX_USE_SESSION, MAX_LIFETIME_SESSION,           NUM_CBROK, MAXCONN_CBROK    from cpool$ where STATUS = :1select nvl(sum(d.blocks),0)        from x$kewx_segments d,            (select distinct o1.segment_name name from x$kewx_segments o1             where o1.segment_name like '%AW%$%'             union all             select distinct o2.lob_name name from x$kewx_lobs o2             where o2.table_name like '%AW%$%'            ) s       where (d.owner = 'SYS' or d.owner = 'SYSTEM') and             (d.segment_name = s.name )select intcol#, toid, version#, intcols, intcol#s, flags, synobj# from subcoltype$ where obj#=:1 order by intcol# ascselect intcol#, toid, version#, intcols, intcol#s, flags, synobj# from subcoltype$ where obj#=:1 order by intcol# ascselect i.obj#,i.ts#,i.file#,i.block#,i.intcols,i.type#,i.flags,i.property,i.pctfree$,i.initrans,i.maxtrans,i.blevel,i.leafcnt,i.distkey,i.lblkkey,i.dblkkey,i.clufac,i.cols,i.analyzetime,i.samplesize,i.dataobj#,nvl(i.degree,1),nvl(i.instances,1),i.rowcnt,mod(i.pctthres$,256),i.indmethod#,i.trunccnt,nvl(c.unicols,0),nvl(c.deferrable#+c.valid#,0),nvl(i.spare1,i.intcols),i.spare4,i.spare2,i.spare6,decode(i.pctthres$,null,null,mod(trunc(i.pctthres$/256),256)),ist.cachedblk,ist.cachehit,ist.logicalread from ind$ i, ind_stats$ ist, (select enabled, min(cols) unicols,min(to_number(bitand(defer,1))) deferrable#,min(to_number(bitand(defer,4))) valid# from cdef$ where obj#=:1 and enabled > 1 group by enabled) c where i.obj#=c.enabled(+) and i.obj# = ist.obj#(+) and i.bo#=:1 order by i.obj#select i.obj#,i.ts#,i.file#,i.block#,i.intcols,i.type#,i.flags,i.property,i.pctfree$,i.initrans,i.maxtrans,i.blevel,i.leafcnt,i.distkey,i.lblkkey,i.dblkkey,i.clufac,i.cols,i.analyzetime,i.samplesize,i.dataobj#,nvl(i.degree,1),nvl(i.instances,1),i.rowcnt,mod(i.pctthres$,256),i.indmethod#,i.trunccnt,nvl(c.unicols,0),nvl(c.deferrable#+c.valid#,0),nvl(i.spare1,i.intcols),i.spare4,i.spare2,i.spare6,decode(i.pctthres$,null,null,mod(trunc(i.pctthres$/256),256)),ist.cachedblk,ist.cachehit,ist.logicalread from ind$ i, ind_stats$ ist, (select enabled, min(cols) unicols,min(to_number(bitand(defer,1))) deferrable#,min(to_number(bitand(defer,4))) valid# from cdef$ where obj#=:1 and enabled > 1 group by enabled) c where i.obj#=c.enabled(+) and i.obj# = ist.obj#(+) and i.bo#=:1 order by i.obj#select i.obj#,i.ts#,i.file#,i.block#,i.intcols,i.type#,i.flags,i.property,i.pctfree$,i.initrans,i.maxtrans,i.blevel,i.leafcnt,i.distkey,i.lblkkey,i.dblkkey,i.clufac,i.cols,i.analyzetime,i.samplesize,i.dataobj#,nvl(i.degree,1),nvl(i.instances,1),i.rowcnt,mod(i.pctthres$,256),i.indmethod#,i.trunccnt,nvl(c.unicols,0),nvl(c.deferrable#+c.valid#,0),nvl(i.spare1,i.intcols),i.spare4,i.spare2,i.spare6,decode(i.pctthres$,null,null,mod(trunc(i.pctthres$/256),256)),ist.cachedblk,ist.cachehit,ist.logicalread from ind$ i, ind_stats$ ist, (select enabled, min(cols) unicols,min(to_number(bitand(defer,1))) deferrable#,min(to_number(bitand(defer,4))) valid# from cdef$ where obj#=:1 and enabled > 1 group by enabled) c where i.obj#=c.enabled(+) and i.obj# = ist.obj#(+) and i.bo#=:1 order by i.obj#select col#,intcol#,toid,version#,packed,intcols,intcol#s,flags, synobj#, nvl(typidcol#, 0) from coltype$ where obj#=:1 order by intcol# descselect col#,intcol#,toid,version#,packed,intcols,intcol#s,flags, synobj#, nvl(typidcol#, 0) from coltype$ where obj#=:1 order by intcol# descdelete from sys.mon_mods$select count(*) from obj$ o, user$ u where o.name='XDB$SCHEMA' and o.owner#=u.user# and u.name='XDB'SELECT space_usage_kbytes  FROM  v$sysaux_occupants  WHERE occupant_name = 'SQL_MANAGEMENT_BASE'select ROWID from SYS_FBA_USERS where ROWNUM = 1SELECT ro.obj#, '"'||ru.name||'"' || '.' || '"'||ro.name||'"',  decode(rl.ectx#, 0, decode(rm.ectx#, 0, rs.ectx#, rm.ectx#), rl.ectx#),  decode (rl.ectx#, 0, decode(rm.ectx#, 0,    (select '"'||u1.name||'"' || '.' || '"'||o1.name||'"' from user$ u1,    obj$ o1 where o1.obj# = rs.ectx# and o1.owner# = u1.user#),   (select '"'||u2.name||'"' || '.' || '"'||o2.name||'"' from user$ u2,    obj$ o2 where o2.obj# = rm.ectx# and o2.owner# = u2.user#)),   (select '"'||u3.name||'"' || '.' || '"'||o3.name||'"' from user$ u3,    obj$ o3 where o3.obj# = rl.ectx# and o3.owner# = u3.user#))   from obj$ so, user$ su, rule_map$ rm, obj$ ro, user$ ru, rule$ rl,   rule_set$ rs   where su.name = :1 and so.name = :2 and so.owner# = su.user# and   so.obj# = rm.rs_obj# and rm.r_obj# = ro.obj# and ro.owner# = ru.user#   and rl.obj# = rm.r_obj# and rs.obj# = rm.rs_obj#select min(next_date) from "SYS"."AQ$_AQ_PROP_TABLE_T"select rule_id, rule_or_piece from rule_set_iot$ where rs_obj# = :1 and  ec_obj# = :2 and box_id = :3SELECT /*+ all_rows */ '"'||UI.NAME||'"' IND_OWNER, '"'||OIP.NAME||'"' IND_NAME, '"'||OIP.SUBNAME||'"' PART_NAME, OIP.OBJ# OBJ_NUM, I.PROPERTY IPROP FROM SYS.USER$ UT, SYS.OBJ$ OTP, SYS.TABPART$ TP, SYS.IND$ I, SYS.PARTOBJ$ PO, SYS.INDPART$ IP, SYS.OBJ$ OIP, SYS.USER$ UI WHERE UT.NAME = :B3 AND UT.USER# = OTP.OWNER# AND OTP.NAME = :B2 AND OTP.SUBNAME = :B1 AND OTP.NAMESPACE = 1 AND OTP.REMOTEOWNER IS NULL AND OTP.LINKNAME IS NULL AND OTP.TYPE# = 19 AND OTP.OBJ# = TP.OBJ# AND TP.BO# = I.BO# AND I.OBJ# = PO.OBJ# AND BITAND(PO.FLAGS, 1) = 1 AND I.OBJ# = IP.BO# AND IP.PART# = TP.PART# AND IP.OBJ# = OIP.OBJ# AND OIP.OWNER# = UI.USER# UNION ALL SELECT '"'||UI.NAME||'"' IND_OWNER, '"'||OIP.NAME||'"' IND_NAME, '"'||OIP.SUBNAME||'"' PART_NAME, OIP.OBJ# OBJ_NUM, I.PROPERTY IPROP FROM SYS.USER$ UT, SYS.OBJ$ OTP, SYS.TABCOMPART$ TP, SYS.IND$ I, SYS.PARTOBJ$ PO, SYS.INDCOMPART$ IP, SYS.OBJ$ OIP, SYS.USER$ UI WHERE UT.NAME = :B3 AND UT.USER# = OTP.OWNER# AND OTP.NAME = :B2 AND OTP.SUBNAME = :B1 AND select pos#,intcol#,col#,spare1,bo#,spare2,spare3 from icol$ where obj#=:1select pos#,intcol#,col#,spare1,bo#,spare2,spare3 from icol$ where obj#=:1select pos#,intcol#,col#,spare1,bo#,spare2,spare3 from icol$ where obj#=:1delete from WRH$_SEG_STAT_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select /*+ FIRST_ROWS(1) PARALLEL("WRH$_ACTIVE_SESSION_HISTORY", 1) */ 1 from "SYS"."WRH$_ACTIVE_SESSION_HISTORY" PARTITION ("WRH$_ACTIVE_2827760704_27")  where ( (  (  ( "DBID" > 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" >= 52 OR "SNAP_ID" IS NULL  )  )  ) ) and rownum < 2delete from WRH$_DLM_MISC_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select /*+ FIRST_ROWS(1) PARALLEL("WRH$_DB_CACHE_ADVICE", 1) */ 1 from "SYS"."WRH$_DB_CACHE_ADVICE" PARTITION ("WRH$_DB_CAC_2827760704_27")  where ( (  (  ( "DBID" > 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" >= 52 OR "SNAP_ID" IS NULL  )  )  ) ) and rownum < 2begin dbms_swrf_internal.massage_column_stats('SYS', :bind1, :bind2, :bind3, minval=>:bind4, maxval=>:bind5); end;select min(next_date) from "SYS"."AQ$_SCHEDULER$_EVENT_QTAB_T"update tabpart$ set dataobj# = :1, part# = :2, hiboundlen = :3, hiboundval = :4, ts# = :5, file# = :6, block# = :7, pctfree$ = :8, pctused$ = :9, initrans = :10, maxtrans = :11, flags = :12, analyzetime = :13, samplesize = :14, rowcnt = :15, blkcnt = :16, empcnt = :17, avgspc = :18, chncnt = :19, avgrln = :20, bhiboundval = EMPTY_BLOB() where obj# = :21 returning bhiboundval into :22select privilege#,nvl(col#,0),max(mod(nvl(option$,0),2))from objauth$ where obj#=:1 and grantee#=:2 group by privilege#,nvl(col#,0)select ftp_port, ftp_protocol, http_port, http_protocol, http2_port,         http2_protocol, nfs_port, nfs_protocol, http_host, http2_host  from xdb.xdb$root_infodelete from WRH$_LATCH_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select t_object_type, t_object_name, t_metrics_id, lower(t_instance_name), t_flags, t_warning_operator, t_warning_value, t_critical_operator, t_critical_value, t_observation_period, t_consecutive_occurrences, t_object_id from WRI$_ALERT_THRESHOLD where t_flags = 1SELECT snap_id , OBJ#, DATAOBJ# FROM   (SELECT /*+ ordered use_nl(t2) index(t2) */ t2.snap_id , t1.OBJN_KEWRSEG  OBJ#, t1.OBJD_KEWRSEG  DATAOBJ# FROM X$KEWRTSEGSTAT t1, WRH$_SEG_STAT_OBJ t2      WHERE t2.dbid(+)  = :dbid  AND t2.OBJ#(+) = t1.OBJN_KEWRSEG AND t2.DATAOBJ#(+) = t1.OBJD_KEWRSEG) WHERE nvl(snap_id, 0) < :snap_idselect 1 from sys.aq$_queue_table_affinitiesselect migrated from MIGRATE$SELECT C.TYPE# FROM SYS.OBJ$ O, SYS.USER$ U, SYS.COL$ C WHERE O.TYPE#= 2 AND O.NAME = :B3 AND O.OWNER# = U.USER# AND U.NAME = :B2 AND C.OBJ#=O.OBJ# AND C.NAME =:B1 select num_rows FROM dba_tables where table_name = 'LOCATIONS'select a.schema, a.name, b.name, b.eventid, a.flags, a.sort_cols  from system.aq$_queues b, system.aq$_queue_tables a, sys.aq$_queue_table_affinities t  where a.objno = b.table_objno and t.table_objno = b.table_objno and bitand(b.properties, 512) = 512 and t.owner_instance = :1 for update of t.owner_instanceselect max(RETENTION) from SYS_FBA_FAinsert into WRI$_ALERT_THRESHOLD_LOG (sequence_id, object_type, object_name, object_id, opcode) values (:1, :2, :3, :4, :5)delete from WRH$_INST_CACHE_TRANSFER_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select di.inst_id,di.didbi,di.didbn,to_date(di.dicts,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'),to_number(di.dirls),to_date(di.dirlc,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'),to_number(di.diprs),to_date(di.diprc,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'),decode(di.dimla,0,'NOARCHIVELOG',1,'ARCHIVELOG','MANUAL'),to_number(di.discn),to_number(di.difas),decode(bitand(di.diflg,256),256,'CREATED',decode(bitand(di.diflg,1024),1024,'STANDBY',decode(bitand(di.diflg,32768),32768,'CLONE',decode(bitand(di.diflg,4096),4096,'BACKUP','CURRENT')))),to_date(di.dicct,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'),di.dicsq,to_number(di.dickp_scn),to_date(di.dickp_tim,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'),decode(bitand(di.diflg,4),4,'REQUIRED',decode(di.diirs,0,'NOT ALLOWED','ALLOWED')),to_date(di.divts,'MM/DD/RR HH24:MI:SS','NLS_CALENDAR=Gregorian'),decode(di.didor,0,'MOUNTED',decode(di.didor,1,'READ WRITE',decode(di.didor,2,'READ ONLY', 'READ ONLY WITH APPLY'))),decode(bitandselect INST_ID, RMRNO, RMNAM, RMVAL from X$KCCRM where RMNAM is not nullupdate histgrm$ set obj# = decode(obj#,:1,:2) WHERE obj# in (:1) select SUM(column_length) from all_ind_columns where table_name = 'GATO'SELECT T.CLIENT_ID,         T.OPERATION_ID,         T.TARGET_TYPE,         T.TARGET_NAME,         T.CURR_JOB_NAME,         TO_NUMBER(BITAND(T.ATTRIBUTES, 131072)),         CASE NVL((SELECT J.STATE                     FROM DBA_SCHEDULER_JOBS J                    WHERE T.CURR_JOB_NAME = J.JOB_NAME), 'MISSING')           WHEN 'MISSING' THEN 4           WHEN 'RUNNING' THEN 1           WHEN 'DISABLED' THEN 2           WHEN 'SCHEDULED' THEN 3           WHEN 'RETRY SCHEDULED' THEN 99           WHEN 'COMPLETED' THEN 99           WHEN 'BROKEN' THEN 99           WHEN 'FAILED' THEN 99           WHEN 'REMOTE' THEN 99           WHEN 'SUCCEEDED' THEN 99           WHEN 'STOPPED' THEN 99           WHEN 'CHAIN_STALLED' THEN 99           ELSE 99         END AS CONSOLIDATED_STATE,         CASE NVL(JRD.STATUS,'MISSING')           WHEN 'MISSING' THEN 4           WHEN 'SUCCEEDED' THEN 10           WHEN 'FAILED' THEN 11           WHEN 'STOPPED' THEN             CASE             WHEN JRD.ADDITIONAL_INFO LIKE select col#, grantee#, privilege#,max(mod(nvl(option$,0),2)) from objauth$ where obj#=:1 and col# is not null group by privilege#, col#, grantee# order by col#, grantee#select col#, grantee#, privilege#,max(mod(nvl(option$,0),2)) from objauth$ where obj#=:1 and col# is not null group by privilege#, col#, grantee# order by col#, grantee#select  decode(u.type#, 2, u.ext_username, u.name), o.name, trigger$.sys_evts, trigger$.type#  from   obj$ o, user$ u, trigger$  where o.type# = 12 and (bitand(trigger$.property, 8) = 8)  and   (bitand(trigger$.property, 16) != 16)  and   trigger$.obj# = o.obj# and o.owner# = u.user# order by o.obj#select name, attr_id, toid, version from rule_set_nl$ where rs_obj# = :1  and ec_obj# = :2 and box_id = :3 order by ne_idSELECT INCARNATION#, INCARNATION#, RESETLOGS_CHANGE#, RESETLOGS_TIME FROM V$DATABASE_INCARNATION WHERE STATUS = 'CURRENT'select order#,columns,types from access$ where d_obj#=:1select order#,columns,types from access$ where d_obj#=:1SELECT /*+ leading(u osp tsp) */ OP.SUBNAME FROM SYS.USER$ U, SYS.OBJ$ OSP, SYS.TABSUBPART$ TSP, SYS.OBJ$ OP WHERE U.NAME = :B3 AND OSP.OWNER# = U.USER# AND OSP.NAME = :B2 AND OSP.NAMESPACE = 1 AND OSP.REMOTEOWNER IS NULL AND OSP.LINKNAME IS NULL AND OSP.SUBNAME = :B1 AND OSP.TYPE# = 34 AND OSP.OBJ# = TSP.OBJ# AND OP.OBJ# = TSP.POBJ#select bo#, intcol# from icoldep$ where obj#=:1select q.eventid, q.oid, t.schema, t.name, q.table_objno,         q.usage, t.udata_type,  q.enable_flag,         q.max_retries, q.retry_delay, q.properties, q.ret_time,         t.flags, t.sort_cols, q.memory_threshold, a.owner_instance,         q.service_name, q.network_name, t.timezone  from system.aq$_queues q, system.aq$_queue_tables t,       sys.aq$_queue_table_affinities a  where q.table_objno = t.objno and q.table_objno = a.table_objno  and t.schema= :1 and q.name= :2 lock table sys.mon_mods$ in exclusive modeselect file# from file$ where ts#=:1SELECT CHAR_VALUE FROM SYSTEM.PRODUCT_PRIVS WHERE   (UPPER('SQL*Plus') LIKE UPPER(PRODUCT)) AND   ((USER LIKE USERID) OR (USERID = 'PUBLIC')) AND   (UPPER(ATTRIBUTE) = 'ROLES')select decode(value$, 'CAPTURE', 1, 0) from props$ where name = 'WORKLOAD_CAPTURE_MODE'select name, address, protocol, trans_name, subscriber_type, subscriber_id  , scn_at_add from  "SYS"."AQ$_ALERT_QT_S"   where queue_name = :1 and rule_name IS NULL and ruleset_name IS NULL and  negative_ruleset_name IS NULL and bitand(subscriber_type, 1) = 1SELECT SCRIPT_ID FROM DBA_RECOVERABLE_SCRIPT_HIST WHERE (SYSDATE - CREATION_TIME) >= :B1 select instance_number, io_shares from resource_instance_capability$ where status = 'ACTIVE'DECLARE job BINARY_INTEGER := :job;  next_date TIMESTAMP WITH TIME ZONE := :mydate;  broken BOOLEAN := FALSE;  job_name VARCHAR2(30) := :job_name;  job_subname VARCHAR2(30) := :job_subname;  job_owner VARCHAR2(30) := :job_owner;  job_start TIMESTAMP WITH TIME ZONE := :job_start;  job_scheduled_start TIMESTAMP WITH TIME ZONE := :job_scheduled_start;  window_start TIMESTAMP WITH TIME ZONE := :window_start;  window_end TIMESTAMP WITH TIME ZONE := :window_end;  chain_id VARCHAR2(14) :=  :chainid;  credential_owner varchar2(30) := :credown;  credential_name  varchar2(30) := :crednam;  destination_owner varchar2(30) := :destown;  destination_name varchar2(30) := :destnam;  job_dest_id varchar2(14) := :jdestid;  log_id number := :log_id;  BEGIN  sys.dbms_streams_auto_int.clean_auto_split_merge;  :mydate := next_date; IF broken THEN :b := 1; ELSE :b := 0; END IF; END; select num_rows FROM dba_tables where table_name = 'JOB_HISTORY'SELECT group_id, group_name, metric_id,            metric_name, metric_unit          FROM   gv$metricname          WHERE  inst_id = USERENV('INSTANCE')select count(FA#) from SYS_FBA_TRACKEDTABLES where OBJ# = 6422 and bitand(FLAGS, 128)=0select SUM(data_length) from all_tab_columns where table_name = 'LENTES'lock table sys.col_usage$ in exclusive mode nowaitSELECT VALUE FROM V$PARAMETER WHERE NAME='compatible'SELECT T.SQL_HANDLE, O.NAME FROM SQL$TEXT T, SQLOBJ$ O WHERE SYSTIMESTAMP - O.LAST_EXECUTED >= :B3 AND O.OBJ_TYPE = :B2 AND O.SIGNATURE = T.SIGNATURE AND BITAND(O.FLAGS, :B1 ) = :B1 delete from WRH$_STREAMS_CAPTURE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from WRH$_OPTIMIZER_ENV tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) SELECT RM.CONF#, RM.NAME, RM.VALUE FROM V$RMAN_CONFIGURATION RM WHERE ((:B2 IS NULL OR UPPER(:B2 ) = UPPER(RM.NAME)) AND (:B1 IS NULL OR UPPER(:B1 ) = UPPER(RM.VALUE)))SELECT id,name,property FROM sys.wri$_adv_definitions select nvl(sum(d.blocks),0) from x$kewx_segments d, (select distinct o1.segment_name name from x$kewx_segments o1 where o1.segment_name like  '%WRM$|_%' ESCAPE '|'    or o1.segment_name like  '%WRH$|_%' ESCAPE '|' union all select distinct o2.lob_name name from x$kewx_lobs o2 where o2.table_name like  '%WRM$|_%' ESCAPE '|'    or o2.table_name like  '%WRH$|_%' ESCAPE '|' ) s where (d.owner = 'SYS') and (d.segment_name = s.name)select next_run_date, obj#, run_job, sch_job from (select decode(bitand(a.flags, 16384), 0, a.next_run_date,                a.last_enabled_time) next_run_date,       a.obj# obj#, decode(bitand(a.flags, 16384), 0, 0, 1) run_job, a.sch_job  sch_job  from  (select p.obj# obj#, p.flags flags, p.next_run_date next_run_date,      p.job_status job_status, p.class_oid class_oid,      p.last_enabled_time last_enabled_time, p.instance_id instance_id,      1 sch_job   from sys.scheduler$_job p   where bitand(p.job_status, 3) = 1    and ((bitand(p.flags, 134217728 + 268435456) = 0) or         (bitand(p.job_status, 1024) <> 0))    and bitand(p.flags, 4096) = 0    and ((p.instance_id is not null    and (to_char(p.instance_id) = :1))    or (p.instance_id is null and p.class_oid is not null    and p.class_oid in (select b.obj# from sys.scheduler$_class b      where bitand(b.flags, :2) <> 0 and lower(b.affinity) = lower(:3))))   UNION ALL   select q.obj#, q.flags, q.next_run_date, q.job_status, q.classBEGIN :success := dbms_ha_alerts_prvt.check_ha_resources; END;select ts#,file#,block#,cols,nvl(size$,-1),pctfree$,pctused$,initrans,maxtrans,hashkeys,func,extind,avgchn,nvl(degree,1),nvl(instances,1),nvl(flags,0),nvl(spare1,0)from clu$ where obj#=:1update obj$ set obj#=:4, type#=:5,ctime=:6,mtime=:7,stime=:8,status=:9,dataobj#=:10,flags=:11,oid$=:12,spare1=:13, spare2=:14 where owner#=:1 and name=:2 and namespace=:3 and remoteowner is null and linkname is null and subname=:15select lobtsn, lobrdba, lobobjid from x$lobstat   where lobspcdealloc > 0 and lobcurrtime >= :1   order by lobspcdealloc descselect distinct(-privilege#),nvl(option$,0) from sysauth$ where grantee#=:1 and privilege#<0select count(FA#) from SYS_FBA_TRACKEDTABLES where OBJ# = 6368 and bitand(FLAGS, 128)=0select ROWID from SYS_FBA_TRACKEDTABLES where ROWNUM = 1insert into sys.wri$_optstat_tab_history(obj#,rowcnt,blkcnt,avgrln, analyzetime,samplesize,cachedblk,cachehit,logicalread,savtime,spare1,flags)  values  (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12)select value, consumer_group from resource_group_mapping$ where attribute = :1 and status = 'ACTIVE'BEGIN    prvt_advisor.delete_expired_tasks;  END;select SYS_CONTEXT('USERENV', 'SERVER_HOST'), SYS_CONTEXT('USERENV', 'DB_UNIQUE_NAME'), SYS_CONTEXT('USERENV', 'INSTANCE_NAME'), SYS_CONTEXT('USERENV', 'SERVICE_NAME'), INSTANCE_NUMBER, STARTUP_TIME, SYS_CONTEXT('USERENV', 'DB_DOMAIN') from v$instance where INSTANCE_NAME=SYS_CONTEXT('USERENV', 'INSTANCE_NAME')select file#, block# from recyclebin$ where ts# = :1     and file# != 0 and block# != 0 and space = 0BEGIN    :c := dbms_spm_internal.auto_purge_sql_plan_baseline;  END;update sys.scheduler$_job set  last_start_date = :1, running_instance = :2, running_slave = :3, job_status = :4 where  obj# = :5select /*+ rule */ c.name, u.name from con$ c, cdef$ cd, user$ u  where c.con# = cd.con# and cd.enabled = :1 and c.owner# = u.user#select 1 from "SYS"."AQ$_ALERT_QT_L"update partobj$ set partcnt = :1 where obj# = :2SELECT VALUE FROM V$PARAMETER WHERE UPPER(NAME) = '_QA_LRG_TYPE'DECLARE job BINARY_INTEGER := :job;  next_date TIMESTAMP WITH TIME ZONE := :mydate;  broken BOOLEAN := FALSE;  job_name VARCHAR2(30) := :job_name;  job_subname VARCHAR2(30) := :job_subname;  job_owner VARCHAR2(30) := :job_owner;  job_start TIMESTAMP WITH TIME ZONE := :job_start;  job_scheduled_start TIMESTAMP WITH TIME ZONE := :job_scheduled_start;  window_start TIMESTAMP WITH TIME ZONE := :window_start;  window_end TIMESTAMP WITH TIME ZONE := :window_end;  chain_id VARCHAR2(14) :=  :chainid;  credential_owner varchar2(30) := :credown;  credential_name  varchar2(30) := :crednam;  destination_owner varchar2(30) := :destown;  destination_name varchar2(30) := :destnam;  job_dest_id varchar2(14) := :jdestid;  log_id number := :log_id;  BEGIN  sys.dbms_streams_auto_int.clean_recoverable_script;  :mydate := next_date; IF broken THEN :b := 1; ELSE :b := 0; END IF; END; select rule_or_piece, num_rops, box_id, property from rule_set_ror$ where  rs_obj# = :1 and ec_obj# = :2 and rule_id = :3select count(FA#) from SYS_FBA_TRACKEDTABLES where OBJ# = 6376 and bitand(FLAGS, 128)=0select job, nvl2(last_date, 1, 0) from sys.job$ where next_date <= :1 and (field1 = :2 or (field1 = 0 and 'Y' = :3)) and ((dbms_logstdby.db_is_logstdby = 0 and job < 1000000000) or  (dbms_logstdby.db_is_logstdby = 1 and job >= 1000000000)) order by next_date, jobupdate dependency$ set p_timestamp=:1, p_obj#=:2 where d_obj#=:3 and p_obj#=:4delete from obj$ where obj# = :1select procedure#,entrypoint# from procedurec$ where obj#=:1 order by procedure#delete from WRH$_SHARED_POOL_ADVICE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id))  DELETE FROM xs$session_rolesselect name, address, protocol, subscriber_type, subscriber_id  from "SYS"."AQ$_ALERT_QT_S"  where queue_name = :1 and  ((bitand(subscriber_type, 1) = 1) OR   (bitand(subscriber_type, 4) = 4) OR   (bitand(subscriber_type, 8) = 8) OR   (bitand(subscriber_type, 4096) = 4096))  and rule_name IS NULL AND ruleset_name IS NULL AND  negative_ruleset_name IS NULLselect /*+ index(idl_ub2$ i_idl_ub21) +*/ piece#,length,piece from idl_ub2$ where obj#=:1 and part=:2 and version=:3 order by piece#select /*+ index(idl_ub2$ i_idl_ub21) +*/ piece#,length,piece from idl_ub2$ where obj#=:1 and part=:2 and version=:3 order by piece#LOCK TABLE "WRH$_SYSSTAT" PARTITION ("WRH$_SYSSTA_2827760704_27")  IN EXCLUSIVE MODE  NOWAIT SELECT /*+ rule */ U.NAME, OT.NAME, NULL, NULL, C.NAME, BITAND(H.SPARE2, 2), BITAND(H.SPARE2, 1), H.DISTCNT, H.DENSITY, H.SPARE1, H.SAMPLE_SIZE, H.NULL_CNT, H.TIMESTAMP#, H.AVGCLN, H.LOWVAL, H.HIVAL, H.MINIMUM, H.MAXIMUM, NULL, NULL, H.CACHE_CNT, HG.BUCKET, HG.ENDPOINT, HG.EPVALUE, BITAND(H.SPARE2, 4), NULL FROM SYS.USER$ U, SYS.OBJ$ OT, SYS.COL$ C, SYS.HIST_HEAD$ H, HISTGRM$ HG WHERE :B4 IS NULL AND U.NAME = :B3 AND OT.OWNER# = U.USER# AND OT.NAME = :B2 AND OT.TYPE# = 2 AND C.OBJ# = OT.OBJ# AND (:B1 IS NULL OR C.NAME = :B1 ) AND H.OBJ# = OT.OBJ# AND H.INTCOL# = C.INTCOL# AND HG.OBJ#(+) = H.OBJ# AND HG.INTCOL#(+) = H.INTCOL# UNION ALL SELECT U.NAME, OT.NAME, OP.SUBNAME, NULL, C.NAME, BITAND(H.SPARE2, 2), BITAND(H.SPARE2, 1), H.DISTCNT, H.DENSITY, H.SPARE1, H.SAMPLE_SIZE, H.NULL_CNT, H.TIMESTAMP#, H.AVGCLN, H.LOWVAL, H.HIVAL, H.MINIMUM, H.MAXIMUM, NULL, NULL, H.CACHE_CNT, HG.BUCKET, HG.ENDPOINT, HG.EPVALUE, BITAND(H.SPARE2, 4), NULL FROM SYS.USER$ U, SYS.OBJ$ OT, SYS.COL$ C, SYS.TABPARTDELETE FROM SYS.SCHEDULER$_WINDOW_DETAILS WHERE LOG_ID IN (SELECT E.LOG_ID FROM SYS.SCHEDULER$_EVENT_LOG E WHERE E.TYPE# = 69 AND E.LOG_DATE < :B2 - NUMTODSINTERVAL(:B1 , 'DAY'))delete from WRI$_ALERT_OUTSTANDING where reason_id = :1 and object_id = :2 and subobject_id = :3 and internal_instance_number = :4 returning owner, object_name, subobject_name, sequence_id, error_instance_id, creation_time into :5, :6, :7, :8, :9, :10select i.obj#, i.flags, u.name, o.name, o.type#     from sys.obj$ o, sys.user$ u, sys.ind_online$ i    where  (bitand(i.flags, 256) = 256 or bitand(i.flags, 512) = 512) and           (not((i.type# = 9) and bitand(i.flags,8) = 8)) and           o.obj#=i.obj# and o.owner# = u.user#update tab$ set ts#=:2,file#=:3,block#=:4,bobj#=decode(:5,0,null,:5),tab#=decode(:6,0,null,:6),intcols=:7,kernelcols=:8,clucols=decode(:9,0,null,:9),audit$=:10,flags=:11,pctfree$=:12,pctused$=:13,initrans=:14,maxtrans=:15,rowcnt=:16,blkcnt=:17,empcnt=:18,avgspc=:19,chncnt=:20,avgrln=:21,analyzetime=:22,samplesize=:23,cols=:24,property=:25,degree=decode(:26,1,null,:26),instances=decode(:27,1,null,:27),dataobj#=:28,avgspc_flb=:29,flbcnt=:30,trigflag=:31,spare1=:32,spare2=decode(:33,0,null,:33),spare4=:34,spare6=:35 where obj#=:1delete from WRH$_FILEMETRIC_HISTORY tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select metadata from kopm$  where name='DB_FDO'select metadata from kopm$  where name='DB_FDO'select low, bit from  (select snap_id - 1 low, min(begin_interval_time) bit from wrm$_snapshot where dbid = :dbid and snap_id = (select min(snap_id) from wrm$_snapshot where dbid = :dbid and status in (0,1)) group by snap_id union all select 2147483647, systimestamp from  v$database where dbid <> :dbid order by 1 asc nulls last ) where rownum = 1 delete from WRH$_MEMORY_TARGET_ADVICE tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) update seg$ set type#=:4,blocks=:5,extents=:6,minexts=:7,maxexts=:8,extsize=:9,extpct=:10,user#=:11,iniexts=:12,lists=decode(:13, 65535, NULL, :13),groups=decode(:14, 65535, NULL, :14), cachehint=:15, hwmincr=:16, spare1=DECODE(:17,0,NULL,:17),scanhint=:18, bitmapranges=:19 where ts#=:1 and file#=:2 and block#=:3insert into wrh$_sysmetric_summary     (snap_id, dbid, instance_number,      begin_time, end_time, intsize, group_id, metric_id, num_interval,      maxval, minval, average, standard_deviation, sum_squares)  select      :snap_id, :dbid, :instance_number,      begtime, endtime, intsize_csec,      groupid, metricid, numintv, max, min, avg, std, sumsq    FROM x$kewmsmdv WHERE groupid = 2select snap_id + 1 low, max(end_interval_time) eit from wrm$_snapshot where dbid = :dbid and snap_id = (select max(snap_id) from wrm$_snapshot s where dbid = :dbid and snap_id < :snap_id and status in (0,1) and not exists (select 1 from WRM$_BASELINE b where b.dbid = s.dbid and s.snap_id >= b.start_snap_id and s.snap_id <= b.end_snap_id)) group by snap_id delete from WRH$_ROWCACHE_SUMMARY_BL tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) delete from WRH$_TEMPSTATXS tab where (:beg_snap <= tab.snap_id and         tab.snap_id <= :end_snap and         dbid = :dbid)    and not exists (select 1 from WRM$_BASELINE b                    where (tab.dbid = b.dbid) and                          (tab.snap_id >= b.start_snap_id) and                          (tab.snap_id <= b.end_snap_id)) select t.ts#,t.file#,t.block#,nvl(t.bobj#,0),nvl(t.tab#,0),t.intcols,nvl(t.clucols,0),t.audit$,t.flags,t.pctfree$,t.pctused$,t.initrans,t.maxtrans,t.rowcnt,t.blkcnt,t.empcnt,t.avgspc,t.chncnt,t.avgrln,t.analyzetime,t.samplesize,t.cols,t.property,nvl(t.degree,1),nvl(t.instances,1),t.avgspc_flb,t.flbcnt,t.kernelcols,nvl(t.trigflag, 0),nvl(t.spare1,0),nvl(t.spare2,0),t.spare4,t.spare6,ts.cachedblk,ts.cachehit,ts.logicalread from tab$ t, tab_stats$ ts where t.obj#= :1 and t.obj# = ts.obj# (+)select t.ts#,t.file#,t.block#,nvl(t.bobj#,0),nvl(t.tab#,0),t.intcols,nvl(t.clucols,0),t.audit$,t.flags,t.pctfree$,t.pctused$,t.initrans,t.maxtrans,t.rowcnt,t.blkcnt,t.empcnt,t.avgspc,t.chncnt,t.avgrln,t.analyzetime,t.samplesize,t.cols,t.property,nvl(t.degree,1),nvl(t.instances,1),t.avgspc_flb,t.flbcnt,t.kernelcols,nvl(t.trigflag, 0),nvl(t.spare1,0),nvl(t.spare2,0),t.spare4,t.spare6,ts.cachedblk,ts.cachehit,ts.logicalread from tab$ t, tab_stats$ ts where t.obj#= :1 and t.obj# = ts.obj# (+)select t.ts#,t.file#,t.block#,nvl(t.bobj#,0),nvl(t.tab#,0),t.intcols,nvl(t.clucols,0),t.audit$,t.flags,t.pctfree$,t.pctused$,t.initrans,t.maxtrans,t.rowcnt,t.blkcnt,t.empcnt,t.avgspc,t.chncnt,t.avgrln,t.analyzetime,t.samplesize,t.cols,t.property,nvl(t.degree,1),nvl(t.instances,1),t.avgspc_flb,t.flbcnt,t.kernelcols,nvl(t.trigflag, 0),nvl(t.spare1,0),nvl(t.spare2,0),t.spare4,t.spare6,ts.cachedblk,ts.cachehit,ts.logicalread from tab$ t, tab_stats$ ts where t.obj#= :1 and t.obj# = ts.obj# (+)delete from sys.wri$_optstat_tab_history                                     where nvl(:1, savtime) <= savtime and savtime < nvl(:2, savtime+1)             and obj# = nvl(:3, obj#) and rownum <= NVL(:4, rownum)select position#,sequence#,level#,argument,type#,charsetid,charsetform,properties,nvl(length, 0), nvl(precision#, 0),nvl(scale, 0),nvl(radix, 0), type_owner,type_name,type_subname,type_linkname,pls_type from argument$ where obj#=:1 and procedure#=:2 order by sequence# descselect /*+ FIRST_ROWS(1) PARALLEL("WRH$_MVPARAMETER", 1) */ 1 from "SYS"."WRH$_MVPARAMETER" PARTITION ("WRH$_MVPARA_2827760704_27")  where ( (  (  ( "DBID" > 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" >= 52 OR "SNAP_ID" IS NULL  )  )  ) ) and rownum < 2SELECT ATTRIBUTE,SCOPE,NUMERIC_VALUE,CHAR_VALUE,DATE_VALUE FROM SYSTEM.PRODUCT_PRIVS WHERE (UPPER('SQL*Plus') LIKE UPPER(PRODUCT)) AND (USER LIKE USERID)SELECT PARAM_ID, AUDIT_TRAIL_TYPE#, NUMBER_VALUE, STRING_VALUE  FROM SYS.DAM_CONFIG_PARAM$  WHERE PARAM_ID = 21 AND  (AUDIT_TRAIL_TYPE# = 1 OR AUDIT_TRAIL_TYPE# = 3 OR AUDIT_TRAIL_TYPE# = 15)select decode(failover_method, NULL, 0 , 'BASIC', 1, 'PRECONNECT', 2 , 'PREPARSE', 4 , 0), decode(failover_type, NULL, 1 , 'NONE', 1 , 'SESSION', 2, 'SELECT',  4, 1), failover_retries, failover_delay, flags from service$ where name = :1select SUM(data_length) from all_tab_columns where table_name = 'TESTING'select count(*) from sys.scheduler$_job_argument where oid = :1 select privilege# from sysauth$ where (grantee#=:1 or grantee#=1) and privilege#>0 delete from "SYS"."WRM$_SNAPSHOT" where "DBID" = :1 and "INSTANCE_NUMBER" = :2 and "STARTUP_TIME" = :3select i.obj#, i.flags, u.name, o.name, o.type#     from sys.obj$ o, sys.user$ u, sys.ind$ idx, sys.ind_online$ i    where  bitand(i.flags, 512) = 512 and o.obj#=idx.obj# and           o.owner# = u.user# and idx.obj#=i.obj# select decode(value$, 'PREPARE' , 1 , 'REPLAY' , 2 , 0 ) from props$ where name = 'WORKLOAD_REPLAY_MODE'SELECT parameter_value  FROM  smb$config  WHERE parameter_name = 'SPACE_BUDGET_PERCENT'update sys.mon_mods$ set inserts = inserts + :ins, updates = updates + :upd, deletes = deletes + :del, flags = (decode(bitand(flags, :flag), :flag, flags, flags + :flag)), drop_segments = drop_segments + :dropseg, timestamp = :time where obj# = :objnselect 1 from "SYS"."AQ$_SCHEDULER$_REMDB_JOBQTAB_L"delete from hist_head$ where obj# = :1LOCK TABLE "WRH$_PARAMETER" PARTITION ("WRH$_PARAME_2827760704_27")  IN EXCLUSIVE MODE  NOWAIT SELECT T.TASK_ID, E.EXECUTION_NAME FROM SYS.DBA_ADVISOR_TASKS T, SYS.DBA_ADVISOR_EXECUTIONS E, WRI$_ADV_PARAMETERS P WHERE T.TASK_ID = P.TASK_ID AND T.TASK_ID = E.TASK_ID AND T.STATUS# <> :B2 AND T.READ_ONLY = 'FALSE' AND P.NAME = 'EXECUTION_DAYS_TO_EXPIRE' AND PRVT_ADVISOR.CHECK_EXPIRATION_COMP(:B1 , E.EXECUTION_LAST_MODIFIED, P.VALUE) = 1select cols,audit$,textlength,intcols,property,flags,rowid from view$ where obj#=:1select cols,audit$,textlength,intcols,property,flags,rowid from view$ where obj#=:1select /*+ FIRST_ROWS(1) PARALLEL("WRH$_ROWCACHE_SUMMARY", 1) */ 1 from "SYS"."WRH$_ROWCACHE_SUMMARY" PARTITION ("WRH$_ROWCAC_2827760704_27")  where ( (  (  ( "DBID" < 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" < 52 )  )  ) ) and rownum < 2SELECT OBJOID, CLSOID,    DECODE(BITAND(FLAGS, 16384), 0, RUNTIME,           LETIME),    (2*PRI +     DECODE(BITAND(STATUS, 4), 0, 0,            decode(INST, :1, -1, 1))),    JOBTYPE, SCHLIM, WT, INST, RUNNOW, ENQ_SCHLIM, INST_ID  FROM (  select a.obj# OBJOID, a.class_oid CLSOID, a.next_run_date RUNTIME,         a.last_enabled_time LETIME, a.flags FLAGS, a.job_status STATUS,         1 JOBTYPE, a.priority PRI,         decode(a.schedule_limit, NULL,                decode(bitand(a.flags, 4194304), 4194304,                              b.schedule_limit, NULL),               a.schedule_limit) SCHLIM,         a.job_weight WT,         decode(a.running_instance, NULL, 0, a.running_instance) INST,         decode(bitand(a.flags, 16384), 0, 0, 1) RUNNOW,         decode(bitand(a.job_status, 8388608), 0, 0, 1) ENQ_SCHLIM,         a.instance_id INST_ID  from sys.scheduler$_job a, sys.scheduler$_program b, v$database v ,        v$instance i  where a.program_oid = b.obj#(+)    and (a.database_role = vselect kernelcols, initrans, maxtrans, nvl(tab#, 0), ts#, file#, block#,  property from tab$ where obj# = :1select /*+ FIRST_ROWS(1) PARALLEL("WRH$_SYSTEM_EVENT", 1) */ 1 from "SYS"."WRH$_SYSTEM_EVENT" PARTITION ("WRH$_SYSTEM_2827760704_27")  where ( (  (  ( "DBID" > 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" >= 52 OR "SNAP_ID" IS NULL  )  )  ) ) and rownum < 2select 1 from aq$_schedulesselect box_id from rule_set_rop$ where rs_obj# = :1 and ec_obj# = :2  and rule_id = :3 and rule_or_piece = :4 and rop_id = :5 order by eval_idselect SUM(data_length) from all_tab_columns where table_name = 'JOBS'select value from rule_set_pr$ where rs_obj# = :1 and ec_obj# = :2 and  rule_id = :3 and rule_or_piece = :4 and rop_id = :5 and eval_id = :6  order by pr_idselect /*+ rule */ bucket_cnt, row_cnt, cache_cnt, null_cnt, timestamp#, sample_size, minimum, maximum, distcnt, lowval, hival, density, col#, spare1, spare2, avgcln from hist_head$ where obj#=:1 and intcol#=:2select SUM(column_length) from all_ind_columns where table_name = 'LOCATIONS'select ct.toid, ct.version#  from sys.col$ c, sys.coltype$ ct, sys.obj$ o  where c.intcol# = ct.intcol#  and ct.toid = o.oid$  and o.type# <> 10  and c.obj# = ct.obj#  and c.name = 'USER_DATA'  and c.obj# = :1SELECT VALUE FROM V$PARAMETER WHERE UPPER(NAME) = '_ENABLE_FRONT_END_VIEW_OPTIMIZATION'select 1 from WRH$_INTERCONNECT_PINGS where dbid     = :dbid   and :bind1  <= snap_id   and snap_id  < :bind2   and rownum  <= 1select /*+ ordered use_nl(o1 o2) */ o1.name table_name, o2.name lob_name from (select obj#, lobj#, ind# from sys.lob$ l where ts# = (select ts# from sys.ts$ where name = :tsname )) s1, sys.obj$ o1, sys.obj$ o2 where (s1.lobj# = o2.obj# or s1.ind# = o2.obj#) and o1.obj# = s1.obj#select u.name, o.name, o.namespace, o.type#, decode(bitand(i.property,1024),0,0,1), o.obj# from ind$ i,obj$ o,user$ u where i.obj#=:1 and o.obj#=i.bo# and o.owner#=u.user#SELECT DECODE(:B1 , 0, 'NEXT OBJECT', 1, 'INDEX', 2, 'TABLE', 3, 'CLUSTER', 4, 'VIEW', 5, 'SYNONYM', 6, 'SEQUENCE', 7, 'PROCEDURE', 8, 'FUNCTION', 9, 'PACKAGE', 11, 'PACKAGE BODY', 12, 'TRIGGER', 13, 'TYPE', 14, 'TYPE BODY', 19, 'TABLE PARTITION', 20, 'INDEX PARTITION', 21, 'LOB', 22, 'LIBRARY', 23, 'DIRECTORY', 24, 'QUEUE', 28, 'JAVA SOURCE', 29, 'JAVA CLASS', 30, 'JAVA RESOURCE', 32, 'INDEXTYPE', 33, 'OPERATOR', 34, 'TABLE SUBPARTITION', 35, 'INDEX SUBPARTITION', 40, 'LOB PARTITION', 41, 'LOB SUBPARTITION', 42, 'MATERIALIZED VIEW', 43, 'DIMENSION', 44, 'CONTEXT', 47, 'RESOURCE PLAN', 48, 'CONSUMER GROUP', 51, 'SUBSCRIPTION', 52, 'LOCATION', 55, 'XML SCHEMA', 56, 'JAVA DATA', 57, 'SECURITY PROFILE', 'UNDEFINED') FROM DUALselect obj# from oid$ where user#=:1 and oid$=:2select obj# from oid$ where user#=:1 and oid$=:2insert into wrh$_waitclassmetric_history     (snap_id, dbid, instance_number, wait_class_id,      begin_time, end_time, intsize, group_id,      average_waiter_count, dbtime_in_wait,      time_waited, wait_count,      time_waited_fg, wait_count_fg)  select      :snap_id, :dbid, :instance_number, wait_id,      begtime, endtime, intsize_csec, groupid,      average_waiter_count, dbtime_in_wait,      time_waited, wait_count,      time_waited_fg, wait_count_fg  from x$kewmevmvLOCK TABLE "WRH$_WAITSTAT" PARTITION ("WRH$_WAITST_2827760704_27")  IN EXCLUSIVE MODE  NOWAIT select cc.intcol# from cdef$ c, ccol$ cc where c.obj#=cc.obj# and c.con#=cc.con# and c.type#=7 and c.obj#=:1select 1 from WRH$_LATCH_PARENT where dbid     = :dbid   and :bind1  <= snap_id   and snap_id  < :bind2   and rownum  <= 1select /*+ FIRST_ROWS(1) PARALLEL("WRH$_EVENT_HISTOGRAM", 1) */ 1 from "SYS"."WRH$_EVENT_HISTOGRAM" PARTITION ("WRH$_EVENT__2827760704_27")  where ( (  (  ( "DBID" > 2827760704 )  )  OR  ( "DBID" = 2827760704 AND  ( "SNAP_ID" >= 52 OR "SNAP_ID" IS NULL  )  )  ) ) and rownum < 2select b, c, d, e from (  select ksmsgmemidx a, inst_id b, ksmsgmemnam c, ksmsgmemval d,        decode(ksmsgmemrez, 0, 'No', 1, 'Yes', NULL) e from x$ksmsgmem    union  select 32 a, USERENV('Instance') b, 'Free SGA Memory Available' c,    current_size d, NULL e from v$sga_dynamic_free_memory)select name from service$ where lower(name) = lower(:1) and deletion_date is nullselect max(procedure#) from procedurejava$ where obj#=:1select SUM(data_length) from all_tab_columns where table_name = 'Y'                                    merge /*+ dynamic_sampling(mm 4) dynamic_sampling_est_cdn(mm)                           dynamic_sampling(m 4) dynamic_sampling_est_cdn(m) */                    into sys.mon_mods_all$ mm                                                   using                                                                         (select                                                                          decode(grouping_id(tp.bo#,tsp.pobj#,m.obj#),3,tp.bo#,1,tsp.pobj#,m.obj#)        obj#,                                                                       sum(m.inserts) inserts, sum(m.updates) updates, sum(m.deletes) deletes,       case when grouping_id(tp.bo#,tsp.pobj#,m.obj#) = 0 then                       (/* IF THIS IS A SUBPARTITION AGGREGATE THE TRUNCATE BIT */                    decode(sum(bitand(m.flags,1)),0,0,1)                                          +decode(sum(bitand(m.flags,2)),0,0,2)                                         +decode(sum(bitand(m.flock table sys.mon_mods_all$ in exclusive mode nowaitSELECT COLUMN_NAME FROM DBA_PART_KEY_COLUMNS WHERE OWNER = :B2 AND NAME = :B1 AND OBJECT_TYPE ='TABLE' AND COLUMN_POSITION = 1select name,mandatory,mgmt_method,mast_method,pdl_method,que_method,max_iops,max_mbps,num_plan_directives,description,sub_plan from resource_plan$ where obj#=:1 and status = 'ACTIVE'select service_id, name, name_hash, network_name, creation_date ,creation_date_hash, goal, flags, edition from service$ where lower(network_name) = lower(:1) and deletion_date is nullselect 1 from sys.cdc_change_tables$  where source_schema_name = :1  and source_table_name = :2  and bitand(mv